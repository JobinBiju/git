package com.ddtkj.p2psys.credit.model.worker;


import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.ddtkj.p2psys.account.constant.AccountTradeConstant;
import com.ddtkj.p2psys.account.dao.AccountDao;
import com.ddtkj.p2psys.account.domain.Account;
import com.ddtkj.p2psys.core.util.TradeIDGenerator;
import com.ddtkj.p2psys.credit.dao.CollectionCreditDao;
import com.ddtkj.p2psys.credit.dao.CreditAssignmentDao;
import com.ddtkj.p2psys.credit.dao.CreditLogDao;
import com.ddtkj.p2psys.credit.domain.CollectionCredit;
import com.ddtkj.p2psys.credit.domain.CreditAssignment;
import com.ddtkj.p2psys.credit.domain.CreditLog;
import com.ddtkj.p2psys.tpp.YmdTPPWay;
import com.ddtkj.p2psys.tpp.ymd.model.YmdTransfer;
import com.ddtkj.p2psys.tpp.ymd.model.YmdTransferDetails;
import com.ddtkj.p2psys.user.domain.User;
import com.rongdu.common.util.BigDecimalUtil;
import com.rongdu.p2psys.borrow.dao.BorrowCollectionDao;
import com.rongdu.p2psys.borrow.dao.BorrowDao;
import com.rongdu.p2psys.borrow.domain.Borrow;
import com.rongdu.p2psys.borrow.domain.BorrowCollection;
import com.rongdu.p2psys.borrow.model.interest.EachPlan;
import com.rongdu.p2psys.core.Global;
import com.rongdu.p2psys.core.constant.Constant;
import com.rongdu.p2psys.core.executer.AbstractExecuter;
import com.rongdu.p2psys.core.executer.ExecuterHelper;
import com.rongdu.p2psys.core.util.BeanUtil;

/**
 * @描述：即投即生息债权转让工作类
 * @作者：wangchangwei@ddtkj.com
 * @创建时间：2015年1月19日 
 */
public class InstantLiveCreditWorker extends CreditWorker{

	/**
	 * @param creditAssignment
	 * @param creditLog
	 */
	public InstantLiveCreditWorker(CreditAssignment creditAssignment,
			CreditLog creditLog) {
		super(creditAssignment, creditLog);
	}
	/**
	 * @param creditAssignment
	 */
	public InstantLiveCreditWorker(CreditAssignment creditAssignment) {
		super(creditAssignment);
	}
	/**
	 * 处理债权转让 购入者(即投即生息)
	 * @param oldCollection
	 * @param type
	 * @param creditAssignment
	 * @param creditLog
	 */
	@Override
	public void handleCreditTenderSuccess(CreditLog creditLog){
		BorrowCollectionDao borrowCollectionDao = (BorrowCollectionDao) BeanUtil.getBean("borrowCollectionDao");
		BorrowDao borrowDao = (BorrowDao) BeanUtil.getBean("borrowDao");
		CreditLogDao clDao =  (CreditLogDao) BeanUtil.getBean("creditLogDao");
		CollectionCreditDao collectionCreditDao = (CollectionCreditDao) BeanUtil.getBean("collectionCreditDao");
		Borrow borrow = borrowDao.find(creditAssignment.getBorrow().getId()) ;
		Global.setTransfer("borrow", borrow);
		// 购买者待收处理
		// 原投资者或原债权者待收
		List<BorrowCollection> oldCollectList = null ;
		CreditAssignment oldCa = null ;
		CreditAssignment newCa=null;
		if(creditAssignment.getCaType()==1){
			oldCollectList = borrowCollectionDao.getMemberCollectionList(creditAssignment.getUser(), borrow,creditAssignment.getTender().getId());
			oldCa=creditAssignment;
		}
		if(creditAssignment.getCaType()==2){
			// 查关联表  当前购买的债权ID找到发布这条债权的对应购买记录  ，就是这条债权发布人的待收
			List<CollectionCredit> cclist = collectionCreditDao.findByOldCredit(creditLog.getCreditAssignment().getCreditLog());
			oldCollectList = new ArrayList<BorrowCollection>() ;
			for (CollectionCredit collectionCredit : cclist) {
				oldCa = collectionCredit.getOldCa() ;
				newCa = collectionCredit.getBuyCa();
				oldCollectList.add(collectionCredit.getBorrowCollection()) ;
			}
		} 
		// 购买者待收
		List<BorrowCollection> collectList = this.createCollectionList(oldCollectList,borrow.getStyle(),creditAssignment,creditLog);
		// 待收管理表生成数据
		double interest = 0.00;
		// 扣除管理费
		dudectFee(2,null,creditLog);
		Global.setTransfer("creditLog", creditLog);
		double account = creditLog.getBuyAccount() ;
		//JSDP-210 wcw 2015-07-4 start
		double capitalTotal=0;
		//JSDP-210 wcw 2015-07-4 end
		if(collectList.size()>0){
			borrowCollectionDao.save(collectList);
			for (BorrowCollection borrowCollection : collectList) {
				CollectionCredit cc = new CollectionCredit() ;
				cc.setAddIp("");
				cc.setAddTime(new Date());
				cc.setBorrowCollection(borrowCollection);
				cc.setBuyCa(creditAssignment);
				cc.setOldCa(oldCa);
				cc.setNewCa(newCa);
				cc.setCreditLog(creditLog);
				collectionCreditDao.save(cc);
				//购买者本次购买待收利息
				interest = BigDecimalUtil.add(borrowCollection.getInterest(),interest) ;
				//JSDP-210 wcw 2015-07-4 start
				capitalTotal=BigDecimalUtil.add(borrowCollection.getCapital(),capitalTotal);
				//JSDP-210 wcw 2015-07-4 end
			}
		}
		// 扣除冻结/生产待收本金
		Global.setTransfer("money", account);
		Global.setTransfer("creditLog", creditLog);
		Map<String, Object>  map=new HashMap<String, Object>();
		map.put("rechargeMoney", BigDecimalUtil.decimal(creditLog.getUseRecharge(),2));
		map.put("awardMoney", BigDecimalUtil.decimal(creditLog.getUseAward(),2));
		map.put("interestMoney", BigDecimalUtil.decimal(creditLog.getUseInterest(),2));
		map.put("returnCapitalMoney", BigDecimalUtil.decimal(creditLog.getUseReturnedMoney(),2));
		AbstractExecuter freeExecuter = ExecuterHelper.doExecuter("creditDecuctFreezeExecuter");
		//freeExecuter.execute(account, tenderUser, user);
		freeExecuter.execute(map, creditLog.getBuyUser(), creditAssignment.getUser());
		//--------wcw --账户表拆分--start----
		if(interest>0){
			// 生成待收利息
			Global.setTransfer("money", interest);
			Global.setTransfer("creditLog", creditLog);
			map=new HashMap<String, Object>();
			map.put("interestMoney", interest);
			AbstractExecuter waitExecuter = ExecuterHelper.doExecuter("creditWaitInterestExecuter");
			//waitExecuter.execute(interest, tenderUser, user);
			waitExecuter.execute(map,creditLog.getBuyUser(), creditAssignment.getUser());
		}

        //JSDP-210 wcw 2015-07-4 start
		//购买债权金额中包含部分利息，但是生成新待收的时候包含了全部利息，因此利息部分重复  需要去重
		double repeatInterest=BigDecimalUtil.decimal(BigDecimalUtil.sub(creditLog.getBuyAccount(),capitalTotal),2);
		if(repeatInterest>0){
			// 扣除重复的待收利息
			Global.setTransfer("interestMoney", repeatInterest);
			map=new HashMap<String, Object>();
			map.put("interestMoney", repeatInterest);
			AbstractExecuter waitExecuter = ExecuterHelper.doExecuter("creditDecuctWaitInterestExecuter");
			//waitExecuter.execute(interest, tenderUser, user);
			waitExecuter.execute(map,creditLog.getBuyUser(), creditAssignment.getUser());
		}
		//JSDP-210 wcw 2015-07-4 end
		
		creditLog.setBuyFeeStatus(1);
		creditLog.setSellFeeStatus(1);
		creditLog.setStatus("01");
		clDao.save(creditLog);
	}
	
	
	
	@Override
	public BorrowCollection fillCollection(EachPlan e, CreditLog t,
			CreditAssignment creditAssignment) {
		BorrowCollection c = new BorrowCollection();
		c.setBorrow(creditAssignment.getBorrow());
		c.setTender(creditAssignment.getTender());
		c.setInterest(e.getInterest());
		c.setCapital(e.getCapital());
		c.setRepaymentAccount(e.getTotal());
		c.setAddTime(new Date());
		c.setAddIp(Global.getIP());
		c.setStatus(0);
		c.setRepaymentYesAccount(0.00);
		c.setLateDays(0);
		c.setLateInterest(0.00);
		c.setUser(t.getBuyUser());
		c.setManageFee(BigDecimalUtil.decimal(BigDecimalUtil.mul(c.getInterest(), Global.getDouble("borrow_fee")),2));
		//JSDBET-835 wcw 2015-3-20 start
		c.setRepayCapitalOutTradeNo(TradeIDGenerator.createTradeSN(AccountTradeConstant.TRADE_WAY_PC, AccountTradeConstant.TRADE_SMALL_TYPE_CA__REPAY));
		c.setRepayInterestFeeOutTradeNo(TradeIDGenerator.createTradeSN(AccountTradeConstant.TRADE_WAY_PC, AccountTradeConstant.TRADE_SMALL_TYPE_CA__REPAY));
		c.setRepayInterestOutTradeNo(TradeIDGenerator.createTradeSN(AccountTradeConstant.TRADE_WAY_PC, AccountTradeConstant.TRADE_SMALL_TYPE_CA__REPAY));
		c.setRepayLateInterestOutTradeNo(TradeIDGenerator.createTradeSN(AccountTradeConstant.TRADE_WAY_PC, AccountTradeConstant.TRADE_SMALL_TYPE_CA__REPAY));
		c.setRepayTradeNo(TradeIDGenerator.createTradeBN(AccountTradeConstant.TRADE_LARGE_SORT_SALE));
		//JSDBET-835 wcw 2015-3-20 end
		return c;
	}
	@Override
	public List<BorrowCollection> createCollectionList(
			List<BorrowCollection> oldCollection, int type,
			CreditAssignment creditAssignment, CreditLog creditLog) {
		return super.createCollectionList(oldCollection, type, creditAssignment,
				creditLog);
	}
	/**
	 * 处理债权转让 转出者
	 * @param oldCollection
	 * @param type
	 * @param creditAssignment
	 * @param creditLog
	 */
	@Override
	public void handleCreditSellerSuccess(CreditLog creditLog){
		// 转出者资金入账
		BorrowDao borrowDao = (BorrowDao) BeanUtil.getBean("borrowDao");
		CollectionCreditDao collectionCreditDao = (CollectionCreditDao) BeanUtil.getBean("collectionCreditDao") ;
		BorrowCollectionDao borrowCollectionDao = (BorrowCollectionDao) BeanUtil.getBean("borrowCollectionDao");
		Borrow borrow = borrowDao.find(creditAssignment.getBorrow().getId()) ;
		Global.setTransfer("money",creditLog.getBuyAccount());
		Global.setTransfer("creditAssignment", creditAssignment);
		User user = creditAssignment.getUser();
		Map<String, Object>  map=new HashMap<String, Object>();
		map.put("interestMoney", BigDecimalUtil.decimal(BigDecimalUtil.mul(BigDecimalUtil.mul(BigDecimalUtil.div(creditAssignment.getHaveInsterest(),creditAssignment.getCreditCopies()),creditLog.getBuyCopies()), creditAssignment.getCreditDis()), 2));
		map.put("returnCapitalMoney",BigDecimalUtil.decimal(BigDecimalUtil.mul(BigDecimalUtil.mul(BigDecimalUtil.div(creditAssignment.getCreditAccount(),creditAssignment.getCreditCopies()),creditLog.getBuyCopies()), creditAssignment.getCreditDis()), 2));
		AbstractExecuter freeExecuter = ExecuterHelper.doExecuter("creditSellerRepayExecuter");	
		//freeExecuter.execute(account, tenderUser, user);
		freeExecuter.execute(map, user, creditLog.getBuyUser()); 
		
		//扣除  多余待收  既投既生息的 标   不是每次都一下扣没了，是买一次，扣一次   先拿到  原代收，生成购买者 新待收， 扣除掉
		List<BorrowCollection> oldCollectList = null ;
		if(creditAssignment.getCaType()==1){
			oldCollectList = borrowCollectionDao.getMemberCollectionList(creditAssignment.getUser(), borrow,creditAssignment.getTender().getId());
		}
		if(creditAssignment.getCaType()==2){
			// 查关联表  当前购买的债权ID找到发布这条债权的对应购买记录  ，就是这条债权发布人的待收
			List<CollectionCredit> cclist = collectionCreditDao.findByOldCredit(creditLog.getCreditAssignment().getCreditLog());
			oldCollectList = new ArrayList<BorrowCollection>() ;
			for (CollectionCredit collectionCredit : cclist) {
				oldCollectList.add(collectionCredit.getBorrowCollection()) ;
			}
		} 
		AbstractExecuter collrepayExecuter = ExecuterHelper.doExecuter("creditSellerCollectionRepayExecuter");
		Map<String, Object>  map2=new HashMap<String, Object>();
		double total = 0.00 ;
		// 购买者待收
		List<BorrowCollection> collectList = this.createCollectionList(oldCollectList,borrow.getStyle(),creditAssignment,creditLog);
		for (BorrowCollection bc : collectList) {
					total += bc.getRepaymentAccount() ;
			map2.put("money", total) ;
		}
		// 执行扣除
		collrepayExecuter.execute(map2, creditAssignment.getUser());
		
		// 扣除投标的红包
//		double supRP = 0.00 ; // 记录红包不够扣的时候，需要扣现金的部分
//		BorrowTender bt = creditAssignment.getTender() ;
//		if(creditAssignment.getCaType()==1){
//			double money = bt.getProduceRpDynamic() ;
//			Global.setTransfer("totalPayRP", money);
//			AccountDao accountDao = (AccountDao) BeanUtil.getBean("accountDao");
//			Account acc = accountDao.getAccountByUserId(creditAssignment.getUser().getUserId()) ;
//			if(acc.getRpDynamicTotal() < money){
//				supRP = BigDecimalUtil.sub(money , acc.getRpDynamicTotal());
//				money = acc.getRpDynamicTotal() ;
//			}
//			Map<String, Object>  rpMap=new HashMap<String, Object>();
//			Global.setTransfer("rpDynamicMoney", money);
//			Global.setTransfer("supRP", supRP);
//			map.put("rpDynamicMoney", money) ;
//			AbstractExecuter rpDynamicPayExecuter = ExecuterHelper.doExecuter("creditSellerPayRpDynamicExecuter");
//			rpDynamicPayExecuter.execute(rpMap, creditAssignment.getUser(),new User(Constant.ADMIN_ID));
//		}
//		creditAssignment.setSellFee(BigDecimalUtil.add(creditAssignment.getSellFee(),supRP)); // 不够扣除，说明已经 用掉了部分钱袋子，用掉的部分扣除 等额的现金
		
		// 扣除管理费
		dudectFee(1,creditAssignment,creditLog);
		
		for (BorrowCollection old : oldCollectList) {
			old.setType(2);
			borrowCollectionDao.update(old);
		}
		/*//专门处理债权未满
	    BorrowCollection bc=new BorrowCollection();
	    if("2".equals(creditAssignment.getCaType())){
	    	// 购买的债权转出
	    	bc=fillBorrowCollection(creditAssignment,0,creditAssignment.getId());
	    }else{
	    	//原投资人转出
	    	bc=fillBorrowCollection(creditAssignment,creditAssignment.getId(),0);
	    }
	    collectionCreditDao.findCollectionByCredit(0, credit_assignment_id, buy_credit_assignment_id)
	    borrowCollectionDao.save(bc);*/
		if(creditAssignment.getCreditCopies() == creditAssignment.getSellCopies()){  // 当天的都被买完了。结束
			CreditAssignmentDao creditAssignmentDao = (CreditAssignmentDao) BeanUtil.getBean("creditAssignmentDao") ;
			creditAssignment.setStatus(CreditAssignment.CREDIT_FINISH);
			creditAssignmentDao.update(creditAssignment) ;
		}
	}

	@Override
	public void dudectFee(int type, CreditAssignment ca, CreditLog cl) {
		// 既投既生息 管理费支付
		AccountDao accountDao = (AccountDao) BeanUtil.getBean("accountDao");
		Account act = null;
		//worker.checkTender(tender);
		//--------wcw---------------将账户可用金额拆分为充值可用金额、奖励可用金额、利息可用金额、回款本金可用金额----start-------
		double account = 0 ;
		if(type==1){
			act = accountDao.findObjByProperty("user.userId",ca.getUser().getUserId()) ;
			//account = BigDecimalUtil.mul(ca.getSellFee(), BigDecimalUtil.div(cl.getBuyCopies(), ca.getCreditCopies())) ;
			account=BigDecimalUtil.decimal(BigDecimalUtil.mul(cl.getBuyCopies(), BigDecimalUtil.div(ca.getSellFee(),ca.getCreditCopies())), 2);
		}
		if(type==2){
			act = accountDao.findObjByProperty("user.userId",cl.getBuyUser().getUserId()) ;
			account = cl.getBuyFee() ;
		}
		double validAccount =account ;
    	double currRecharge = 0;
		double currAward = 0;
		double currInterest = 0;
		double currReturnCapital = 0;
		//充值可用
		double rechargeUsable=act.getRechargeUsable();
		//奖励可用
		double awardUsable=act.getAwardUsable();
		//回款本金可用
		double returnCapitalUsable=act.getReturnCapitalUsable();
		
		//计算提现金额冻结归属（使用充值、使用奖励、使用利息、使用回款）
		if(rechargeUsable>=validAccount){
			currRecharge=validAccount;
		}else{
			if((rechargeUsable+awardUsable)>=validAccount){
				currRecharge=rechargeUsable;
				currAward=BigDecimalUtil.decimal(BigDecimalUtil.sub(validAccount,rechargeUsable),2);
			}else{
				double currMoney=BigDecimalUtil.decimal(BigDecimalUtil.add(rechargeUsable,awardUsable,returnCapitalUsable),2);
				if(currMoney>=validAccount){
					currRecharge=rechargeUsable;
					currAward=awardUsable;
					currReturnCapital=BigDecimalUtil.decimal(BigDecimalUtil.add(validAccount,-rechargeUsable,-awardUsable),2);
				}else{
					currRecharge=rechargeUsable;
					currAward=awardUsable;
					currReturnCapital=returnCapitalUsable;
					currInterest=BigDecimalUtil.decimal(BigDecimalUtil.sub(validAccount, currMoney),2);
				}
			}
		}
		Map<String, Object> map=new HashMap<String, Object>();
		map.put("rechargeMoney", BigDecimalUtil.decimal(currRecharge, 2));
		map.put("awardMoney", BigDecimalUtil.decimal(currAward,2));
		map.put("interestMoney", BigDecimalUtil.decimal(currInterest,2));
		map.put("returnCapitalMoney", BigDecimalUtil.decimal(currReturnCapital,2));
		//JSDBET-838 wcw 2015-3-20 start
		if(type==1){
			map.put("creditAssignment", ca);
			Global.setTransfer("borrow", ca.getBorrow());
		}
		if(type==2){
			map.put("creditAssignment", cl.getCreditAssignment());
			Global.setTransfer("borrow", cl.getCreditAssignment().getBorrow());
		}
		//JSDBET-838 wcw 2015-3-20 end
		Global.setTransfer("money", account);
		AbstractExecuter borrowTenderExecuter = ExecuterHelper.doExecuter("creditSellerPayFeeExecuter");
		if(type==1){
			borrowTenderExecuter.execute(map, ca.getUser(),new User(Constant.ADMIN_ID));
		}
		if(type==2){
			borrowTenderExecuter.execute(map, cl.getBuyUser(),new User(Constant.ADMIN_ID));
		}
	}
	private BorrowCollection fillBorrowCollection(CreditAssignment c,long credit_assignment_id,long buy_credit_assignment_id){
		CollectionCreditDao collectionCreditDao = (CollectionCreditDao) BeanUtil.getBean("collectionCreditDao");
		//该债权要转让的那部分
    	Object[] a=collectionCreditDao.getTotalCollectionByCredit(2, credit_assignment_id, buy_credit_assignment_id);
    	double oldRepayAccountTotal=(Double) a[0];
    	double oldRepayInterstTotal=(Double) a[1];
    	double oldRepayCapitalTotal=(Double) a[2];
    	//该债权被投资人购买的部分
    	Object[] b=collectionCreditDao.getTotalCollectionByCredit(0, credit_assignment_id, buy_credit_assignment_id);
    	double newRepayAccountTotal=(Double) b[0];
    	double newRepayInterstTotal=(Double) b[1];
    	double newRepayCapitalTotal=(Double) a[2];
    	//剩余未转出的债权
    	double repayAccount=BigDecimalUtil.decimal(BigDecimalUtil.sub(oldRepayAccountTotal, newRepayAccountTotal),2);
    	double repayInterest=BigDecimalUtil.decimal(BigDecimalUtil.sub(oldRepayInterstTotal, newRepayInterstTotal),2);
    	double repayCapital=BigDecimalUtil.decimal(BigDecimalUtil.sub(oldRepayCapitalTotal, newRepayCapitalTotal),2);
    	BorrowCollection bct = new BorrowCollection();
    	if(repayAccount>0){
			bct.setBorrow(c.getBorrow());
			bct.setTender(null);
			bct.setInterest(repayCapital);
			bct.setCapital(repayInterest);
			bct.setRepaymentAccount(repayAccount);
			bct.setAddTime(new Date());
			bct.setAddIp(Global.getIP());
			bct.setStatus(0);
			bct.setRepaymentYesAccount(0.00);
			bct.setLateDays(0);
			bct.setLateInterest(0.00);
			bct.setUser(c.getUser());
			bct.setManageFee(BigDecimalUtil.decimal(BigDecimalUtil.mul(repayInterest, Global.getDouble("borrow_fee")),2));
			bct.setType(3);
		}
		return bct;
	}
	@Override
	public YmdTransfer handleCreditTranferSuccess(CreditLog creditLog) {
		
		List<YmdTransferDetails> list=new ArrayList<YmdTransferDetails>();
        YmdTransfer ymdTransfer = new  YmdTransfer();
		ymdTransfer.setAccountNumber(ymdTransfer.getNumberId());
		ymdTransfer.setTradeNo(TradeIDGenerator.createTradeBN(AccountTradeConstant.TRADE_LARGE_SORT_SALE));
		ymdTransfer.setTradeType(AccountTradeConstant.TRADE_YMD_TRADE);
		//债权购买者向债权转让人转账
		//购买金额转账
		YmdTransferDetails row=new YmdTransferDetails();
		row.setOutTradeNo(TradeIDGenerator.createTradeSN(AccountTradeConstant.TRADE_WAY_PC, AccountTradeConstant.TRADE_SMALL_TYPE_CA_BUY_TRANFER));
		//付款者
		row.setOutName(creditLog.getBuyUser().getUserName());
		//接收者
		row.setInName(creditLog.getCreditAssignment().getUser().getUserName());
		row.setAmount(creditLog.getBuyAccount()+"");
		row.setRemark("债券购买成功,"+ymdTransfer.getTradeNo()+"从受让人用户"+creditLog.getBuyUser().getUserName()+"给转让人用户"+creditLog.getCreditAssignment().getUser().getUserName()+"转账购买金额"+creditLog.getBuyAccount()+"元");
		list.add(row); 
		
		if(creditLog.getBuyFee()>0){
			//购买支付服务费转账
			row=new YmdTransferDetails();
			row.setOutTradeNo(TradeIDGenerator.createTradeSN(AccountTradeConstant.TRADE_WAY_PC, AccountTradeConstant.TRADE_SMALL_TYPE_CA_BUYER_FEE));
			//付款者
			row.setOutName(creditLog.getBuyUser().getUserName());
			//接收者
			row.setInName(ymdTransfer.getNumberId());
			row.setAmount(creditLog.getBuyFee()+"");
			row.setRemark("债券购买成功,"+ymdTransfer.getTradeNo()+"从受让人用户"+creditLog.getBuyUser().getUserName()+"给平台用户"+creditLog.getCreditAssignment().getUser().getUserName()+"转账服务费"+creditLog.getBuyFee()+"元");
			list.add(row); 
		}
		
		
		double sellFee=BigDecimalUtil.decimal(BigDecimalUtil.mul(creditLog.getBuyCopies(), BigDecimalUtil.div(creditAssignment.getSellFee(),creditAssignment.getCreditCopies())), 2);
		if(sellFee>0){
			//债权转让人服务费转账
			row=new YmdTransferDetails();
			row.setOutTradeNo(TradeIDGenerator.createTradeSN(AccountTradeConstant.TRADE_WAY_PC, AccountTradeConstant.TRADE_SMALL_TYPE_CA_SELLER_FEE));
			//付款者
			row.setOutName(creditAssignment.getUser().getUserName());
			//接收者
			row.setInName(ymdTransfer.getNumberId());
			row.setAmount(sellFee+"");
			row.setRemark("债权购买成功,"+ymdTransfer.getTradeNo()+"从转让人用户"+creditAssignment.getUser().getUserName()+"给平台用户转账服务费金额"+sellFee+"元");
			list.add(row); 
		}
		ymdTransfer =YmdTPPWay.transfer(AccountTradeConstant.TRADE_YMD_TRADE, ymdTransfer.getTradeNo(), list);
		return ymdTransfer;
	}
	
	
}
