package com.rongdu.p2psys.borrow.executer;

import com.ddtkj.p2psys.account.domain.Account;
import com.ddtkj.p2psys.account.domain.AccountLog;
import com.rongdu.common.util.BigDecimalUtil;
import com.rongdu.common.util.StringUtil;
import com.rongdu.p2psys.account.exception.AccountException;
import com.rongdu.p2psys.core.Global;
import com.rongdu.p2psys.core.constant.Constant;
import com.rongdu.p2psys.core.executer.BaseExecuter;

/**
 * 扣除冻结投标金额，生成待收本金
 * 
 * @author cx
 * @version 2.0
 * @since 2014-5-21
 */
public class BorrowDecuctFreezeExecuter extends BaseExecuter {

	private String accountLogType = Constant.INVEST;

	@Override
	public String getAccountLogType() {
		return accountLogType;
	}

	@Override
	public void addAccountLog() {
		Global.setTransfer("weburl", Global.getString("weburl"));
		Account account = accountDao.findObjByProperty("user.userId", super.user.getUserId());
		AccountLog log = new AccountLog(super.user, accountLogType, super.toUser);
		//操作金额
		log.setRechargeMoney(rechargeMoney);
		log.setAwardMoney(awardMoney);
		log.setInterestMoney(interestMoney);
		log.setReturnCapitalMoney(returnCapitalMoney);
		//账户总额
		log.setAccountTotal(account.getAccountTotal());
		//账户多种可用
		log.setRechargeUsable(account.getRechargeUsable());
		log.setAwardUsable(account.getAwardUsable());
		log.setInterestUsable(account.getInterestUsable());
		log.setReturnCapitalUsable(account.getReturnCapitalUsable());
		//账户多种冻结
		log.setFreezeUseAward(account.getFreezeUseAward());
		log.setFreezeUseInterest(account.getFreezeUseInterest());
		log.setFreezeUseRecharge(account.getFreezeUseRecharge());
		log.setFreezeUseReturnCapital(account.getFreezeUseReturnCapital());
		//账户待收总额
		log.setCollectionTotal(account.getCollectionTotal());
		log.setTradeNo(tradeNo);
		log.setOutTradeNo(outTradeNo);
		/*log.setMoney(super.money);
		log.setTotal(account.getTotal());
		log.setUseMoney(account.getUseMoney());
		log.setNoUseMoney(account.getNoUseMoney());
		log.setCollection(account.getCollection());*/
		if(StringUtil.isNotBlank(outTradeNo)){
		   AccountLog al=accountLogDao.findObjByProperty("outTradeNo", outTradeNo);
		   if(al!=null&&al.getUser().getUserId()==user.getUserId()){
			   throw new AccountException("交易流水号==="+outTradeNo+"已经存在于资金日志中，请勿重复", 1);
		   }
		}
		log.setRemark(this.getLogRemark());
		log.setPaymentsType((byte)0);
		accountLogDao.save(log);
	}

	@Override
	public void handleAccount() {
		// 扣除冻结，生成待收
		// accountDao.modify(0, 0, -super.money, super.money,
		// super.user.getUserId());
		/*
		 * Account account = new Account(user); double
		 * useMoney=BigDecimalUtil.add
		 * (rechargeMoney,awardMoney,interestMoney,returnCapitalMoney);
		 * //账户多种冻结金额 account.setFreezeUseAward(-awardMoney);
		 * account.setFreezeUseInterest(-interestMoney);
		 * account.setFreezeUseRecharge(-rechargeMoney);
		 * account.setFreezeUseReturnCapital(-returnCapitalMoney); //账户待收总额
		 * account.setCollectionTotal(useMoney); accountDao.modify(account);
		 */
		Account account = accountDao.getAccountByUserId(super.user.getUserId());
		double useMoney = BigDecimalUtil.add(rechargeMoney, awardMoney,
				interestMoney, returnCapitalMoney);
		// 冻结金额
		account.setFreezeUseAward(BigDecimalUtil.add(
				account.getFreezeUseAward(), -awardMoney));

		account.setFreezeUseReturnCapital(BigDecimalUtil.add(
				account.getFreezeUseReturnCapital(), -returnCapitalMoney));

		account.setFreezeUseInterest(BigDecimalUtil.add(
				account.getFreezeUseInterest(), -interestMoney));

		account.setFreezeUseRecharge(BigDecimalUtil.add(
				account.getFreezeUseRecharge(), -rechargeMoney));

		account.setCollectionTotal(BigDecimalUtil.add(
				account.getCollectionTotal(), useMoney));

		if (account.getFreezeUseRecharge() < 0) {
			throw new AccountException("满标复审通过，扣除投资人【"+super.user.getUserName()+"】冻结充值可用金额不足！", 1);
		}
		if (account.getFreezeUseInterest() < 0) {
			throw new AccountException("满标复审通过，扣除投资人【"+super.user.getUserName()+"】冻结利息可用金额不足！", 1);
		}
		if (account.getFreezeUseAward() < 0) {
			throw new AccountException("满标复审通过，扣除投资人【"+super.user.getUserName()+"】冻结奖励可用金额不足！", 1);
		}
		if (account.getFreezeUseReturnCapital() < 0) {
			throw new AccountException("满标复审通过，扣除投资人【"+super.user.getUserName()+"】冻结回款可用金额不足！", 1);
		}
		// 更新
		//JSDP-164 wcw 20150527 start
		//accountDao.modifyInvesterAccount(account, user.getUserId());
		accountDao.update(account);
		//JSDP-164 wcw 20150527 end
	}

	@Override
	public void handleAccountSum() {
		/*// 先取出更新前的account_sum
		AccountSum accountSum = accountSumDao.findByUserId(super.user.getUserId());
		// 取出可能扣款的值
		double huikuan = accountSum.getAccumulativeReturnedMoney();
		double usedHuikuan = accountSum.getAccumulativeUsedReturnedMoney();
		double useHuikuan = BigDecimalUtil.sub(huikuan, usedHuikuan);

		double huikuanInterest = accountSum.getAccumulativeReturnMoneyInterest();
		double usedHuikuanInterest = accountSum.getAccumulativeUsedReturnMoneyInterest();
		double useHuikuanInterest = BigDecimalUtil.sub(huikuanInterest, usedHuikuanInterest);
		useHuikuan = BigDecimalUtil.add(useHuikuan, useHuikuanInterest);
		// 扣除回款的account_sum_log
		double currHuikuan = 0;
		// 本次使用的回款最大不能超过可用回款，
		currHuikuan = (useHuikuan >= money) ? money : (useHuikuan);
		if (currHuikuan > 0) {
			int enableHuikuan = Global.getInt("huikuan_enable");
			Map tranData = Global.getTransfer();
			Borrow borrow = (Borrow) (tranData.get("borrow"));
			BorrowTender tender = (BorrowTender) (tranData.get("tender"));

			// 回款规则配置 秒标、净值标、天标投标不使用回款额度，不产生回款续投奖励
			HuikuanConfRuleCheck rule = (HuikuanConfRuleCheck) Global.getRuleCheck("huikuanConf");
			if (rule != null) {
				double lowestHuikuan = rule.lowest_huikuan;
				int miaoRefuse = rule.miaoRefuse;
				int jinRefuse = rule.jinRefuse;
				int dayRefuse = rule.dayRefuse;
				if ((miaoRefuse != 1 || borrow.getType() != Borrow.TYPE_SECOND)
						&& (jinRefuse != 1 || borrow.getType() != Borrow.TYPE_PROPERTY)
						&& (dayRefuse != 1 || borrow.getBorrowTimeType() != 1) && enableHuikuan == 1
						&& *//** tender.getAutoRepurchase() == 1 && **//*currHuikuan >= lowestHuikuan) {

					this.huikuanManage(money);
				}
			}
		}*/
	}

	@Override
	public void handlePoints() {
		// TODO Auto-generated method stub

	}

	@Override
	public void handleNotice() {
		// TODO Auto-generated method stub

	}

	@Override
	public void addOperateLog() {
		// TODO Auto-generated method stub

	}

	@Override
	public void handleInterface() {
		//满标复审解冻资金，并转账，汇潮采用一个投资人一次转账
		/*if (BaseTPPWay.isOpenApi()) {
			if(BaseTPPWay.apiCode().equals("2")){
				IpsService ipsService = (IpsService)BeanUtil.getBean("ipsService");
				List<Object> taskList = new ArrayList<Object>();
				Borrow borrow = (Borrow) Global.getTransfer().get("borrow");
				BorrowTender tender =(BorrowTender)Global.getTransfer().get("tender");
				ipsService.transfer(borrow, tender, super.user, super.toUser, "1", "1", taskList);
				ipsService.doIpsTask(taskList);
			}
		}*/
		
	}
	
	@Override
	public void handleReturnMoney() {
	/*	double returnMoney=BigDecimalUtil.add(returnCapitalMoney,interestMoney);
		if(returnMoney>0){
			//回款续投奖励生成
			 ReturnMoneyUse r=new ReturnMoneyUse();
			 r.setUser(user);
			 r.setContinuedInvestMoney(returnMoney);
			 r.setContinuedInvestRate(0);
			 r.setContinuedInvestAward(BigDecimalUtil.mul(returnMoney, r.getContinuedInvestRate()));
			 r.setStatus(ReturnMoneyUse.CONTINUED_INVEST_APPLY_STATUS);
			 r.setRemark("生成续投奖励："+r.getContinuedInvestAward()+"");
			 r.setAddTime(new Date());
			 returnMoneyDao.save(r);
		}*/
	}

	@Override
	public void extend() {
		
	}
}
