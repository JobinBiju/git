package com.rongdu.p2psys.weixin.util;

import java.awt.BasicStroke;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Shape;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.net.URL;
import java.net.URLDecoder;
import java.util.Hashtable;

import javax.imageio.ImageIO;
import javax.xml.bind.DatatypeConverter;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.DecodeHintType;
import com.google.zxing.EncodeHintType;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.common.HybridBinarizer;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import com.rongdu.common.util.StringUtil;

/**
 * 二维码工具类
 * @author ZDF
 * @date 2014年11月25日
 *
 */
public class QRCodeUtils {
	/** 默认的字符集 */
	private static final String CHARACTER_SET = "utf-8";
	
	/** 默认的图片格式 */
	private static final String FORMAT_NAME = "PNG";

	/** 二维码长宽尺寸 */
	private static final int QRCODE_SIZE = 300;

	/** Logo长宽尺寸 */
	private static final int LOGO_SIZE = 60;
	
	private static final String BASE64TOKEN = "base64,";

	
	/**
	 * 生成二维码 无Logo
	 * @author ZDF
	 * @date 2014年10月24日
	 * @param content
	 * @param erCodeImagePath
	 * @return
	 * @throws Exception
	 */
	public static File encode(String content, String erCodeImagePath) throws Exception {
		BufferedImage image = QRCodeUtils.createImage(content, null, false, false);
		
		File erCodeImage = new File(erCodeImagePath);
		ImageIO.write(image, FORMAT_NAME, erCodeImage);
		
		return erCodeImage;
	}
	
	/**
	 * 生成二维码，插入本地图片Logo
	 * @author ZDF
	 * @date 2014年10月23日
	 * @param content 编码内容
	 * @param logoPath 要插入的图片地址
	 * @param erCodeImagePath 输出图片地址
	 * @param compress 是否压缩图片
	 * @return
	 * @throws Exception
	 */
	public static File encodeFileLogo(String content, String logoPath, String erCodeImagePath, Boolean compress) throws Exception {
		BufferedImage image = QRCodeUtils.createImage(content, logoPath, true, compress);
		
		File erCodeImage = new File(erCodeImagePath);
		ImageIO.write(image, FORMAT_NAME, erCodeImage);
		
		return erCodeImage;
	}
	
	/**
	 * 生成二维码，插入网络图片Logo
	 * @author ZDF
	 * @date 2014年10月24日
	 * @param content
	 * @param logoImagePath
	 * @param erCodeImagePath
	 * @param compress
	 * @return
	 * @throws Exception
	 */
	public static File encodeNetLogo(String content, String logoUrl, String erCodeImagePath, Boolean compress) throws Exception {
		BufferedImage image = QRCodeUtils.createImage(content, logoUrl, false, compress);
		
		File erCodeImage = new File(erCodeImagePath);
		ImageIO.write(image, FORMAT_NAME, erCodeImage);
		
		return erCodeImage;
	}

	/**
	 * 生成二维码并输出到输出流
	 * @param content
	 * @param os
	 * @throws Exception
	 */
	public static void encode(String content, OutputStream os) throws Exception {
		BufferedImage image = QRCodeUtils.createImage(content, null, false, false);
		ImageIO.write(image, FORMAT_NAME, os);
	}

	/**
	 * 生成二维码，输出到输出流，插入网络图片Logo
	 * @author ZDF
	 * @date 2014年10月23日
	 * @param content 编码内容
	 * @param logoPath 要插入的图片地址
	 * @param outputStream 图片输出流
	 * @param compress 是否压缩图片
	 * @throws Exception
	 */
	public static void encodeNetLogo(String content, String logoPath, OutputStream outputStream, Boolean compress) throws Exception {
		BufferedImage image = QRCodeUtils.createImage(content, logoPath, false, compress);
		ImageIO.write(image, FORMAT_NAME, outputStream);
	}
	
	/**
	 * 生成二维码，输出到输出流，插入本地图片Logo
	 * @author ZDF
	 * @date 2014年11月8日
	 * @param content
	 * @param logoPath
	 * @param outputStream
	 * @param compress
	 * @throws Exception
	 */
	public static void encodeLocalLogo(String content, String logoPath, OutputStream outputStream, Boolean compress) throws Exception {
		BufferedImage image = QRCodeUtils.createImage(content, logoPath, true, compress);
		ImageIO.write(image, FORMAT_NAME, outputStream);
	}

	/**
	 * 解析二维码
	 * @author ZDF
	 * @date 2014年10月23日
	 * @param qrCodeImagePath 二维码图片地址
	 * @return
	 * @throws Exception
	 */
	public static String decode(String qrCodeImagePath) throws Exception {
		String resultString = null;
		
		BufferedImage qrCodeImage = readImage(new File(qrCodeImagePath).toURI());
		if (qrCodeImage != null) {
			// 将图像数据转换为1 bit data
			LuminanceSource source = new BufferedImageLuminanceSource(qrCodeImage);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			
			Hashtable<DecodeHintType, String> hints = new Hashtable<DecodeHintType, String>();
			hints.put(DecodeHintType.CHARACTER_SET, CHARACTER_SET);
			
			Result result = new MultiFormatReader().decode(bitmap, hints);
			
			resultString = result.getText();
		}
		
		return resultString;
	}
	
	/**
	 * 封装图片
	 * @author ZDF
	 * @date 2014年10月23日
	 * @param content 
	 * @param logoPath
	 * @param compress
	 * @return
	 * @throws Exception
	 */
	private static BufferedImage createImage(String content, String logoPath, Boolean localImage, Boolean compress) throws Exception {
		Hashtable<EncodeHintType, Object> hints = new Hashtable<EncodeHintType, Object>();
		hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H); 
		hints.put(EncodeHintType.CHARACTER_SET, CHARACTER_SET);
		hints.put(EncodeHintType.MARGIN, 1);
		
		BitMatrix bitMatrix = new MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, QRCODE_SIZE, QRCODE_SIZE, hints);
		int width = bitMatrix.getWidth();
		int height = bitMatrix.getHeight();
		
		BufferedImage qrCodeImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				qrCodeImage.setRGB(x, y, bitMatrix.get(x, y) ? 0xFF000000 : 0xFFFFFFFF);
			}
		}
		if (StringUtil.isBlank(logoPath)) {
			return qrCodeImage;
		}
		
		// 插入图片
		QRCodeUtils.insertImage(qrCodeImage, logoPath, localImage, compress);
		
		return qrCodeImage;
	}

	/**
	 * 插入LOGO
	 * @author ZDF
	 * @date 2014年10月23日
	 * @param erCodeImage
	 * @param logoPath
	 * @param compress
	 * @throws Exception
	 */
	private static void insertImage(BufferedImage erCodeImage, String logoPath, Boolean localLogoImage, Boolean compress) throws Exception {
		Image logoImage = null;
		if(localLogoImage){
			logoImage = readImage(new File(logoPath).toURI());
		}else{
			logoImage = readImage(new URL(logoPath).toURI());
		}
		
		int width = logoImage.getWidth(null);
		int height = logoImage.getHeight(null);
		
		if (compress) { // 压缩LOGO
			if (width > LOGO_SIZE) {
				width = LOGO_SIZE;
			}
			if (height > LOGO_SIZE) {
				height = LOGO_SIZE;
			}
			Image scaleImage = logoImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);
			BufferedImage tag = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
			Graphics g = tag.getGraphics();
			g.drawImage(scaleImage, 0, 0, null); // 绘制缩小后的图
			g.dispose();
			
			logoImage = scaleImage;
		}
		
		// 插入LOGO
		Graphics2D graph = erCodeImage.createGraphics();
		int x = (QRCODE_SIZE - width) / 2;
		int y = (QRCODE_SIZE - height) / 2;
		graph.drawImage(logoImage, x, y, width, height, null);
		Shape shape = new RoundRectangle2D.Float(x, y, width, width, 10, 10);
		graph.setStroke(new BasicStroke(3f));
		graph.draw(shape);
		graph.dispose();
	}
	
	/**
	 * 读取图片
	 * @author ZDF
	 * @date 2014年10月23日
	 * @param uri
	 * @return
	 * @throws IOException
	 */
	private static BufferedImage readImage(URI uri) throws IOException {
		if ("data".equals(uri.getScheme())) {
			return readDataURIImage(uri);
		}
		BufferedImage result;
		try {
			result = ImageIO.read(uri.toURL());
		} catch (IllegalArgumentException iae) {
			throw new IOException("Resource not found: " + uri, iae);
		}
		if (result == null) {
			throw new IOException("Could not load " + uri);
		}
		return result;
	}
	  
	/**
	 * 读取图片
	 * @author ZDF
	 * @date 2014年10月23日
	 * @param uri
	 * @return
	 * @throws IOException
	 */
	private static BufferedImage readDataURIImage(URI uri) throws IOException {
		String uriString = uri.toString();
		if (!uriString.startsWith("data:image/")) {
			throw new IOException("Unsupported data URI MIME type");
		}
		int base64Start = uriString.indexOf(BASE64TOKEN);
		if (base64Start < 0) {
			throw new IOException("Unsupported data URI encoding");
		}
		String base64DataEncoded = uriString.substring(base64Start + BASE64TOKEN.length());
		String base64Data = URLDecoder.decode(base64DataEncoded, "UTF-8");
		byte[] imageBytes = DatatypeConverter.parseBase64Binary(base64Data);
		return ImageIO.read(new ByteArrayInputStream(imageBytes));
	}
}
