/**
 * 
 */
package com.ddtkj.p2psys.core.cache;

import java.util.HashMap;
import java.util.Map;

import com.danga.MemCached.MemCachedClient;
import com.danga.MemCached.SockIOPool;
import com.rongdu.p2psys.core.rule.RuleCheck;

/**
 * @描述：
 * @作者：wangchangwei@ddtkj.com
 * @创建时间：2014年12月30日 
 */
public class MemCacheTest {
	// 创建MemCachedClient全局对象
    private static MemCachedClient mcc = new MemCachedClient();
    
    static {
       // 创建服务器列表及其权重
       String[] servers = {"192.168.251.12:11211"};
       Integer[] weights = {3};
       
       // 创建Socket连接池对象
       SockIOPool pool = SockIOPool.getInstance();
       
       // 设置服务器信息
       pool.setServers(servers);
       pool.setWeights(weights);
       pool.setFailover(true);
       
       // 设置初始连接数、最小和最大连接数以及最大处理时间
       pool.setInitConn(5);
       pool.setMinConn(5);
       pool.setMaxConn(250);
       pool.setMaxIdle(1000*60*60*6);
       
       // 设置主线程睡眠时间
       pool.setMaintSleep(30);
       
       // 设置TCP参数、连接超时等
       pool.setNagle(false);
       pool.setSocketTO(3000);
       pool.setSocketConnectTO(0);
       pool.setAliveCheck(true);
       
       // 初始化连接池
       pool.initialize();
       
       // 压缩设置，超过指定大小（单位为K）的数据都会被压缩
       mcc.setCompressEnable(true);
       mcc.setCompressThreshold(64 * 1024);
       
       }
    
    
    
    
    
    public static void main(String[] args) {
    	Map<String, RuleCheck> ruleMap=new HashMap<String, RuleCheck>();
    	
    	
//    	mcc.delete(GlobalCache.RULE_CONFIG);
    	
    	mcc.delete(GlobalCache.SYS_CONFIG);
//    	mcc.delete(NOTICE_TYPE_CONFIG);
//    	mcc.delete(LOG_TEMPLATE_CONFIG);
//    	mcc.delete(BORROW_CONFIG);
//    	
    	
    	
	}
}
