package com.rongdu.p2psys.borrow.executer;

import com.ddtkj.p2psys.account.dao.AccountDao;
import com.ddtkj.p2psys.account.dao.AccountLogDao;
import com.ddtkj.p2psys.account.domain.Account;
import com.ddtkj.p2psys.account.domain.AccountLog;
import com.ddtkj.p2psys.user.domain.User;
import com.rongdu.common.util.BigDecimalUtil;
import com.rongdu.p2psys.account.exception.AccountException;
import com.rongdu.p2psys.core.Global;
import com.rongdu.p2psys.core.constant.Constant;
import com.rongdu.p2psys.core.constant.NoticeConstant;
import com.rongdu.p2psys.core.executer.BaseExecuter;
import com.rongdu.p2psys.core.sms.sendMsg.BaseMsg;
import com.rongdu.p2psys.core.util.BeanUtil;

/**
 * 普通标满标审核失败解冻投资人的资金
 * 
 * @author cx
 * @version 2.0
 * @since 2014-5-21
 */
public class BorrowFailExecuter extends BaseExecuter {

	protected AccountLogDao accountLogDao;
	protected AccountDao accountDao;
	private String accountLogType = Constant.UNFREEZE_NO_PASS;

	// private final static String noticeTypeNid =
	// NoticeConstant.NOTICE_INVEST_FAIL;

	@Override
	public String getAccountLogType() {
		return accountLogType;
	}

	@Override
	public void prepare() {
		accountLogDao = (AccountLogDao) BeanUtil.getBean("accountLogDao");
		accountDao = (AccountDao) BeanUtil.getBean("accountDao");

	}

	@Override
	public void addAccountLog() {
		Global.setTransfer("weburl", Global.getString("weburl"));
		Account account = accountDao.findObjByProperty("user.userId", this.user.getUserId());
		AccountLog log = new AccountLog(super.user, accountLogType, new User(Constant.ADMIN_ID));
		log.setAccountTotal(account.getAccountTotal());
		log.setAwardMoney(awardMoney);
		log.setRechargeMoney(rechargeMoney);
		log.setInterestMoney(interestMoney);
		log.setReturnCapitalMoney(returnCapitalMoney);
		log.setAwardUsable(account.getAwardUsable());
		log.setRechargeUsable(account.getRechargeUsable());
		log.setInterestUsable(account.getInterestUsable());
		log.setReturnCapitalUsable(account.getReturnCapitalUsable());
		log.setFreezeUseAward(account.getFreezeUseAward());
		log.setFreezeUseInterest(account.getFreezeUseInterest());
		log.setFreezeUseRecharge(account.getFreezeUseRecharge());
		log.setFreezeUseReturnCapital(account.getFreezeUseReturnCapital());
		log.setCollectionTotal(account.getCollectionTotal());
		log.setRemark(this.getLogRemark());
		log.setPaymentsType((byte)0);
		accountLogDao.save(log);
	}

	@Override
	public void handleAccount() {

		
		Account account = accountDao.getAccountByUserId(user.getUserId());
	   // 账户各类可用金额
	   account.setRechargeUsable(BigDecimalUtil.add(account.getRechargeUsable(), rechargeMoney));
	   
	   account.setAwardUsable(BigDecimalUtil.add(account.getAwardUsable(), awardMoney));
	  
	   account.setInterestUsable(BigDecimalUtil.add(account.getInterestUsable(), interestMoney));
	   
	   account.setReturnCapitalUsable(BigDecimalUtil.add(account.getReturnCapitalUsable(), returnCapitalMoney));
	   // 账户各类冻结金额
       account.setFreezeUseAward(BigDecimalUtil.add(account.getFreezeUseAward(), -awardMoney));
       
       account.setFreezeUseReturnCapital(BigDecimalUtil.add(account.getFreezeUseReturnCapital(), -returnCapitalMoney));
       
       account.setFreezeUseInterest(BigDecimalUtil.add(account.getFreezeUseInterest(), -interestMoney));
       
       account.setFreezeUseRecharge(BigDecimalUtil.add(account.getFreezeUseRecharge(), -rechargeMoney));
	  
	   if(account.getFreezeUseRecharge() < 0){
	       throw new AccountException("冻结充值可用金额不足！", 1);
	   }
	   if(account.getFreezeUseInterest() < 0){
	       throw new AccountException("冻结利息可用金额不足！", 1);
	   }
	   if(account.getFreezeUseAward() < 0){
	       throw new AccountException("冻结奖励可用金额不足！", 1);
	   }
	   if(account.getFreezeUseReturnCapital()< 0){
	       throw new AccountException("冻结回款可用金额不足！", 1);
	   }
	   accountDao.update(account);
	}

	@Override
	public void handleAccountSum() {

	}

	@Override
	public void handlePoints() {

	}

	@Override
	public void handleNotice() {
		//BaseMsg msg = new BaseMsg(NoticeConstant.INVEST_FAIL);
		//msg.doEvent();
	}

	@Override
	public void addOperateLog() {

	}

	@Override
	public void handleInterface() {
		
	}

	@Override
	public void extend() {

	}
}
