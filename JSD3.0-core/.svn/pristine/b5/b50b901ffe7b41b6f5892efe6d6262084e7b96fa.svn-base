package com.rongdu.p2psys.borrow.service.impl;

import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.ddtkj.p2psys.account.constant.AccountTradeConstant;
import com.ddtkj.p2psys.borrow.dao.BorrowTenderDao;
import com.ddtkj.p2psys.core.util.TradeIDGenerator;
import com.ddtkj.p2psys.tpp.YmdTPPWay;
import com.ddtkj.p2psys.tpp.ymd.model.YmdQuery;
import com.ddtkj.p2psys.tpp.ymd.model.YmdQueryReturn;
import com.ddtkj.p2psys.tpp.ymd.model.YmdQueryReturnDetails;
import com.ddtkj.p2psys.user.constant.UserConstant;
import com.ddtkj.p2psys.user.domain.User;
import com.rongdu.common.model.jpa.OrderFilter.OrderType;
import com.rongdu.common.model.jpa.PageDataList;
import com.rongdu.common.model.jpa.QueryParam;
import com.rongdu.common.model.jpa.SearchFilter;
import com.rongdu.common.model.jpa.SearchFilter.Operators;
import com.rongdu.common.util.BigDecimalUtil;
import com.rongdu.common.util.DateUtil;
import com.rongdu.common.util.StringUtil;
import com.rongdu.p2psys.borrow.dao.BorrowCollectionDao;
import com.rongdu.p2psys.borrow.dao.BorrowConfigDao;
import com.rongdu.p2psys.borrow.dao.BorrowOverdueDao;
import com.rongdu.p2psys.borrow.dao.BorrowRepaymentDao;
import com.rongdu.p2psys.borrow.domain.Borrow;
import com.rongdu.p2psys.borrow.domain.BorrowCollection;
import com.rongdu.p2psys.borrow.domain.BorrowConfig;
import com.rongdu.p2psys.borrow.domain.BorrowOverdue;
import com.rongdu.p2psys.borrow.domain.BorrowRepayment;
import com.rongdu.p2psys.borrow.model.BorrowCollectionModel;
import com.rongdu.p2psys.borrow.model.BorrowModel;
import com.rongdu.p2psys.borrow.model.BorrowRepaymentModel;
import com.rongdu.p2psys.borrow.service.BorrowRepaymentService;
import com.rongdu.p2psys.core.Global;
import com.rongdu.p2psys.core.constant.Constant;
import com.rongdu.p2psys.core.constant.NoticeConstant;
import com.rongdu.p2psys.core.disruptor.DisruptorUtils;
import com.rongdu.p2psys.core.domain.Operator;
import com.rongdu.p2psys.core.executer.AbstractExecuter;
import com.rongdu.p2psys.core.executer.ExecuterHelper;
import com.rongdu.p2psys.core.rule.CompensatoryRuleCheck;
import com.rongdu.p2psys.core.sms.sendMsg.BaseMsg;
import com.rongdu.p2psys.tpp.BaseTPPWay;

@Service("borrowRepaymentService")
public class BorrowRepaymentServiceImpl implements BorrowRepaymentService {

	@Resource
	private BorrowRepaymentDao borrowRepaymentDao;
	@Resource
	private BorrowOverdueDao borrowOverdueDao;
	@Resource
	private BorrowConfigDao borrowConfigDao;
	@Resource
	private BorrowCollectionDao collectionDao;
	@Resource
	private BorrowTenderDao borrowTenderDao;

	@Override
	public PageDataList<BorrowRepaymentModel> list(BorrowRepaymentModel model) {
		QueryParam param = QueryParam.getInstance();
		if (model != null) {
		    if (model.getVouchFirm() != null) {
		        param.addParam("borrow.vouchFirm", model.getVouchFirm());
		    } else {
		        if (model.getBorrowId() > 0) {
	                param.addParam("borrow.id", model.getBorrowId());
	            }
	            if (model.getUser() != null && model.getUser().getUserId() > 0) {
	                param.addParam("user.userId", model.getUser().getUserId());
	            }
	            if (model.getStatus() != 99) {
	                param.addParam("status", model.getStatus());
	            }
	            if (StringUtil.isNotBlank(model.getUserName())) {
	                param.addParam("user.userName", Operators.LIKE, model.getUserName());
	            }
	            if (StringUtil.isNotBlank(model.getBorrowName())) {
	                param.addParam("borrow.name", Operators.LIKE, model.getBorrowName());
	            }
	            // JSDP-BUG105 2015年4月30日 15:23:09  孙晓勇 start 
	            if (0 != model.getBorrowType()) {
	                param.addParam("borrow.type", model.getBorrowType());
	            }
	            // JSDP-BUG105 2015年4月30日 15:23:09  孙晓勇 start 
	            if(StringUtil.isNotBlank(model.getContractNo())){
	            	param.addParam("borrow.dealNo", model.getContractNo());
	            }
	            Date d = DateUtil.getDate(System.currentTimeMillis() / 1000 + "");
	            if (model.getTime() == 7) {
	                param.addParam("repaymentTime", Operators.GTE, d);
	                param.addParam("repaymentTime", Operators.LTE, DateUtil.rollDay(d, 7));
	            } else if (model.getTime() > 0 && model.getTime() < 4) {
	                param.addParam("repaymentTime", Operators.GTE, d);
	                param.addParam("repaymentTime", Operators.LTE, DateUtil.rollMon(d, model.getTime()));
	            }
	            if (StringUtil.isNotBlank(model.getStartTime())) {
	                //Date start = DateUtil.valueOf(model.getStartTime() + " 00:00:00");
	                Date start = DateUtil.valueOf(model.getStartTime());
	                param.addParam("repaymentTime", Operators.GTE, start);
	            }
	            if (StringUtil.isNotBlank(model.getEndTime())) {
	                //Date end = DateUtil.valueOf(model.getEndTime() + " 23:59:59");
	                Date end = DateUtil.valueOf(model.getEndTime());
	                param.addParam("repaymentTime", Operators.LTE, end);
	            }
		    }
            if (model.isLate()) {
                if (model.getType() != 0) {
                    param.addParam("borrow.type", model.getType());
                }
                param.addParam("repaymentTime", Operators.LTE, new Date());
                param.addParam("borrow.type", Operators.NOTEQ, Borrow.TYPE_FLOW);
                param.addParam("borrow.type", Operators.NOTEQ, Borrow.TYPE_SECOND);
                SearchFilter orFilter1 = new SearchFilter("repaymentYesTime", Operators.PROPERTY_GT, "repaymentTime");
                SearchFilter orFilter2 = new SearchFilter("repaymentYesAccount", Operators.EQ, 0);
                param.addOrFilter(orFilter1, orFilter2);
            }
            param.addPage(model.getPage(), model.getSize());
		}
		param.addOrder(OrderType.ASC, "repaymentTime");
		param.addParam("user.isLocked", Operators.NOTEQ, UserConstant.USER_LOCK_LOGOUT);
		PageDataList<BorrowRepayment> pageDataList = borrowRepaymentDao.findPageList(param);
		PageDataList<BorrowRepaymentModel> pageDateList = new PageDataList<BorrowRepaymentModel>();
		List<BorrowRepaymentModel> list = new ArrayList<BorrowRepaymentModel>();
		pageDateList.setPage(pageDataList.getPage());
		if (pageDataList.getList().size() > 0) {
			for (int i = 0; i < pageDataList.getList().size(); i++) {
				BorrowRepayment r = (BorrowRepayment) pageDataList.getList().get(i);
				BorrowRepaymentModel rm = BorrowRepaymentModel.instance(r);
				rm.setBorrowId(r.getBorrow().getId());
				rm.setBorrowName(r.getBorrow().getName());
				rm.setBorrowTimeType(r.getBorrow().getBorrowTimeType());
				rm.setUserName(r.getUser().getUserName());
				rm.setRealName(r.getUser().getRealName());
				rm.setMobilePhone(r.getUser().getMobilePhone());
				rm.setTimeLimit(r.getBorrow().getTimeLimit());
				rm.setType(r.getBorrow().getType());
				rm.setBorrowStyle(r.getBorrow().getStyle()); // 设置还款方式
				rm.setSumPeriod(r.getBorrow().getPeriod());
				
				
				//用于展示和导出
				DecimalFormat df = new DecimalFormat("#0.00");
                rm.setRepaymentAccountStr(df.format(r.getRepaymentAccount()));//应还本金(预还金额)
                rm.setRepaymentYesAccountStr(df.format(r.getRepaymentYesAccount()));//已还金额
                rm.setCapitalStr(df.format(rm.getCapital()));//本金
                rm.setInterestStr(df.format(rm.getInterest()));//利息
                rm.setForfeitStr(df.format(rm.getForfeit()));//滞纳金
                rm.setLateInterestStr(df.format(r.getLateInterest()));//逾期利息
				
				
				BorrowConfig bconfig = borrowConfigDao.find((long)r.getBorrow().getType());
				rm.setTypeName(bconfig.getName());
				if(r.getBorrow().getBorrowTimeType()==0){
					rm.setValidTime(r.getBorrow().getValidTime()+"月");
				}else{
					rm.setValidTime(r.getBorrow().getValidTime()+"天");
				}
				rm.setContractNo(r.getBorrow().getDealNo());
				rm.setBorrow(null);
				rm.setUser(null);
				SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
				Date nowTime = null;
				Date repaymentTime = null;
				Date repaymentYesTime = null;
				long time = 0;
				try {
					nowTime = format.parse(DateUtil.dateStr2(new Date()));
					repaymentTime = format.parse(DateUtil.dateStr2(rm.getRepaymentTime()));
					if (rm.getRepaymentYesTime() != null) {
						repaymentYesTime = format.parse(DateUtil.dateStr2(rm.getRepaymentYesTime()));
						time = repaymentYesTime.getTime() - repaymentTime.getTime();
					} else {
						time = nowTime.getTime() - repaymentTime.getTime();
					}
				} catch (ParseException e) {
					e.printStackTrace();
				}
				int days = (int) (time / (24 * 60 * 60 * 1000));
				double lateInterest = 0;
		        if (days > 0 ){ 
		            String overdueFee = Global.getValue("overdue_fee");
		            double overdue = Double.parseDouble(overdueFee);
		            if(days <= 5) {
		                double captial = rm.getCapital();
		                lateInterest = BigDecimalUtil.mul(BigDecimalUtil.mul(captial + rm.getInterest(), days), overdue); // 计算出逾期利息
		            }else if(days > 5){
		                double capital = borrowRepaymentDao.getRemainderCapital(r.getBorrow().getId());
		                double interest = borrowRepaymentDao.getRemainderInterest(r.getBorrow().getId());
		                lateInterest = BigDecimalUtil.mul(BigDecimalUtil.mul(capital + interest, days), overdue); // 计算出逾期利息
		            }
		        }
                rm.setLateDays(days);
                rm.setLateInterest(lateInterest);
				list.add(rm);
			}
		}
		pageDateList.setList(list);
		return pageDateList;
	}
	
	@Override
    public PageDataList<BorrowRepaymentModel> getList(BorrowRepaymentModel model) {
        PageDataList<BorrowRepayment> pageDataList = borrowRepaymentDao.getList(model);
        PageDataList<BorrowRepaymentModel> pageDateList = new PageDataList<BorrowRepaymentModel>();
        List<BorrowRepaymentModel> list = new ArrayList<BorrowRepaymentModel>();
        pageDateList.setPage(pageDataList.getPage());
        if (pageDataList.getList().size() > 0) {
            for (int i = 0; i < pageDataList.getList().size(); i++) {
                BorrowRepayment r = (BorrowRepayment) pageDataList.getList().get(i);
                BorrowRepaymentModel rm = BorrowRepaymentModel.instance(r);
                rm.setBorrowId(r.getBorrow().getId());
                rm.setBorrowName(r.getBorrow().getName());
                rm.setUserName(r.getUser().getUserName());
                rm.setRealName(r.getUser().getRealName());
                rm.setMobilePhone(r.getUser().getMobilePhone());
                rm.setTimeLimit(r.getBorrow().getTimeLimit());
                rm.setType(r.getBorrow().getType());
                rm.setBorrowStyle(r.getBorrow().getStyle()); // 设置还款方式
                rm.setBorrow(null);
                rm.setUser(null);
                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                Date nowTime = null;
                Date repaymentTime = null;
                Date repaymentYesTime = null;
                long time = 0;
                try {
                    nowTime = format.parse(DateUtil.dateStr2(new Date()));
                    repaymentTime = format.parse(DateUtil.dateStr2(rm.getRepaymentTime()));
                    if (rm.getRepaymentYesTime() != null) {
                        repaymentYesTime = format.parse(DateUtil.dateStr2(rm.getRepaymentYesTime()));
                        time = repaymentYesTime.getTime() - repaymentTime.getTime();
                    } else {
                        time = nowTime.getTime() - repaymentTime.getTime();
                    }
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                int days = (int) (time / (24 * 60 * 60 * 1000));
                double lateInterest = 0;
                if (days > 0 ){ 
                    String overdueFee = Global.getValue("overdue_fee");
                    double overdue = Double.parseDouble(overdueFee);
                    if(days <= 5) {
                        double captial = rm.getCapital();
                        lateInterest = BigDecimalUtil.mul(BigDecimalUtil.mul(captial + rm.getInterest(), days), overdue); // 计算出逾期利息
                        rm.setLateDays(days);
                        rm.setLateInterest(lateInterest);
                    }else if(days > 5){
                        double capital = borrowRepaymentDao.getRemainderCapital(r.getBorrow().getId());
                        double interest = borrowRepaymentDao.getRemainderInterest(r.getBorrow().getId());
                        lateInterest = BigDecimalUtil.mul(BigDecimalUtil.mul(capital + interest, days), overdue); // 计算出逾期利息
                        rm.setLateInterest(lateInterest);
                    }
                    rm.setLateDays(days);
                }
                list.add(rm);
            }
        }
        pageDateList.setList(list);
        return pageDateList;
    }

	@Override
	public BorrowRepayment findById(long repayId) {
		return borrowRepaymentDao.find(repayId);
	}

	@Override
	public double getUserBorrowRepayTotal(long userId) {
		return borrowRepaymentDao.getUserBorrowRepayTotal(userId);
	}

	@Override
	public BorrowRepaymentModel getReapyStatistics(long userId) {
		BorrowRepaymentModel bm = borrowRepaymentDao.getRepayStatistics(userId);
		BorrowRepayment br = borrowRepaymentDao.getNextRepayByUserId(userId);
		if (br != null) {
	        bm.setBorrowId(br.getBorrow().getId());
			bm.setNextRepayTime(br.getRepaymentTime());
			bm = borrowRepaymentDao.getBRMByCollectTime(bm, br.getRepaymentTime(), userId);
		}
		double jan = borrowRepaymentDao.getRepayByMonth(1, userId);
		double feb = borrowRepaymentDao.getRepayByMonth(2, userId);
		double mar = borrowRepaymentDao.getRepayByMonth(3, userId);
		double apr = borrowRepaymentDao.getRepayByMonth(4, userId);
		double may = borrowRepaymentDao.getRepayByMonth(5, userId);
		double jun = borrowRepaymentDao.getRepayByMonth(6, userId);
		double jul = borrowRepaymentDao.getRepayByMonth(7, userId);
		double aug = borrowRepaymentDao.getRepayByMonth(8, userId);
		double sep = borrowRepaymentDao.getRepayByMonth(9, userId);
		double oct = borrowRepaymentDao.getRepayByMonth(10, userId);
		double nov = borrowRepaymentDao.getRepayByMonth(11, userId);
		double dec = borrowRepaymentDao.getRepayByMonth(12, userId);
		bm.getRepayData().put("jan", jan);
		bm.getRepayData().put("feb", feb);
		bm.getRepayData().put("mar", mar);
		bm.getRepayData().put("apr", apr);
		bm.getRepayData().put("may", may);
		bm.getRepayData().put("jun", jun);
		bm.getRepayData().put("jul", jul);
		bm.getRepayData().put("aug", aug);
		bm.getRepayData().put("sep", sep);
		bm.getRepayData().put("oct", oct);
		bm.getRepayData().put("nov", nov);
		bm.getRepayData().put("dec", dec);
		return bm;
	}

	@Override
	public void overdue(BorrowRepayment borrowRepayment,  Operator operator) {
		
		BorrowOverdue borrowOverdue = new BorrowOverdue();
		borrowOverdue.setOperator(operator);
		borrowOverdue.setOverdueAccount(borrowRepayment.getRepaymentAccount());
		borrowOverdue.setOverdueTime(new Date());
		borrowOverdue.setRepaymentAccount(borrowRepayment.getRepaymentAccount());
		borrowOverdue.setRepaymentTime(borrowRepayment.getRepaymentTime());
		borrowOverdue.setUsername(borrowRepayment.getUser().getUserName());
		borrowOverdueDao.save(borrowOverdue);
		// 计算逾期利息
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		Date nowTime = null;
		Date repaymentTime = null;
		try {
			nowTime = format.parse(DateUtil.dateStr2(new Date()));
			repaymentTime = format.parse(DateUtil.dateStr2(borrowRepayment.getRepaymentTime()));
		} catch (ParseException e) {
			e.printStackTrace();
		}
		int day = (int) (nowTime.getTime() - repaymentTime.getTime());
		int days = day / (24 * 60 * 60 * 1000);
		double lateInterest = 0;
        if (days > 0 ){ 
            long borrowId = borrowRepayment.getBorrow().getId();
            String overdueFee = Global.getValue("overdue_fee");
            double overdue = Double.parseDouble(overdueFee);
            if(days <= 5) {
                double captial = borrowRepayment.getCapital();
                lateInterest = BigDecimalUtil.mul(BigDecimalUtil.mul(captial + borrowRepayment.getInterest(), days), overdue); // 计算出逾期利息
                borrowRepayment.setLateDays(days);
                borrowRepayment.setLateInterest(lateInterest);
            }else if(days > 5){
                double capital = borrowRepaymentDao.getRemainderCapital(borrowId);
                double interest = borrowRepaymentDao.getRemainderInterest(borrowId);
                lateInterest = BigDecimalUtil.mul(BigDecimalUtil.mul(capital + interest, days), overdue); // 计算出逾期利息
                borrowRepayment.setLateInterest(lateInterest);
            }
            borrowRepayment.setLateDays(days);
        }

		// 设置webstatus=3
		borrowRepayment.setWebStatus(BorrowRepayment.WEB_STATUS_INSTEAD);
		borrowRepayment = borrowRepaymentDao.update(borrowRepayment);
		Borrow borrow = borrowRepayment.getBorrow();
		borrow.getId();
		Global.setTransfer("borrow", borrow);
		DisruptorUtils.overdue(borrowRepayment);

	}

    @Override
    public double getRemainderCapital(long borrowId) {
        // TODO Auto-generated method stub
        return borrowRepaymentDao.getRemainderCapital(borrowId);
    }

    @Override
    public double getRemainderInterest(long borrowId) {
        // TODO Auto-generated method stub
        return borrowRepaymentDao.getRemainderInterest(borrowId);
    }

    @Override
    public List<BorrowRepayment> fingOverDueBorrowRepayment(User user) {
        QueryParam param = QueryParam.getInstance();
        param.addParam("borrow.vouchFirm", user);
        param.addParam("repaymentTime", Operators.LT, new Date());
        param.addParam("repaymentYesAccount", Operators.NOTEQ, 0);
        param.addPage(1, 4);
        List<BorrowRepayment> list = borrowRepaymentDao.findByCriteria(param);
        for (BorrowRepayment br : list) {
            br.getBorrow().getId();
        }
        return list;
    }

    @Override
    public int count() {
        
        String date = DateUtil.dateStr2(new Date());
        Date start = DateUtil.valueOf(date + " 00:00:00");
        Date end = DateUtil.valueOf(date + " 23:59:59");
        QueryParam param = QueryParam.getInstance()
                .addParam("status", 0)
                .addParam("repaymentTime", Operators.GT, start)
                .addParam("repaymentTime", Operators.LT, end);
        return borrowRepaymentDao.countByCriteria(param);
    }

    @Override
    public List<BorrowRepayment> getRepaymentByBorrowId(long borrowId) {
        QueryParam param = QueryParam.getInstance();
        param.addParam("borrow.id", borrowId);
        return borrowRepaymentDao.findByCriteria(param);
    }

    /**
     * 获得当前标需要还的还款期数
     * @param period
     * @return
     */
    public int getCurrPeriod(long borrowId){
        return borrowRepaymentDao.getCurrPeriod(borrowId);
    }
    
    @Override
    public int getUrgeCount(long userId) {
        QueryParam param = QueryParam.getInstance();
        param.addParam("borrow.vouchFirm.userId", userId);
        param.addParam("status", 0);
        Calendar c = Calendar.getInstance();
        c.add(Calendar.DATE, -7);
        param.addParam("repaymentTime", Operators.LT, new Date());
        param.addParam("repaymentTime", Operators.GT, c.getTime());
        return borrowRepaymentDao.countByCriteria(param);
    }

    @Override
    public PageDataList<BorrowRepaymentModel> getCollectionList(BorrowModel model) {
        QueryParam param = QueryParam.getInstance();
        if (StringUtil.isNotBlank(model.getBorrowName())) {
            param.addParam("borrow.name", Operators.LIKE, model.getBorrowName());
        }
        if (StringUtil.isNotBlank(model.getUserName())) {
            param.addParam("borrow.user.userName", Operators.LIKE, model.getUserName());
        }
        Date nowdate = DateUtil.getDate(System.currentTimeMillis()/1000 + "");
		if (model.getTime() == 7) {
			param.addParam("repaymentTime", Operators.LTE,DateUtil.rollDay(nowdate, 7));
			param.addParam("repaymentTime", Operators.GTE, nowdate);
		} else if (model.getTime() > 0 && model.getTime() < 4){
			param.addParam("repaymentTime", Operators.LTE,DateUtil.rollMon(nowdate, model.getTime()));
			param.addParam("repaymentTime", Operators.GTE, nowdate);
		}
        if (StringUtil.isNotBlank(model.getStartTime())) {
            Date startTime = DateUtil.valueOf(model.getStartTime() + " 00:00:00");
            param.addParam("repaymentTime", Operators.GT, startTime);
        }
        if (StringUtil.isNotBlank(model.getEndTime())) {
            Date endTime = DateUtil.valueOf(model.getEndTime() + " 23:59:59");
            param.addParam("repaymentTime", Operators.LT, endTime);
        }else{
        	
        	param.addParam("repaymentTime", Operators.GT,nowdate);
        }
        param.addParam("borrow.vouchFirm.userId", model.getVouchFirmId());
        param.addParam("status", 0);
        param.addPage(model.getPage(),model.getSize());
        param.addOrder(OrderType.ASC, "repaymentTime");
        PageDataList<BorrowRepayment> pageDataList = borrowRepaymentDao.findPageList(param);
        PageDataList<BorrowRepaymentModel> pageDateList = new PageDataList<BorrowRepaymentModel>();
        List<BorrowRepaymentModel> list = new ArrayList<BorrowRepaymentModel>();
        pageDateList.setPage(pageDataList.getPage());
        if (pageDataList.getList().size() > 0) {
            for (int i = 0; i < pageDataList.getList().size(); i++) {
                BorrowRepayment r = (BorrowRepayment) pageDataList.getList().get(i);
                BorrowRepaymentModel rm = BorrowRepaymentModel.instance(r);
                BorrowModel b = BorrowModel.instance(rm.getBorrow());
                rm.setUserName(b.getUser().getUserName());
                rm.setMobilePhone(b.getUser().getMobilePhone());
                b.setUser(null);
                rm.setBorrow(b.prototype());
                rm.setUser(null);
                rm.setRealRepayer(null);
                rm.setPeriod(r.getPeriod()+1);
                Calendar cld = Calendar.getInstance();
                int lastDays = (int) ((rm.getRepaymentTime().getTime() - cld.getTime().getTime()) / (1000 * 3600 * 24));
                rm.setLastDays(lastDays);
                list.add(rm);
            }
        }
        pageDateList.setList(list);
        return pageDateList;
    }
    
    /**
     * 催收项目记录数
     */
    @Override
    public PageDataList<BorrowRepaymentModel> getCollectionListCount(BorrowModel model) {
        QueryParam param = QueryParam.getInstance();
        if (StringUtil.isNotBlank(model.getBorrowName())) {
            param.addParam("borrow.name", Operators.LIKE, model.getBorrowName());
        }
        if (StringUtil.isNotBlank(model.getUserName())) {
            param.addParam("borrow.user.userName", Operators.LIKE, model.getUserName());
        }
        Date nowdate = DateUtil.getDate(System.currentTimeMillis()/1000 + "");
		if (model.getTime() == 7) {
			param.addParam("repaymentTime", Operators.LTE,DateUtil.rollDay(nowdate, 7));
			param.addParam("repaymentTime", Operators.GTE, nowdate);
		} else if (model.getTime() > 0 && model.getTime() < 4){
			param.addParam("repaymentTime", Operators.LTE,DateUtil.rollMon(nowdate, model.getTime()));
			param.addParam("repaymentTime", Operators.GTE, nowdate);
		}
        if (StringUtil.isNotBlank(model.getStartTime())) {
            Date startTime = DateUtil.valueOf(model.getStartTime() + " 00:00:00");
            param.addParam("repaymentTime", Operators.GT, startTime);
        }
        if (StringUtil.isNotBlank(model.getEndTime())) {
            Date endTime = DateUtil.valueOf(model.getEndTime() + " 23:59:59");
            param.addParam("repaymentTime", Operators.LT, endTime);
        }else{
        	
        	param.addParam("repaymentTime", Operators.GT,nowdate);
        }
        param.addParam("borrow.vouchFirm.userId", model.getVouchFirmId());
        param.addParam("status", 0);
        param.addPage(model.getPage(),999999999);
        param.addOrder(OrderType.ASC, "repaymentTime");
        PageDataList<BorrowRepayment> pageDataList = borrowRepaymentDao.findPageList(param);
        PageDataList<BorrowRepaymentModel> pageDateList = new PageDataList<BorrowRepaymentModel>();
        List<BorrowRepaymentModel> list = new ArrayList<BorrowRepaymentModel>();
        pageDateList.setPage(pageDataList.getPage());
        if (pageDataList.getList().size() > 0) {
            for (int i = 0; i < pageDataList.getList().size(); i++) {
                BorrowRepayment r = (BorrowRepayment) pageDataList.getList().get(i);
                BorrowRepaymentModel rm = BorrowRepaymentModel.instance(r);
                BorrowModel b = BorrowModel.instance(rm.getBorrow());
                rm.setUserName(b.getUser().getUserName());
                rm.setMobilePhone(b.getUser().getMobilePhone());
                b.setUser(null);
                rm.setBorrow(b.prototype());
                rm.setUser(null);
                rm.setRealRepayer(null);
                Calendar cld = Calendar.getInstance();
                int lastDays = (int) ((rm.getRepaymentTime().getTime() - cld.getTime().getTime()) / (1000 * 3600 * 24));
                rm.setLastDays(lastDays);
                list.add(rm);
            }
        }
        pageDateList.setList(list);
        return pageDateList;
    }
    
    /**
     *还款提醒功能,还款到期前3天做提醒
     * */
    @Override
    public void doRepaymentNotice() {
        String noticeTimeStr = DateUtil.dateStr2(DateUtil.rollDay(new Date(), -3));
        Date noticeTimeStart = DateUtil.valueOf(noticeTimeStr+" 00:00:00");
        Date noticeTimeEnd = DateUtil.valueOf(noticeTimeStr+" 23:59:59");
        QueryParam param = QueryParam.getInstance();
        param.addParam("repaymentTime", Operators.GTE, noticeTimeStart);
        param.addParam("repaymentTime", Operators.LTE, noticeTimeEnd);
        param.addParam("status", BorrowRepayment.STATUS_WAIT_REPAY);
        param.addParam("webStatus", BorrowRepayment.WEB_STATUS_NORMAL);
        List<BorrowRepayment> repayList = borrowRepaymentDao.findByCriteria(param);
        if(repayList != null && repayList.size() > 0){
            for(BorrowRepayment repay : repayList){
                Map<String, Object> map = new HashMap<String, Object>();
                map.put("name", repay.getBorrow().getName());
                map.put("period", repay.getPeriod());
                map.put("repaymentTime", repay.getRepaymentTime());
                map.put("repaymentAccount", repay.getRepaymentAccount());
                //设置到当前线程容器
                Global.setTransfer("user", repay.getUser());
                Global.setTransfer("repay", map);
                //借款还款通知
                AbstractExecuter repaySuccessExecuter = ExecuterHelper.doExecuter("borrowerRepayNoticeExecuter");
                repaySuccessExecuter.execute(0, repay.getUser(), new User(Constant.ADMIN_ID));
            } 
        }
    }
    @Override
    public List<BorrowRepayment> getRepayListByStatus(int status){
    	// 还款时间提前
    	int aheadTime = Global.getInt("aheadtime");
    	return borrowRepaymentDao.getRepayListByStatus(status, aheadTime);
    }
    @Override
    public List<BorrowRepayment> getRepayListByStatus(int status,int repayType){
    	// 还款时间提前
    	int aheadTime = Global.getInt("aheadtime");
    	return borrowRepaymentDao.getRepayListByStatus(status, aheadTime,repayType);
    }
    @Override
    public void doOverdue(BorrowRepayment r){
    	 //计算逾期利息
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        Date nowTime = null;
        Date repaymentTime = null;
        try {
            nowTime = format.parse(DateUtil.dateStr2(new Date()));
            repaymentTime = format.parse(DateUtil.dateStr2(r.getRepaymentTime()));
        } catch (ParseException e) {
            e.printStackTrace();
        }
        long day = nowTime.getTime() - repaymentTime.getTime();
        int days = (int) (day / (24 * 60 * 60 * 1000));
        //逾期aheadDay天后才开始算逾期利息
    	int aheadDay=Global.getInt("aheadtime")/(24 * 60 * 60);
    	days-=aheadDay;
        double lateInterest = 0;
        if (days > 0 ){ 
            String overdueFee = Global.getValue("overdue_fee");
            double overdue = Double.parseDouble(overdueFee);
            if(days <= 5) {
                double captial = r.getCapital();
                lateInterest = BigDecimalUtil.mul(BigDecimalUtil.mul(BigDecimalUtil.add(captial,r.getInterest()), days), overdue); // 计算出逾期利息
                r.setLateDays(days);
                r.setLateInterest(lateInterest);
            }else if(days > 5){
                double capital = borrowRepaymentDao.getRemainderCapital(r.getBorrow().getId());
                double interest = borrowRepaymentDao.getRemainderInterest(r.getBorrow().getId());
                lateInterest = BigDecimalUtil.mul(BigDecimalUtil.mul(capital + interest, days), overdue); // 计算出逾期利息
                r.setLateInterest(lateInterest);
            }
            r.setLateDays(days);
            if(days>0){
            	r=borrowRepaymentDao.update(r);
            }
            Global.setTransfer("user", r.getUser());
			Global.setTransfer("borrow", r.getBorrow());
			Global.setTransfer("repay", r);
			BaseMsg msg = new BaseMsg(NoticeConstant.DEFERMENT_WARN);
			msg.doEvent();
        }
        BorrowRepayment repay=borrowRepaymentDao.find(r.getId());
        //更新逾期待收利息
        List<BorrowCollection> list = collectionDao.list(repay.getBorrow().getId(), repay.getPeriod(),0);
		if (list != null && list.size() > 0) {
			double compensatoryInterestTotal=0;
			for (BorrowCollection borrowCollection : list) {
				//投资人待收逾期利息计算
				if (repay.getLateInterest()  > 0) {
                    double tenderLateInterest = 0;
                    boolean isOpenApi = BaseTPPWay.isOpenApi();
                    if(!isOpenApi){//如果不是线上，则预期利息50%给平台
                        tenderLateInterest = BigDecimalUtil.mul(repay.getLateInterest() / 2, (BigDecimalUtil.div(borrowCollection.getInterest(), repay.getInterest())));
                    }else{
                        tenderLateInterest = BigDecimalUtil.mul(repay.getLateInterest(), (BigDecimalUtil.div(borrowCollection.getInterest(), repay.getInterest())));
                    }
                    borrowCollection.setLateDays(repay.getLateDays());
                    borrowCollection.setLateInterest(tenderLateInterest);
                    collectionDao.update(borrowCollection);
                }
				//担保公司生成新待还
				User user=borrowCollection.getUser();
				double interest=borrowCollection.getInterest(); //本次待收利息
				double compensatoryInterest=0;//本次代偿待收利息
				CompensatoryRuleCheck compensatoryRuleCheck=(CompensatoryRuleCheck) Global.getRuleCheck("compensatory");//担保公司代偿规则
				double rate=compensatoryRuleCheck.rate(user.getMemberLevel()); //该投资人担保公司代偿利息比率
				if(interest>0){
					compensatoryInterest=BigDecimalUtil.mul(rate, interest);
					if(compensatoryInterest>0&&borrowCollection.getCompensatoryInterest()==0){
						borrowCollection.setCompensatoryInterest(compensatoryInterest);//待收表中代偿利息
						collectionDao.update(borrowCollection);//更新待收表
					    compensatoryInterestTotal=BigDecimalUtil.add(compensatoryInterestTotal,compensatoryInterest); //待还代偿利息总额
					}
				}
			}
			//担保公司代偿待还记录
            User vouchFirmUser=r.getBorrow().getVouchFirm();
            if(vouchFirmUser!=null){
            	BorrowRepayment oldBr=borrowRepaymentDao.getRepayByBorrowIdAndPeriodAndStatus(repay.getBorrow().getId(), repay.getPeriod(), 4);//代偿待还记录
            	if(oldBr==null){
            		//更新原待还表
                	repay.setCompensatoryInterest(compensatoryInterestTotal);
                	borrowRepaymentDao.update(repay);
                	//生成代偿待还表记录
	            	BorrowRepayment br=new  BorrowRepayment();
	            	br.setBorrow(repay.getBorrow());
	            	br.setTender(repay.getTender());
	            	br.setCapital(repay.getCapital());
	            	br.setInterest(compensatoryInterestTotal);
	            	br.setLateDays(0);
	            	br.setLateInterest(0);
	            	br.setPeriod(repay.getPeriod());
	            	br.setRealRepayer(vouchFirmUser);
	            	br.setRepaymentAccount(BigDecimalUtil.add(repay.getCapital(),repay.getInterest()));
	            	br.setRepaymentTime(repay.getRepaymentTime());
	            	br.setRepayTradeNo(TradeIDGenerator.createTradeBN(AccountTradeConstant.TRADE_LARGE_SORT_COMPENSATE));
	            	br.setStatus(BorrowRepayment.STATUS_MANAGE_COMPENSATE);
	            	br.setUser(vouchFirmUser);
	            	br.setWebStatus(BorrowRepayment.WEB_STATUS_COMPENSATE);
	            	br.setCompensatoryInterest(compensatoryInterestTotal);
	            	borrowRepaymentDao.save(br);
            	}
            }
			
		}
		
		
    }
    @Override
    public double getCompensatedInterestSum(String startDate,String endDate) {
    	
    	return borrowRepaymentDao.getCompensatedInterestSum( startDate, endDate);
    }
    @Override
    public double getCompensatedCapitalSum(String startDate,String endDate) {
    	
    	return borrowRepaymentDao.getCompensatedCapitalSum( startDate, endDate);
    }

	/* (non-Javadoc)
	 * @see com.rongdu.p2psys.borrow.service.BorrowRepaymentService#listByBorrow(long, int, int)
	 */
	@Override
	public PageDataList<BorrowRepayment> listByBorrow(long borrowid,int page, int size) {
		return borrowRepaymentDao.getList(borrowid, page, size);
	}

	/* (non-Javadoc)
	 * @see com.rongdu.p2psys.borrow.service.BorrowRepaymentService#getRepaymentByBId(long)
	 */
	@Override
	public PageDataList<BorrowRepayment> getRepaymentByBId(long borrowId,int page,int size) {
		QueryParam param = QueryParam.getInstance();
        param.addParam("borrow.id", borrowId);
        param.addOrder("repaymentTime");
        param.addPage(page, size) ;
        return borrowRepaymentDao.findPageList(param);
	}


	@Override
	public List<BorrowRepayment> repaymentListByUserIdAndStatus(long userId,
		List<Integer> statusList,int repayType) {
		
		QueryParam param = QueryParam.getInstance();
		param.addParam("user.userId", userId);
		param.addParam("status",Operators.IN, statusList);
		if(repayType!=99){
			param.addParam("webStatus", repayType);
		}
		
		List<BorrowRepayment> repaymentList = borrowRepaymentDao.findByCriteria(param);
		
		return repaymentList;
	}

	@Override
	public List<BorrowRepayment> unRepaymentList(List<Long> borrowId, int status) {
		QueryParam param = QueryParam.getInstance();
		param.addParam("borrow.id",Operators.IN, borrowId);
		param.addParam("status", status);
		List<BorrowRepayment> repaymentList = borrowRepaymentDao.findByCriteria(param);
		return repaymentList;
	}


	@Override
	public int getCollectionCount(long userId) {
		return borrowRepaymentDao.getCollectionCount(userId);
	}

	@Override
	public int getOverdueCount(long userId) {
		return borrowRepaymentDao.getOverdueCount(userId);
	}

	@Override
	public String repaymentAccountTotal(BorrowRepaymentModel model) {
		return borrowRepaymentDao.repaymentAccountTotal(model);
	}
	//JSDP-85 gjh 2015-5-4 start
	@Override
	public PageDataList<BorrowRepaymentModel> contrast(
			PageDataList<BorrowRepaymentModel> list) throws Exception {
		for(BorrowRepaymentModel brm:list.getList()){
			brm.setContrastResult("0");
			BorrowCollection bc = null;
			if(brm.getTender()!=null){
				//borrowTenderDao.get
				bc = ((List<BorrowCollection>) collectionDao.findByProperty("tender", brm.getTender())).get(brm.getPeriod());
			}
			if(bc != null){
				if(bc.getCapital() != 0){
					YmdQuery ymdQuery=new YmdQuery();
					ymdQuery.setOutTradeNo(bc.getRepayCapitalOutTradeNo());
					ymdQuery.setMode("trade");
					YmdQueryReturn ymdQueryReturn=new YmdQueryReturn();
					ymdQueryReturn=YmdTPPWay.query(ymdQuery);
					List<YmdQueryReturnDetails> queryDetaillist=ymdQueryReturn.getList();
					System.out.println(queryDetaillist.size()>0?queryDetaillist.get(0):"空");
					if(bc.getStatus() == 1 && queryDetaillist.size() == 0){
						brm.setContrastResult("1");
					}else if(bc.getStatus() == 0 && queryDetaillist.size() > 0){
						brm.setContrastResult("2");
					}
				}
				if(bc.getInterest() != 0){
					YmdQuery ymdQuery=new YmdQuery();
					ymdQuery.setOutTradeNo(bc.getRepayInterestOutTradeNo());
					ymdQuery.setMode("trade");
					YmdQueryReturn ymdQueryReturn=new YmdQueryReturn();
					ymdQueryReturn=YmdTPPWay.query(ymdQuery);
					List<YmdQueryReturnDetails> queryDetaillist=ymdQueryReturn.getList();
					System.out.println(queryDetaillist.size()>0?queryDetaillist.get(0):"空");
					if(bc.getStatus() == 1 && queryDetaillist.size() == 0){
						brm.setContrastResult("1");
					}else if(bc.getStatus() == 0 && queryDetaillist.size() > 0){
						brm.setContrastResult("2");
					}
				}
			}
		}
		return list;
	}
	//JSDP-85 gjh 2015-5-4 end
	

	@Override
	public List<BorrowRepayment> excelBorrowRepayList(BorrowRepaymentModel model) {
		//JSDP-116 sxy 2015-05-15 start
		return borrowRepaymentDao.excelBorrowRepayList(model);
		//JSDP-116 sxy 2015-05-15 start
	}
	
	@Override
	public List<BorrowRepayment> excelBorrowOverdueList(BorrowRepaymentModel model) {
		//JSDP-116 sxy 2015-05-15 start
		return borrowRepaymentDao.excelBorrowOverdueList(model);
		//JSDP-116 sxy 2015-05-15 start
	}
	//JSDP-221 wcw 2015-07-17 start
	@Override
	public void update(BorrowRepayment br){
		borrowRepaymentDao.update(br);
	}
	//JSDP-221 wcw 2015-07-17 end
	
}
