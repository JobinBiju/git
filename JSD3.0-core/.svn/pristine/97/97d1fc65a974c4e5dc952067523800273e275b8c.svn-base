package com.rongdu.p2psys.borrow.service.impl;

import java.io.File;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import com.ddtkj.p2psys.account.dao.AccountDao;
import com.ddtkj.p2psys.account.domain.Account;
import com.ddtkj.p2psys.autotender.domain.BorrowAutoTender;
import com.ddtkj.p2psys.borrow.dao.BorrowTenderDao;
import com.ddtkj.p2psys.borrow.domain.BorrowTender;
import com.ddtkj.p2psys.borrow.model.BorrowHelper;
import com.ddtkj.p2psys.borrow.model.worker.BorrowWorker;
import com.ddtkj.p2psys.goods.dao.GoodsDao;
import com.ddtkj.p2psys.goods.dao.GoodsOrderDao;
import com.ddtkj.p2psys.goods.domain.DdtkjGoods;
import com.ddtkj.p2psys.goods.domain.GoodsOrder;
import com.ddtkj.p2psys.goods.service.GoodsOrderService;
import com.ddtkj.p2psys.user.domain.User;
import com.ddtkj.p2psys.user.domain.UserCache;
import com.rongdu.common.exception.BussinessException;
import com.rongdu.common.model.jpa.OrderFilter.OrderType;
import com.rongdu.common.model.jpa.PageDataList;
import com.rongdu.common.model.jpa.QueryParam;
import com.rongdu.common.model.jpa.SearchFilter;
import com.rongdu.common.model.jpa.SearchFilter.Operators;
import com.rongdu.common.util.BigDecimalUtil;
import com.rongdu.common.util.DateUtil;
import com.rongdu.common.util.StringUtil;
import com.rongdu.p2psys.borrow.dao.BorrowConfigDao;
import com.rongdu.p2psys.borrow.dao.BorrowDao;
import com.rongdu.p2psys.borrow.dao.BorrowMortgageDao;
import com.rongdu.p2psys.borrow.dao.BorrowRepaymentDao;
import com.rongdu.p2psys.borrow.dao.BorrowUploadDao;
import com.rongdu.p2psys.borrow.domain.Borrow;
import com.rongdu.p2psys.borrow.domain.BorrowConfig;
import com.rongdu.p2psys.borrow.domain.BorrowMortgage;
import com.rongdu.p2psys.borrow.domain.BorrowRepayment;
import com.rongdu.p2psys.borrow.domain.BorrowUpload;
import com.rongdu.p2psys.borrow.exception.BorrowException;
import com.rongdu.p2psys.borrow.model.BorrowModel;
import com.rongdu.p2psys.borrow.model.BorrowRepaymentModel;
import com.rongdu.p2psys.borrow.service.BorrowService;
import com.rongdu.p2psys.core.Global;
import com.rongdu.p2psys.core.constant.enums.EnumRuleNid;
import com.rongdu.p2psys.core.dao.DictDao;
import com.rongdu.p2psys.core.dao.VerifyLogDao;
import com.rongdu.p2psys.core.disruptor.DisruptorUtils;
import com.rongdu.p2psys.core.domain.Log;
import com.rongdu.p2psys.core.domain.Operator;
import com.rongdu.p2psys.core.domain.VerifyLog;
import com.rongdu.p2psys.core.executer.AbstractExecuter;
import com.rongdu.p2psys.core.executer.ExecuterHelper;
import com.rongdu.p2psys.core.rule.AutoTenderConfRuleCheck;
import com.rongdu.p2psys.core.rule.IndexRuleCheck;
import com.rongdu.p2psys.core.service.LogService;
import com.rongdu.p2psys.core.util.BeanUtil;
import com.rongdu.p2psys.user.dao.UserCacheDao;
import com.rongdu.p2psys.user.dao.UserCreditDao;
import com.rongdu.p2psys.user.dao.UserCreditLogDao;

@Service("borrowService")
public class BorrowServiceImpl implements BorrowService {
    Logger logger = Logger.getLogger(BorrowServiceImpl.class);

    @Resource
    private UserCreditDao userCreditDao;
    @Resource
    private UserCreditLogDao userCreditLogDao;
    @Resource
    private BorrowDao borrowDao;
    @Resource
    private GoodsDao goodsDao;
    @Resource
    private AccountDao accountDao;
    @Resource
    private BorrowRepaymentDao borrowRepaymentDao;
    @Resource
    private BorrowTenderDao borrowTenderDao;
    @Resource
    private BorrowUploadDao borrowUploadDao;
    @Resource
    private VerifyLogDao verifyLogDao;
    @Resource
    private UserCacheDao userCacheDao;
    @Resource
    private BorrowMortgageDao borrowMortgageDao;
    @Resource
	private BorrowConfigDao borrowConfigDao;
    @Resource
    private DictDao dictDao;
    @Resource
    private GoodsOrderService goodsOrderService;
	@Resource
	private LogService logService;
	
	@Resource
	private GoodsOrderDao goodsOrderDao;
	
    @Override
    public Borrow save(BorrowModel model, User user, List<BorrowUpload> list) {
        Borrow borrow = model.prototype();
        BorrowWorker worker = BorrowHelper.getWorker(borrow);

        worker.checkModelData();
        // 认证校验，信用标额度校验
        worker.allowPublish(user);
        worker.setBorrowField(user);
        //JSDBET-798 wcw 2015-3-12 start
        if(StringUtil.isBlank(borrow.getTradeNo())||StringUtil.isBlank(borrow.getBorrowManageFeeTradeNo())){
        	throw new BorrowException("订单号不能为空", 1);
        }
        //JSDBET-798 wcw 2015-3-12 end
        Borrow addBorrow = (Borrow) borrowDao.save(borrow);

        List<BorrowMortgage> borrowMortgageList = model.getBorrowMortgageList();

        List<BorrowMortgage> bms = new ArrayList<BorrowMortgage>();

        if (borrowMortgageList != null && borrowMortgageList.size() > 0) {
            // 计算抵押价总和
            double prices = 0;
            for (int i = 0; i < borrowMortgageList.size(); i++) {
                BorrowMortgage borrowMortgage = borrowMortgageList.get(i);
                if (borrowMortgage.getAssessPrice() <= borrowMortgage.getMortgagePrice()) {
                    throw new BorrowException("评估价必须大于抵押价！", 1);
                }
                prices += borrowMortgage.getMortgagePrice();
                borrowMortgage.setStatus(1);
                borrowMortgage.setBorrow(addBorrow);
                borrowMortgage.setAddTime(new Date());
                borrowMortgage.setAddIp(Global.getIP());
                borrowMortgage.setContractNo(borrow.getDealParent());
                bms.add(borrowMortgage);
            }
            if (prices < addBorrow.getAllAccount()) {
                throw new BorrowException("抵押物总和不能小于借款总额！", 1);
            }
            borrowMortgageDao.save(bms);
        }

        List<BorrowUpload> l = new ArrayList<BorrowUpload>();
        for (BorrowUpload bu : list) {
            bu.setBorrow(borrow);
            l.add(bu);
        }
        borrowUploadDao.save(l);
        // 秒标需要发标时就冻结资金(自动审核初审)
        if (worker.getBorrowConfig().isTrail()) {
            borrow = worker.handleBorrowBeforePublish(borrow);
            // 是否跳过初审
            worker.skipTrial(addBorrow);
        }
        // 信用标或学信标
        worker.handleBorrowAfterPublish(addBorrow);
        /*if (BaseTPPWay.isOpenApi()) {
            if (BaseTPPWay.apiCode().equals("1")) {
                YjfService apiService = new YjfServiceImpl();
                List<Object> taskList = new ArrayList<Object>();
                apiService.addBorrowCreateTradeNo(addBorrow, addBorrow.getUser(), taskList);
                if (!apiService.doApiTask(taskList)) {
                    throw new BussinessException("发标创建交易失败！");
                }
            } else if (BaseTPPWay.apiCode().equals("2")) {

            }
        }*/

        // 发送通知
        Global.setTransfer("user", user);
        Global.setTransfer("borrow", addBorrow);
        AbstractExecuter executer = ExecuterHelper.doExecuter("publishBorrowNoticeExecuter");
        executer.execute(0, user);
        return addBorrow;
    }

    @Override
    public void update(Borrow borrow) {
        BorrowWorker worker = BorrowHelper.getWorker(borrow);
        worker.handleBorrowAfterPublish(borrow);
        borrowDao.update(borrow);
    }

    @Override
    public PageDataList<BorrowModel> list(BorrowModel model) {
        QueryParam param = QueryParam.getInstance();
        if (model != null) {
            if (model.getUser() != null && model.getUser().getUserId() > 0) {
                param.addParam("user.userId", model.getUser().getUserId());
            }
            if (model.getVouchFirmId() != 0 && model.getVouchFirmId() > 0) {
            	param.addParam("vouchFirm", model.getVouchFirmId());
            }
            if (model.getStatus() != 99) {
                switch (model.getStatus()) {
                    case 1:
                        param.addParam("status", 1);
                        if (model.getScales() == 100) {
                            param.addParam("accountYes", Operators.PROPERTY_EQ, "account");
                        } else {
                            param.addParam("accountYes", Operators.PROPERTY_NOTEQ, "account");
                        }
                        break;
                    case 19:
                        param.addParam("status", 1);
                        param.addParam("accountYes", Operators.PROPERTY_EQ, "account");
                        break;
                    case 49:
                        SearchFilter orFilter1 = new SearchFilter("status", Operators.EQ, 4);
                        SearchFilter orFilter2 = new SearchFilter("status", Operators.EQ, 49);
                        param.addOrFilter(orFilter1, orFilter2);
                        break;
                    case 59:
                        SearchFilter orFilter3 = new SearchFilter("status", Operators.EQ, 5);
                        SearchFilter orFilter4 = new SearchFilter("status", Operators.EQ, 59);
                        param.addOrFilter(orFilter3, orFilter4);
                        break;
                    default:
                        param.addParam("status", model.getStatus());
                        break;
                }
            }
            if (model.getScales() == 99) {
                param.addParam("account", Operators.PROPERTY_GT, "accountYes");
                // param.addParam("type", Operators.NOTEQ, 110); 删除对流转标的限制
            }
            if (StringUtil.isNotBlank(model.getName()) && !"undefined".equals(model.getName())) {
                param.addParam("name", Operators.LIKE, model.getName());
            }
            if (StringUtil.isNotBlank(model.getUserName())&& !"undefined".equals(model.getUserName())) {
                param.addParam("user.userName", Operators.LIKE, model.getUserName());
            }
            Date d = DateUtil.getDate(System.currentTimeMillis() / 1000 + "");
            if (model.getTime() == 7) {
                param.addParam("addTime", Operators.GTE, DateUtil.rollDay(d, -7));
                param.addParam("addTime", Operators.LTE, d);
            } else if (model.getTime() > 0 && model.getTime() < 4) {
                param.addParam("addTime", Operators.GTE, DateUtil.rollMon(d, -model.getTime()));
                param.addParam("addTime", Operators.LTE, d);
            }
            if (StringUtil.isNotBlank(model.getStartTime())) {
                //Date start = DateUtil.valueOf(model.getStartTime() + " 00:00:00");
                Date start = DateUtil.valueOf(model.getStartTime());
                param.addParam("addTime", Operators.GT, start);
            }
            if (StringUtil.isNotBlank(model.getEndTime())) {
                //Date end = DateUtil.valueOf(model.getEndTime() + " 23:59:59");
                Date end = DateUtil.valueOf(model.getEndTime());
                param.addParam("addTime", Operators.LTE, end);
            }
            if (model.getType() != 100 && model.getType() != 0) {
                param.addParam("type", model.getType());
            }
            if (StringUtil.isNotBlank(model.getDealNo())) {
                param.addParam("dealNo", Operators.LIKE, model.getDealNo());
            }
            searchParam(param, model);
            param.addPage(model.getPage(), model.getSize());
        }
        param.addOrder(OrderType.DESC, "addTime");
        PageDataList<Borrow> pageDataList = borrowDao.findPageList(param);
        PageDataList<BorrowModel> pageDataList_ = new PageDataList<BorrowModel>();
        List<BorrowModel> list = new ArrayList<BorrowModel>();
        pageDataList_.setPage(pageDataList.getPage());
        VerifyLogDao verifyLogDao = (VerifyLogDao) BeanUtil.getBean("verifyLogDao");

        if (pageDataList.getList().size() > 0) {
            for (int i = 0; i < pageDataList.getList().size(); i++) {
                Borrow borrow = (Borrow) pageDataList.getList().get(i);
                BorrowModel bm = BorrowModel.instance(borrow);
                try {
                	DecimalFormat df = new DecimalFormat("#0.00");
                    bm.setUserName(borrow.getUser().getUserName());
                    bm.setUserId(borrow.getUser().getUserId());
                    bm.setWaitRepayment(BigDecimalUtil.sub(borrow.getRepaymentAccount(), borrow.getRepaymentYesAccount()));
                    if(null!=borrow.getVouchFirm()){
                    	bm.setVouchFirmName(borrow.getVouchFirm().getUserCache().getCompanyName());
                    }
                    
                    
                    //用于展示和导出
                    bm.setAccountStr(df.format(borrow.getAccount()));//本次借款金额
                    bm.setAprStr(df.format(borrow.getApr())+"%");//年利率
                    bm.setAccountYesStr(df.format(borrow.getAccountYes()));//实还总金额repaymentYesAccountStr
                    bm.setScalesStr(df.format(borrow.getScales())+"%");//完成比例
                    bm.setRepaymentAccountStr(df.format(borrow.getRepaymentAccount()));//应还本金
                    bm.setWaitRepaymentStr(df.format(bm.getWaitRepayment()));//待还金额
                    bm.setLowestAccountStr(df.format(borrow.getLowestAccount()));//最低投标金额
                    bm.setMostAccountStr(df.format(borrow.getMostAccount()));//最高投标金额
                    
                    
                    
                } catch (Exception e) {
                    bm.setUserName("<font color='red'>该用户被删除</font>");
                    bm.setUserId(0);
                }
                //加入标的类型名称
               BorrowConfig bconfig = borrowConfigDao.find((long)bm.getType());
               bm.setTypeName(bconfig.getName());
                if (borrow.getRegisterTime() != null
                        && DateUtil.getNowTime() > DateUtil.rollMinute(borrow.getRegisterTime(), 35).getTime() / 1000) {
                    bm.setIsShowRegister(1);
                }
                //查询还款方式
//               List<Dict> dictList = dictDao.list("borrow_style");
//               for(int k = 0;k<dictList.size();k++){
//            	   Dict dict = dictList.get(k);
//            	   if(borrow.getStyle()==dict.getSort()){
//            		   bm.setStyleNew(dict.getName());
//            	   }
//               }
                bm.setStyleNew(bm.convertBorrowStyle(borrow.getStyle()));
                VerifyLog log = verifyLogDao.findByType(borrow.getId(), "borrow", 1);
                if (log != null) {
                    Date d = log.getTime(); //初审时间
                    Calendar c = Calendar.getInstance();
                    c.setTime(d);
                    c.add(Calendar.DATE, borrow.getValidTime());
                    Calendar now = Calendar.getInstance();
                    now.setTime(new Date());
                    bm.setIsFlow(c.before(now));
                    bm.setStartTime(DateUtil.dateStr2(log.getTime()));
                }
                bm.setUser(null);
                list.add(bm);
            }
        }
        pageDataList_.setList(list);
        return pageDataList_;
    }

    /**
     * 前台分页
     * 
     * @param model
     * @return
     */
    @Override
    public PageDataList<BorrowModel> getList(BorrowModel model) {
    	PageDataList<Borrow> pageDataList = borrowDao.getList(model);
        PageDataList<BorrowModel> pageDataList_ = new PageDataList<BorrowModel>();
        List<BorrowModel> list = new ArrayList<BorrowModel>();
        pageDataList_.setPage(pageDataList.getPage());
        VerifyLogDao verifyLogDao = (VerifyLogDao) BeanUtil.getBean("verifyLogDao");

        if (pageDataList.getList().size() > 0) {
            for (int i = 0; i < pageDataList.getList().size(); i++) {
                Borrow borrow = (Borrow) pageDataList.getList().get(i);
                BorrowModel bm = BorrowModel.instance(borrow);
                try {
                	DecimalFormat df = new DecimalFormat("#0.00");
                    bm.setUserName(borrow.getUser().getUserName());
                    bm.setUserId(borrow.getUser().getUserId());
                    BorrowConfig bconfig = borrowConfigDao.find((long)bm.getType());
                    bm.setTypeName(bconfig.getName());
                    
                    //用于展示和导出
                    bm.setAccountStr(df.format(borrow.getAccount()));//借款金额（用于显示和导出）
                    bm.setAprStr(df.format(borrow.getApr())+"%");//年利率
                    bm.setAccountYesStr(df.format(borrow.getAccountYes()));//实还总金额
                    bm.setScalesStr(df.format(borrow.getScales())+"%");//完成比例
                    //bm.setRepaymentAccountStr(df.format(borrow.getRepaymentAccount()));//应还本金
                    
                } catch (Exception e) {
                    bm.setUserName("<font color='red'>该用户被删除</font>");
                    bm.setUserId(0);
                }
                /*if(borrow.getUser().getUserCache().getCompanyType()!=null){
                	String name = "" ;
                    //独资企业:70,合伙企业:71,公司企业:72,个体工商户:73
                    if("70".equals(borrow.getUser().getUserCache().getCompanyType())){
                    	name="独资企业" ;
                    }
                    if("71".equals(borrow.getUser().getUserCache().getCompanyType())){
                    	name="合伙企业" ;
                    }
                    if("72".equals(borrow.getUser().getUserCache().getCompanyType())){
                    	name="公司企业" ;
                    }
                    if("73".equals(borrow.getUser().getUserCache().getCompanyType())){
                    	name="个体工商户" ;
                    }
                    bm.setCompanyType(name);
                }*/
                String name = "" ;
                if(model.getType() == Borrow.TYPE_MORTGAGE_ENERGY || model.getType() == Borrow.TYPE_NETWORK){
                	name = "企业经营";
                }
                if(model.getType() == Borrow.TYPE_MORTGAGE || model.getType() == Borrow.TYPE_AMORTIZE){
                	name = "个人经营";
                }
               /*  fgq 2015-03-07 start
                 fgq 2015-03-07 end*/
                if(model.getType()==999){
                	 if(borrow.getType() == Borrow.TYPE_MORTGAGE_ENERGY || borrow.getType() == Borrow.TYPE_NETWORK){
                     	name = "企业经营";
                     }
                     if(borrow.getType() == Borrow.TYPE_MORTGAGE || borrow.getType() == Borrow.TYPE_AMORTIZE){
                     	name = "个人经营";
                     }
                }
                bm.setCompanyType(name);
                VerifyLog log = verifyLogDao.findByType(borrow.getId(), "borrow", 1);
                if (log != null) {
                    Date d = log.getTime(); //初审时间
                    Calendar c = Calendar.getInstance();
                    c.setTime(d);
                    c.add(Calendar.DATE, borrow.getValidTime());
                    Calendar now = Calendar.getInstance();
                    now.setTime(new Date());
                    bm.setIsFlow(c.before(now));
                    bm.setStartTime(DateUtil.dateStr4(log.getTime()));
                }
                bm.setBorrowId(borrow.getId());
                bm.setUser(null);
                
                list.add(bm);
            }
        }
        pageDataList_.setList(list);
        return pageDataList_;
    }

    @Override
    public void cancel(Borrow borrow) throws Exception {
        if (borrow == null) {
            throw new BorrowException("借款标的状态异常！");
        }
        BorrowWorker worker = BorrowHelper.getWorker(borrow);
        worker.revokeBorrow();
        borrow.setRepaymentYesAccount(-borrow.getRepaymentYesAccount());
        borrow.setRepaymentYesInterest(-borrow.getRepaymentYesInterest());
        if (borrow.getStatus() == -1) {//用户撤回
            borrow.setStatus(-1);
            borrow.setRepaymentAccount(0);
            borrowDao.modifyBorrowAndRepay(borrow);
            Global.setTransfer("user", borrow.getUser());
            Global.setTransfer("borrow", borrow);
            AbstractExecuter executer = ExecuterHelper.doExecuter("borrowCancelNoticeExcuter");
            executer.execute(0, borrow.getUser());
        } else {
            borrow.setStatus(5);
            borrowDao.modifyBorrowAndRepay(borrow);
            DisruptorUtils.autoCancel(borrow);
        }
        
        List<BorrowTender> tenderList = borrowTenderDao.findByProperty("borrow.id", borrow.getId());
        if(tenderList.size() > 0){
        	for(int i=0;i<tenderList.size();i++){
        		BorrowTender borrowTender  = tenderList.get(i);
        		if(borrowTender.getStatus()==0){
        			borrowTender.setStatus(2);
        			borrowTenderDao.update(borrowTender);
        		}
        	}
//            borrowTenderDao.updateStatus(borrow.getId(), 2, 0);
        }
        
        //JSDBET-789 xingjia 20150307 start
        //分期宝的标撤销后将订单的状态也跟着改变
        if(Borrow.TYPE_AMORTIZE==borrow.getType() && borrow.getStatus()==5){
        	GoodsOrder goodsOrder = goodsOrderService.findOrderByBorrowId(borrow.getId());
        	goodsOrder.setStatus(GoodsOrder.REVOKE_VERIFY_ORDER);
        	goodsOrderService.updateOrder(goodsOrder);
        }
        //JSDBET-789 xingjia 20150307 end
        
        
    }

    @Override
    public void borrowCancel(Borrow borrow) throws Exception {
        if (borrow.getStatus() != 9) {
            throw new BorrowException("标状态异常，请刷新后操作", 1);
        }
        borrowDao.updateStatus(borrow.getId(), 5, 9);
    }

    @Override
    public void doRepay(BorrowRepayment borrowRepayment) {
        Borrow borrow = borrowDao.find(borrowRepayment.getBorrow().getId());
        Account account = accountDao.findObjByProperty("user.userId", borrow.getUser().getUserId());
        BorrowWorker worker = BorrowHelper.getWorker(borrow);
        worker.validBeforeRepayment(borrowRepayment, account);
        // 计算逾期利息
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        Date nowTime = null;
        Date repaymentTime = null;
        try {
            nowTime = format.parse(DateUtil.dateStr2(new Date()));
            repaymentTime = format.parse(DateUtil.dateStr2(borrowRepayment.getRepaymentTime()));
        } catch (ParseException e) {
            e.printStackTrace();
        }
        long day = nowTime.getTime() - repaymentTime.getTime();
        int days = (int) (day / (24 * 60 * 60 * 1000));
        double lateInterest = 0;
        if (days > 0) {
            String overdueFee = Global.getValue("overdue_fee");
            double overdue = Double.parseDouble(overdueFee);
            if (days <= 5) {
                double captial = borrowRepayment.getCapital();
                lateInterest = BigDecimalUtil.mul(BigDecimalUtil.mul(captial + borrowRepayment.getInterest(), days),
                        overdue); // 计算出逾期利息
                borrowRepayment.setLateDays(days);
                borrowRepayment.setLateInterest(lateInterest);
            } else if (days > 5) {
                double capital = borrowRepaymentDao.getRemainderCapital(borrow.getId());
                double interest = borrowRepaymentDao.getRemainderInterest(borrow.getId());
                lateInterest = BigDecimalUtil.mul(BigDecimalUtil.mul(capital + interest, days), overdue); // 计算出逾期利息
                borrowRepayment.setLateInterest(lateInterest);
            }
            borrowRepayment.setLateDays(days);
        }

        // 设置webstatus=1
        borrowRepayment.setWebStatus(1);
        borrowRepayment = borrowRepaymentDao.update(borrowRepayment);
        double repayMoney = borrowRepayment.getRepaymentAccount();
        // double lateMoney = borrowRepayment.getLateInterest();
        double lateMoney = lateInterest;
        // 定时算展期利息
        double extensionInterest = borrowRepayment.getExtensionInterest();
        double freezeVal = 0;
        freezeVal = BigDecimalUtil.add(repayMoney, lateMoney, extensionInterest);

        Global.setTransfer("money", freezeVal);
        Global.setTransfer("borrow", borrow);
        Global.setTransfer("repay", borrowRepayment);
        AbstractExecuter executer = ExecuterHelper.doExecuter("borrowRepayFreezeExecuter");
        executer.execute(freezeVal, borrow.getUser());
        String resultFlag = System.currentTimeMillis()+""+Math.random()*10000;
        DisruptorUtils.repay(borrowRepayment,resultFlag);
    }

    @Override
    public void doPriorRepay(BorrowRepayment borrowRepayment) {
        Borrow borrow = borrowRepayment.getBorrow();
        BorrowWorker worker = BorrowHelper.getWorker(borrow);
        if (worker.isLastPeriod(borrowRepayment.getPeriod())) {
            throw new BussinessException("你正在操作的提前还款为最后一期还款，不能进行提前还款操作！");
        }
        if (borrowRepayment == null || borrowRepayment.getStatus() == 1 || borrowRepayment.getWebStatus() == 1) {
            throw new BorrowException("该期借款已经还款,请不要重复操作！", 1);
        }
        if (borrow.getStatus() != 6 && borrow.getStatus() != 7) {
            throw new BorrowException("当前借款标的状态不能进行还款操作！", 1);
        }
        boolean hasAhead = borrowRepaymentDao.hasRepaymentAhead(borrowRepayment.getPeriod(), borrowRepayment
                .getBorrow().getId());
        if (hasAhead) {
            throw new BorrowException("还有尚未还款的借款！", 1);
        }
        // 设置webstatus=1
        borrowRepayment.setWebStatus(1);
        borrowRepayment = borrowRepaymentDao.update(borrowRepayment);
        User user = borrowRepayment.getBorrow().getUser();
        Account act = accountDao.findObjByProperty("user.userId", user.getUserId());
        double waitRemainderRepayCapital = borrowRepaymentDao.getRemainderCapital(borrow.getId()); // 计算剩余待还本金
        double waitRemainderRepayInterest = borrowRepaymentDao.getwaitRpayInterest(borrow.getId(),
                borrowRepayment.getPeriod()); // 本次提前还款待还利息总和
        double waitRepayAccount = waitRemainderRepayCapital + waitRemainderRepayInterest;
        /*if (act.getUseMoney() < waitRepayAccount) {
            throw new BussinessException("您账户的可用余额为：" + act.getUseMoney() + ",小于提前还款总额：" + waitRepayAccount
                    + "，请充值再进行提前还款操作");
        }*/

        double freezeVal = waitRepayAccount;
        Global.setTransfer("money", freezeVal);
        Global.setTransfer("borrow", borrow);
        Global.setTransfer("repay", borrowRepayment);
        AbstractExecuter executer = ExecuterHelper.doExecuter("borrowRepayFreezeExecuter");
        executer.execute(freezeVal, borrow.getUser());

        DisruptorUtils.doPriorRepay(borrowRepayment);
    }

    public List<BorrowModel> getBorrowList() {
        BorrowModel model = new BorrowModel();
        IndexRuleCheck indexRule = (IndexRuleCheck) Global.getRuleCheck(EnumRuleNid.INDEX.getValue());
        model.setStatus(indexRule.borrow.status_type);
        List<BorrowModel> indexList = new ArrayList<BorrowModel>();
        // 组合启用，指定标种显示
        List<Integer> borrow_type = indexRule.borrow.borrow_type;
        // 组合启用，指定标种显示的个数
        List<Integer> borrow_num = indexRule.borrow.borrow_num;
        // 是否组合 或者全表排序
        if (indexRule.borrow.display == 1) {
            List<BorrowModel> bList = new ArrayList<BorrowModel>();
            for (int i = 0; i < borrow_type.size(); i++) {
                int type = (Integer) borrow_type.get(i); // 标种类型
                model.setType(type);
                Borrow borrow = BorrowHelper.getWorker(model).prototype();
                model = BorrowModel.instanceCurr(borrow, model);
                model.setSize(borrow_num.get(i));
                bList = borrowDao.getIndexList(model);
                indexList.addAll(bList);
            }
        } else { // 按照指定排序规则读取
            List<BorrowModel> bList = new ArrayList<BorrowModel>();
            bList = borrowDao.getIndexList(model);
            indexList = bList;
        }
        return indexList;
    }

    public int unfinshJinBorrowCount(long userId) {
        return borrowDao.unfinshJinBorrowCount(userId);
    }

    @Override
    public double getRepayTotalWithJin(long userId) {
        return borrowDao.getRepayTotalWithJin(userId);
    }

    @Override
    public Borrow find(long id) {
        return borrowDao.find(id);
    }

    @Override
    public void addBorrow(Borrow b) {
        borrowDao.update(b);
    }

    @Override
    public void verify(BorrowModel model, Operator operator)throws Exception {
        Borrow borrow = borrowDao.find(model.getId());
        borrow.setFixedTime(model.getFixedTime());
        BeanUtils.copyProperties(borrow,model);
        
        BorrowWorker worker = BorrowHelper.getWorker(borrow);
        Global.setTransfer("user", borrow.getUser());
        Global.setTransfer("borrow", borrow);
        //审核结果
        int status = 1;
    	if ("Y".equals(model.getPassVerify())) {
	        // 秒标初审通过 冻结解冻资金（利息和奖励）
	        /*if (borrow.getType() == Borrow.TYPE_SECOND) {
	            worker.handleBorrowBeforePublish(borrow);
	        }*/	
			if (autoTenderEnable(model)){
	            /* borrowDao.updateStatus(borrow.getId(), 19, borrow.getStatus());
	             borrowDao.updatefixedTime(borrow.getId(), model.getFixedTime());*/
	            try {
					DisruptorUtils.autoTender(model);
				}catch (Exception e) {
					borrowDao.updateStatus(borrow.getId(), 1, 19);
					borrowDao.updatefixedTime(borrow.getId(), model.getFixedTime());
					logger.info("自动投标异常==="+e.getMessage());
					Log log = fillLog(e.getMessage()+",cause:"+e.getCause());
					log.setParams("自动投标处理，标ID"+borrow.getId());
					log.setType(Log.TYPE_EXCEPTION);
					logService.addLog(log);
				}
			}else{
	     		 status = 1;
				 borrowDao.updateStatus(borrow.getId(), 1, borrow.getStatus());
	             borrowDao.updatefixedTime(borrow.getId(), model.getFixedTime());
			}
				
			//JSDBET-789 xingjia 20150307 start
			//分期宝的标初审通过后修改订单状态
			if(borrow.getType()==Borrow.TYPE_AMORTIZE){
				try {
					GoodsOrder goodsOrder = goodsOrderService.findOrderByBorrowId(model.getId());
					goodsOrder.setStatus(GoodsOrder.VERIFY_ORDER_PASS);
					goodsOrder = goodsOrderDao.update(goodsOrder);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			//JSDBET-789 xingjia 20150307 end
			
			// 发送消息通知
			AbstractExecuter executer = ExecuterHelper.doExecuter("borrowVerifySuccNoticeExecuter");
			executer.execute(0, borrow.getUser());
			VerifyLog verifyLog = new VerifyLog(operator, "borrow", borrow.getId(), 1, status+"", model.getRemark());
			verifyLogDao.save(verifyLog);
        }else{
        	borrowDao.updateStatus(borrow.getId(), 2, borrow.getStatus());
        	//JSDBET-827 wcw 2015-3-17 start
        	//分期宝的标初审不通过后冻结资金解冻
			if(borrow.getType()==Borrow.TYPE_AMORTIZE){
				double fee = BigDecimalUtil.decimal(BigDecimalUtil.mul(BigDecimalUtil.round(Global.getValue("stages_fee"),4),model.getAccount()),2) ;
				GoodsOrder go = goodsOrderService.findOrderByBorrowId(model.getId());
				
				//sxy 2015-03-25 start
				//根据订单查询商品信息
				DdtkjGoods ddtkjGoods = goodsDao.find(go.getGoods().getId());
				ddtkjGoods.setStock(ddtkjGoods.getStock() + 1);		//恢复商品库存
				goodsDao.update(ddtkjGoods);
				//sxy 2015-03-25 end
				
				go.setStatus(GoodsOrder.REVOKE_VERIFY_ORDER);
				go = goodsOrderDao.update(go);
		        if(go!=null){
					//  处理  用户首付资金
		        	Map<String, Object> map=new HashMap<String, Object>();
		        	if(go.getOnePay()>0){
						map.put("borrowerRechargeMoney", go.getUseOnePayRecharge());
						map.put("borrowerEnterMoney", go.getUseOnePayEnter());
						Global.setTransfer("goodsOrder", go);
						Global.setTransfer("goods", go.getGoods());
						Global.setTransfer("fee", fee);
						Global.setTransfer("deduct", go.getBorrow());
						
						AbstractExecuter onePayExecuter = ExecuterHelper.doExecuter("goodsUnFreezeBorrowerExcuter");
						onePayExecuter.execute(map, go.getUser(),new User(1));  // toUser 现在不确定
					}
				   //  处理  用户手续费资金
		        	if(fee>0){
				        map=new HashMap<String, Object>();
						map.put("borrowerRechargeMoney", go.getUseFeeRecharge());
						map.put("borrowerEnterMoney", go.getUseFeeEnter());
						Global.setTransfer("goodsOrder", go);
						Global.setTransfer("goods", go.getGoods());
						Global.setTransfer("fee", fee);
						AbstractExecuter feeExecuter = ExecuterHelper.doExecuter("goodsFeeUnFreezeExcuter");
						feeExecuter.execute(map, go.getUser(),new User(1));  // toUser 现在不确定
					}
				}
			}
			//JSDBET-827 wcw 2015-3-17 end
			
			// 发送标初审失败的消息通知
			AbstractExecuter executer = ExecuterHelper.doExecuter("borrowVerifyFailNoticeExecuter");
			executer.execute(0, borrow.getUser());
			VerifyLog verifyLog = new VerifyLog(operator, "borrow", borrow.getId(), 1, 2+"", model.getRemark());
			verifyLogDao.save(verifyLog);
        }
    	//审核日志记录
    }

    /**
     * 是否开启自动投标
     * @param  borrow
     * @throws Exception   
     */ 
    private boolean autoTenderEnable(BorrowModel borrow){
    	AutoTenderConfRuleCheck check = (AutoTenderConfRuleCheck) Global
				.getRuleCheck(EnumRuleNid.AUTO_TENDER_CONF.getValue());	
    	boolean isAutoTender = false;
    	int enableAutoTender = 0;
		List<Integer> list = null;
		if(check != null){
			if(check.getAuto_tender() != null){
    			enableAutoTender = check.getAuto_tender().getStatus();
			}
			if(check.getTender_type() != null){
				list = check.getTender_type();
			}
		}
		if(enableAutoTender == BorrowAutoTender.AUTO_TENDER_ENABLE && list.contains(borrow.getType()) &&
				borrow.getFixedTime() == null){
			isAutoTender = true;
		}
		if(borrow.getFixedTime() != null){ 
			if(borrow.getFixedTime().getTime() > new Date().getTime()){
				isAutoTender = false;
			}else{
				isAutoTender = true;
			}
		}
    	return isAutoTender;
    }
    
    /**
     * 填充日志信息
     * @param  exception
     * @return Log 
     * @throws Exception   
     */ 
    private Log fillLog(String exception){
    	Log log = new Log();
    	log.setException(exception);
    	log.setAddTime(new Date());
    	log.setRemoteAddr(Global.getIP());
    	return log;
    }

    @Override
    public  void verifyFull(BorrowModel model, Operator operator) throws Exception {
    	logger.info("标ID："+model.getId()+",满标复审进入service方法");
        Borrow borrow = borrowDao.find(model.getId());
        String resultFlag=model.getResultFlag();
        int status = 0;
        if (model.getStatus() == 0) {
        	model = BorrowModel.instance(borrow);
        	model.setResultFlag(resultFlag);
            logger.info("标ID："+model.getId()+",满标复审失败准备进入并发任务");
            DisruptorUtils.autoVerifyFullFail(model);
        } else if (model.getStatus() == 1) {
        	status = 1;
        	model = BorrowModel.instance(borrow);
        	model.setResultFlag(resultFlag);
            logger.info("标ID："+model.getId()+",满标复审成功准备进入并发任务");
            DisruptorUtils.autoVerifyFullSuccess(model);
        }
        VerifyLog verifyLog = new VerifyLog(operator, "borrow", borrow.getId(), 2, status+"", model.getRemark());
        verifyLogDao.save(verifyLog);
    }

    @Override
    public void updateStatus(long id, int status, int preStatus) {
        borrowDao.updateStatus(id, status, preStatus);
    }

    @Override
    public Borrow getBorrowById(long id) {
        return borrowDao.find(id);
    }

    @Override
    public int trialCount(int status) {
        return borrowDao.trialCount(status);
    }

    @Override
    public int fullCount(int status) {
        return borrowDao.fullCount(status);
    }

    @Override
    public Object[] countByFinish() {
        return borrowDao.countByFinish();
    }

    @Override
    public void stopBorrow(Borrow borrow) {
        BorrowWorker worker = BorrowHelper.getWorker(borrow);
        worker.stopBorrow();
        worker.skipReview();
        borrowDao.update(worker.prototype());
    }

    @Override
    public List<BorrowModel> spreadBorrowList(BorrowModel model) {

		List<BorrowModel> list = borrowDao.spreadBorrowList(model);
		List<BorrowModel> borrowList = new ArrayList<BorrowModel>();
		for (int i = 0; i < list.size(); i++) {
			BorrowModel bm = list.get(i);
			//加入标的类型名称
			BorrowConfig bconfig = borrowConfigDao.find((long)bm.getType());
			bm.setTypeName(bconfig.getName());
			borrowList.add(bm);
		}
        return borrowList;
    }

    @Override
    public int spreadBorrowCount(BorrowModel model) {
        return borrowDao.spreadBorrowCount(model);
    }

    private QueryParam searchParam(QueryParam param, BorrowModel model) {
        // 利率
        if (model.getAprSearch() != -1) {
            switch (model.getAprSearch()) {
                case 1:
                    param.addParam("apr", Operators.LTE, 6);
                    break;
                case 2:
                    param.addAddFilter("apr", Operators.GT, 6, "apr", Operators.LTE, 12);
                    break;
                case 3:
                    param.addAddFilter("apr", Operators.GT, 12, "apr", Operators.LTE, 18);
                    break;
                case 4:
                    param.addAddFilter("apr", Operators.GT, 18, "apr", Operators.LTE, 20);
                    break;
                case 5:
                    param.addParam("apr", Operators.GT, 20);
                    break;
                default:
                    break;
            }
        }
        /*// 金额
        if (model.getMoneySearch() != -1) {
            switch (model.getMoneySearch()) {
                case 2:
                    param.addParam("account", Operators.LTE, 10000);
                    break;
                case 3:
                    param.addAddFilter("account", Operators.GT, 10000, "account", Operators.LTE, 50000);
                    break;
                case 4:
                    param.addAddFilter("account", Operators.GT, 50000, "account", Operators.LTE, 100000);
                    break;
                case 5:
                    param.addAddFilter("account", Operators.GT, 100000, "account", Operators.LTE, 200000);
                    break;
                case 6:
                    param.addAddFilter("account", Operators.GT, 200000, "account", Operators.LTE, 500000);
                    break;
                case 7:
                    param.addParam("account", Operators.GT, 500000);
                    break;
                default:
                    break;
            }
        }*/
        // 期限
        if (model.getTimeSearch() != -1) {
            switch (model.getTimeSearch()) {
                case 2:
                    SearchFilter dayFilter = new SearchFilter("borrowTimeType", 1);
                    SearchFilter monthFilter = new SearchFilter("timeLimit", Operators.LTE, 1);
                    param.addOrFilter(dayFilter, monthFilter);
                    break;
                case 3:
                    param.addAddFilter("timeLimit", Operators.GT, 1, "timeLimit", Operators.LTE, 3);
                    break;
                case 4:
                    param.addAddFilter("timeLimit", Operators.GT, 3, "timeLimit", Operators.LTE, 6);
                    break;
                case 5:
                    param.addAddFilter("timeLimit", Operators.GT, 6, "timeLimit", Operators.LTE, 12);
                    break;
                case 6:
                    param.addParam("timeLimit", Operators.GT, 12);
                    break;
                default:
                    break;
            }
        }

        /*// 排序 1金额 2利率 3进度 4信用
        switch (model.getOrder()) {
            case -1:
                param.addOrder(OrderType.ASC, "account");
                break;
            case 1:
                param.addOrder(OrderType.DESC, "account");
                break;
            case -2:
                param.addOrder(OrderType.ASC, "apr");
                break;
            case 2:
                param.addOrder(OrderType.DESC, "apr");
                break;
            case -3:
                param.addOrder(OrderType.ASC, "scales");
                break;
            case 3:
                param.addOrder(OrderType.DESC, "scales");
                break;
            case -4:
                break;
            case 4:
                break;
            default:
                param.addOrder(OrderType.DESC, "id");
                break;
        }*/
        return param;
    }

    @SuppressWarnings({ "rawtypes", "unchecked" })
    private List searchParam(BorrowModel model) {
        List params = new ArrayList();
        StringBuffer sb = new StringBuffer();
        if (model.getType() != 100 && model.getType() != 0) {
            sb.append(" and borrow.type=?)");
            params.add(model.getType());
        } else {
            sb.append(" or borrow.type =110 and borrow.status = 1 and borrow.scales!=100) ");
        }
        if (StringUtil.isNotBlank(model.getName())) {
            sb.append(" and borrow.name like ?");
            params.add("%" + model.getName() + "%");
        }
        // 利率
        if (model.getAprSearch() != -1) {
            /* params.add(model.getAprSearch()); */
            switch (model.getAprSearch()) {
                case 1:
                    sb.append(" and borrow.apr<6");
                    break;
                case 2:
                    sb.append(" and borrow.apr between 6 and 12");
                    break;
                case 3:
                    sb.append(" and borrow.apr between 12 and 18");
                    break;
                case 4:
                    sb.append(" and borrow.apr between 18 and 20");
                    break;
                case 5:
                    sb.append(" and borrow.apr>20");
                    break;
                default:
                    break;
            }
        }
        /*// 金额
        if (model.getMoneySearch() != -1) {
             params.add(model.getMoneySearch()); 
            switch (model.getMoneySearch()) {
                case 2:
                    sb.append(" and borrow.account<10000");
                    break;
                case 3:
                    sb.append(" and borrow.account between 10000 and 50000");
                    break;
                case 4:
                    sb.append(" and borrow.account between 50000 and 100000");
                    break;
                case 5:
                    sb.append(" and borrow.account between 100000 and 200000");
                    break;
                case 6:
                    sb.append(" and borrow.account between 200000 and 500000");
                    break;
                case 7:
                    sb.append(" and borrow.account>500000");
                    break;
                default:
                    break;
            }
        }*/
        // 期限
        if (model.getTimeSearch() != -1) {
            /* params.add(model.getTimeSearch()); */
            switch (model.getTimeSearch()) {
                case 2:
                    sb.append(" and borrow.time_limit <= 1");
                    break;
                case 3:
                    sb.append(" and borrow.time_limit between 1 and 3 and borrow_time_type=0");
                    break;
                case 4:
                    sb.append(" and borrow.time_limit between 3 and 6");
                    break;
                case 5:
                    sb.append(" and borrow.time_limit between 6 and 12");
                    break;
                case 6:
                    sb.append(" and borrow.timeLimit>12");
                    break;
                default:
                    break;
            }
        }
        sb.append(" group by borrow.id");
        // 排序 1金额 2利率 3进度 4信用
       /* switch (model.getOrder()) {
            case -1:
                sb.append(" order by account");
                break;
            case 1:
                sb.append(" order by account desc");
                break;
            case -2:
                sb.append(" order by apr");
                break;
            case 2:
                sb.append(" order by apr desc");
                break;
            case -3:
                sb.append(" order by scales");
                break;
            case 3:
                sb.append(" order by scales desc");
                break;
            case -4:
                break;
            case 4:
                break;
            default:
                sb.append(" order by id desc");
                break;
        }*/
        params.add(sb);
        return params;
    }

    /**
     * 校验用户是否借款人
     * 
     * @param borrow
     * @param user
     */
    @Override
    public boolean isBorrowUser(long borrowId, long userId) {
        PageDataList<Borrow> borrowList = borrowDao.findAllPageList(QueryParam.getInstance().addParam("id", borrowId)
                .addParam("user.userId", userId));
        boolean isBorrowUser = borrowList != null && borrowList.getList() != null && borrowList.getList().size() > 0;
        if (isBorrowUser) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * 校验用户是否投资人
     * 
     * @param borrow
     * @param user
     */
    @Override
    public boolean isTenderUser(long borrowId, long userId) {
        PageDataList<BorrowTender> tenderList = borrowTenderDao.findAllPageList(QueryParam.getInstance()
                .addParam("borrow.id", borrowId).addParam("user.userId", userId).addParam("status", 1));
        boolean isTenderUser = tenderList != null && tenderList.getList() != null && tenderList.getList().size() > 0;
        if (isTenderUser) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public PageDataList<BorrowModel> getInviteList(BorrowModel model) {

        PageDataList<Borrow> pageDataList;
        if (model.getType() != Borrow.TYPE_FLOW) {
            pageDataList = borrowDao.getInviteList(model, searchParam(model));
        } else {
            QueryParam param = QueryParam.getInstance().addPage(model.getPage(), model.getSize());
            param.addParam("status", 1);
            param.addParam("scales", Operators.NOTEQ, 100);
            param.addParam("type", Borrow.TYPE_FLOW);
            if (StringUtil.isNotBlank(model.getName())) {
                param.addParam("name", Operators.LIKE, model.getName());
            }
            searchParam(param, model);
            pageDataList = borrowDao.findPageList(param);
        }
        List<Borrow> borrows = pageDataList.getList();
        PageDataList<BorrowModel> pageList = new PageDataList<BorrowModel>();
        List<BorrowModel> list = new ArrayList<BorrowModel>();
        if (borrows.size() > 0) {
            for (Borrow borrow : borrows) {
                BorrowModel bm = BorrowModel.instance(borrow);
                VerifyLog log = verifyLogDao.findByType(borrow.getId(), "borrow", 1);
                if (log != null) {
                    bm.setStartTime(DateUtil.dateStr2(log.getTime()));
                }
                list.add(bm);
            }
        }
        pageList.setList(list);
        pageList.setPage(pageDataList.getPage());
        return pageList;
    }

    @Override
    public Borrow findNotFlow(long borrowId) {
        Borrow borrow = borrowDao.find(borrowId);
        try {
            if (borrow.getStatus() == 1) {
                borrow = borrowDao.findNotFlow(borrowId);
            }
        } catch (Exception e) {
            throw new BorrowException("当前借款标不存在或已流标");
        }
        return borrow;
    }
    
    /**
     * 根据合同号查询借款标
     */
    @Override
    public Borrow findLoanByDealNo(String dealNo) {
        Borrow borrow = borrowDao.findLoanByDealNo(dealNo);
        
        //throw new BorrowException("当前借款标不存在或已流标");
        return borrow;
    }
    

    @Override
    public boolean allowPublish(User user, BorrowModel model) {
        BorrowWorker worker = BorrowHelper.getWorker(model.prototype());
        boolean allowPublish = worker.allowPublish(user);
        return allowPublish;
    }

    @Override
    public void updateLoan(BorrowModel model, User user, Borrow oldBorrow, List<BorrowUpload> list, List<BorrowMortgage> borrowMortgageList, long[] delIds, long[] delMortgageIds) {
        BorrowWorker worker = BorrowHelper.getWorker(model.prototype());
        worker.checkModelData();
        worker.setBorrowField(user);  
        
        Borrow b = worker.prototype();
        if(null != model.getVouchFirm()){
        	b.setVouchFirm(model.getVouchFirm());
        }else{
        	b.setVouchFirm(null);
        }
      //JSDBET-798 wcw 2015-3-12 start
        Borrow borrowSelect=borrowDao.find(model.getId());
        if(borrowSelect!=null){
        	b.setTradeNo(borrowSelect.getTradeNo());
        	b.setBorrowManageFeeTradeNo(borrowSelect.getBorrowManageFeeTradeNo());
        }
        if(StringUtil.isBlank(b.getTradeNo())){
        	throw new BorrowException("订单号不能为空", 1);
        }
        //JSDBET-798 wcw 2015-3-12 end
        b.setId(oldBorrow.getId());
        b.setBorrowTimeType(model.getBorrowTimeType());
        b.setTimeLimit(model.getTimeLimit());
        b.setFixedTime(model.getFixedTime());
        if (borrowMortgageList != null) {
            borrowMortgageDao.save(borrowMortgageList);
        }
        if (delMortgageIds != null) {
            for (long id : delMortgageIds) {
                borrowMortgageDao.delete(id);
                List<BorrowUpload> bus = borrowUploadDao.findByMortgageId(id);
                for (BorrowUpload bu : bus) {
                    borrowUploadDao.delete(bu.getId());
                    String realPath = ServletActionContext.getServletContext().getRealPath(bu.getPicPath());
                    new File(realPath).delete();
                }
            }
        }
        if (delIds != null) {
            for (long id : delIds) {
                BorrowUpload bu = borrowUploadDao.find(id);
                borrowUploadDao.delete(id);
                String realPath = ServletActionContext.getServletContext().getRealPath(bu.getPicPath());
                new File(realPath).delete();
            }
        }
        if(model.getBorrowUpdateOrSave().equals("S")){
        	Borrow bByContract = worker.prototype();
        	bByContract.setId(0);
        	borrowDao.save(bByContract);
        }else{
        	
        	borrowDao.update(b);
        }
        borrowUploadDao.save(list);
    }

    @Override
    public void overduePayment(BorrowRepayment borrowRepayment) {
        Borrow borrow = borrowDao.find(borrowRepayment.getBorrow().getId());
        Account account = accountDao.findObjByProperty("user.userId", borrow.getUser().getUserId());
        BorrowWorker worker = BorrowHelper.getWorker(borrow);
        worker.validBeforeRepayment(borrowRepayment, account);

        // 计算逾期利息
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        Date nowTime = null;
        Date repaymentTime = null;
        try {
            nowTime = format.parse(DateUtil.dateStr2(new Date()));
            repaymentTime = format.parse(DateUtil.dateStr2(borrowRepayment.getRepaymentTime()));
        } catch (ParseException e) {
            e.printStackTrace();
        }
        long day = nowTime.getTime() - repaymentTime.getTime();
        int days = (int) (day / (24 * 60 * 60 * 1000));
        double lateInterest = 0;// 计算垫付到还款时逾期的利息
        if (days > 0) {
            String overdueFee = Global.getValue("overdue_fee");
            double overdue = Double.parseDouble(overdueFee);
            if (days <= 5) {
                double captial = borrowRepayment.getCapital();
                lateInterest = BigDecimalUtil.mul(BigDecimalUtil.mul(captial + borrowRepayment.getInterest(), days),
                        overdue); // 计算出逾期利息
                borrowRepayment.setLateDays(days);
                borrowRepayment.setLateInterest(lateInterest);
            } else if (days > 5) {
                double capital = borrowRepaymentDao.getRemainderCapital(borrow.getId());
                double interest = borrowRepaymentDao.getRemainderInterest(borrow.getId());
                lateInterest = BigDecimalUtil.mul(BigDecimalUtil.mul(capital + interest, days), overdue); // 计算出逾期利息
                borrowRepayment.setLateInterest(lateInterest);
            }
            borrowRepayment.setLateDays(days);
        }

        // 设置webstatus=1
        borrowRepayment.setWebStatus(1);
        borrowRepayment = borrowRepaymentDao.update(borrowRepayment);
        double repayMoney = borrowRepayment.getRepaymentAccount();
        double lateMoney = lateInterest;
        // 定时算展期利息
        double extensionInterest = borrowRepayment.getExtensionInterest();
        double freezeVal = 0;
        freezeVal = BigDecimalUtil.add(repayMoney, lateMoney, extensionInterest);

        Global.setTransfer("money", freezeVal);
        Global.setTransfer("borrow", borrow);
        Global.setTransfer("repay", borrowRepayment);
        AbstractExecuter executer = ExecuterHelper.doExecuter("borrowRepayFreezeExecuter");
        executer.execute(freezeVal, borrow.getUser());
        DisruptorUtils.overduePayment(borrowRepayment);
    }

    @Override
    public List<BorrowUpload> findPicByBorrowId(long id) {
        QueryParam param = QueryParam.getInstance().addParam("borrow.id", id);
        return borrowUploadDao.findByCriteria(param);
    }

    @Override
    public List<Borrow> businessBid(User user) {
        QueryParam param = QueryParam.getInstance();
        param.addParam("user.userId", user.getUserId());
        param.addParam("status", 1);
        param.addOrder(OrderType.DESC, "addTime");
        List<Borrow> list = borrowDao.findByCriteria(param, 0, 3);
        return list;
    }

    @Override
    public List<BorrowModel> businessRepayment(User user) {
        QueryParam param = QueryParam.getInstance();
        param.addParam("user.userId", user.getUserId());
        SearchFilter filter1 = new SearchFilter("status", Operators.EQ, 6);
        SearchFilter filter2 = new SearchFilter("status", Operators.EQ, 7);
        param.addOrFilter(filter1, filter2);
        param.addOrder(OrderType.DESC, "addTime");
        List<Borrow> list = borrowDao.findByCriteria(param, 0, 4);
        List<BorrowModel> modelList = new ArrayList<BorrowModel>();
        for(Borrow item : list){
           BorrowModel model = BorrowModel.instance(item);
           int currPeriod = borrowRepaymentDao.getCurrPeriod(item.getId());
           model.setCurrPeriod(currPeriod);
           modelList.add(model);
        }
        return modelList;
    }

    @Override
    public int findByStatusAndUserId(long userId, int status1, int status2) {
        return borrowDao.findByStatusAndUserId(userId, status1, status2);
    }

    @Override
    public double findAccountTotalByStatus(long userId, int status1, int status2) {
        return borrowDao.findAccountTotalByStatus(userId, status1, status2);
    }

    @Override
    public List<BorrowModel> investList(User user) {
        VerifyLogDao verifyLogDao = (VerifyLogDao) BeanUtil.getBean("verifyLogDao");
        List<Borrow> itemList = borrowDao.getMemberInvestList(user);
        List<BorrowModel> modelList = new ArrayList<BorrowModel>();
        if (itemList != null && itemList.size() > 0) {
            for (int i = 0; i < itemList.size(); i++) {
                Borrow borrow = itemList.get(i);
                BorrowModel bm = BorrowModel.instance(borrow);
                try {
                    bm.setUserName(borrow.getUser().getUserName());
                    bm.setUserId(borrow.getUser().getUserId());
                } catch (Exception e) {
                    bm.setUserName("<font color='red'>该用户被删除</font>");
                    bm.setUserId(0);
                }

                VerifyLog log = verifyLogDao.findByType(borrow.getId(), "borrow", 1);
                if (log != null) {
                    bm.setStartTime(DateUtil.dateStr4(log.getTime()));
                }
                bm.setUser(null);
                modelList.add(bm);
            }
        }
        return modelList;
    }

    @Override
    public boolean isExistDealNo(String dealNo) {
        Borrow b = borrowDao.findObjByProperty("dealParent", dealNo);
        if (b == null) {
            return false;
        }
        return true;
    }

    @Override
    public void updatePic(List<BorrowUpload> list, long[] delIds) {
        borrowUploadDao.save(list);
        if (delIds != null) {
            for (long id : delIds) {
                BorrowUpload bu = borrowUploadDao.find(id);
                borrowUploadDao.delete(id);
                String realPath = ServletActionContext.getServletContext().getRealPath(bu.getPicPath());
                new File(realPath).delete();
            }
        }
    }

    @Override
    public Double getBorrowAccountByDate(String date) {
        
        return borrowDao.getBorrowAccountByDate(date);
    }

    @Override
    public int count() {
        return borrowDao.count();
    }
    
    @Override
    public int getGuaranteeingCount(long userId) {
        
        return borrowDao.getGuaranteeingCount(userId);
    }
    
    @Override
    public double getGuaranteeingAccount(long userId) {

        return borrowDao.getGuaranteeingAccount(userId);
    }
    
    @Override
    public int getNeedGuaranteeRegisteCount(long userId) {

        return borrowDao.getNeedGuaranteeRegisteCount(userId);
    }
    
    @Override
    public double getNeedGuaranteeRegisteAccount(long userId) {
        return borrowDao.getNeedGuaranteeRegisteAccount(userId);
    }
    
    
    @Override
    public int getOverdueCount(long userId) {
        return borrowRepaymentDao.getOverdueCount(userId);
    }
    
    @Override
    public List<BorrowModel> getNeedGuaranteeRegisteList(long userId) {
        
        List<Borrow> itemList = borrowDao.getNeedGuaranteeRegisteList(userId);
        List<BorrowModel> modelList = new ArrayList<BorrowModel>();
        if (itemList != null && itemList.size() > 0) {
            for (Borrow borrow : itemList) {
                BorrowModel bm = BorrowModel.instance(borrow);
                try {
                    bm.setUserName(borrow.getUser().getUserName());
                    bm.setUserId(borrow.getUser().getUserId());
                } catch (Exception e) {
                    bm.setUserName("");
                    bm.setUserId(0);
                }
                bm.setUser(null);
                modelList.add(bm);
            }
        }
        return modelList;
    }
    
    @Override
    public PageDataList<BorrowModel> getGuaranteeingList(BorrowModel model) {
        QueryParam param = QueryParam.getInstance();
        param.addPage(model.getPage(), model.getSize());
        if (StringUtil.isNotBlank(model.getName())) {
            param.addParam("name", Operators.LIKE, model.getName());
        }
        if (StringUtil.isNotBlank(model.getUserName())) {
            param.addParam("user.userName", Operators.LIKE, model.getUserName());
        }
        Date nowdate = DateUtil.getDate(System.currentTimeMillis()/1000 + "");
		if (model.getTime() == 7) {
			param.addParam("addTime", Operators.GTE,DateUtil.rollDay(nowdate, -7));
			param.addParam("addTime", Operators.LTE, nowdate);
		} else if (model.getTime() > 0 && model.getTime() < 4){
			param.addParam("addTime", Operators.GTE,DateUtil.rollMon(nowdate, -model.getTime()));
			param.addParam("addTime", Operators.LTE, nowdate);
		}
        if (StringUtil.isNotBlank(model.getStartTime())) {
            Date startTime = DateUtil.valueOf(model.getStartTime() + " 00:00:00");
            param.addParam("addTime", Operators.GT, startTime);
        }
        if (StringUtil.isNotBlank(model.getEndTime())) {
            Date endTime = DateUtil.valueOf(model.getEndTime() + " 23:59:59");
            param.addParam("addTime", Operators.LT, endTime);
        }
        param.addParam("vouchFirm", model.getVouchFirm());
        param.addParam("guaranteeRate", Operators.GT, 0);
//        SearchFilter orFilter1 = new SearchFilter("status", 1);
//        SearchFilter orFilter2 = new SearchFilter("status", 3);
//        SearchFilter orFilter3 = new SearchFilter("status", 6);
//        SearchFilter orFilter4 = new SearchFilter("status", 7);
//        param.addOrFilter(orFilter1, orFilter2, orFilter3, orFilter4);
        param.addOrder(OrderType.ASC, "id");
        PageDataList<Borrow> pageDataList = borrowDao.findPageList(param);
        PageDataList<BorrowModel> pageDataList_ = new PageDataList<BorrowModel>();
        List<BorrowModel> list = new ArrayList<BorrowModel>();
        pageDataList_.setPage(pageDataList.getPage());
        if (pageDataList.getList().size() > 0) {
            for (int i = 0; i < pageDataList.getList().size(); i++) {
                Borrow borrow = (Borrow) pageDataList.getList().get(i);
                BorrowModel borrowModel = BorrowModel.instance(borrow);
                borrowModel.setUserName(borrow.getUser().getUserName());
                borrowModel.setUser(null);
                //加入标的类型名称
                BorrowConfig bconfig = borrowConfigDao.find((long)borrowModel.getType());
                borrowModel.setTypeName(bconfig.getName());
                //加入标的状态
                borrowModel.setStatusNew(BorrowModel.convertBorrowStatus(borrow.getStatus(), borrowModel));
                list.add(borrowModel);
            }
        }
        pageDataList_.setList(list);
        return pageDataList_;
    }

    @Override
    public PageDataList<BorrowRepaymentModel> getUrgeGuaranteeList(String userId) {
        // TODO Auto-generated method stub
        return null;
    }

    
    @Override
    public PageDataList<BorrowRepaymentModel> getOverdueGuaranteeList(BorrowModel model) {
        
        PageDataList<BorrowRepayment> pageDataList = borrowRepaymentDao.getOverdueGuaranteeList(model);
        PageDataList<BorrowRepaymentModel> pageDateList = new PageDataList<BorrowRepaymentModel>();
        List<BorrowRepaymentModel> list = new ArrayList<BorrowRepaymentModel>();
        pageDateList.setPage(pageDataList.getPage());
        if (pageDataList.getList().size() > 0) {
            for (int i = 0; i < pageDataList.getList().size(); i++) {
                BorrowRepayment r = (BorrowRepayment) pageDataList.getList().get(i);
                BorrowRepaymentModel rm = BorrowRepaymentModel.instance(r);
                Borrow borrow = r.getBorrow();
                User user = r.getUser();
                
                rm.setAccount(borrow.getAccount());
                rm.setApr(borrow.getApr());
                rm.setAddTime(borrow.getAddTime());
                rm.setBorrowId(borrow.getId());
                rm.setBorrowName(borrow.getName());
                rm.setUserName(user.getUserName());
                rm.setRealName(user.getRealName());
                rm.setMobilePhone(user.getMobilePhone());
                rm.setTimeLimit(borrow.getTimeLimit());
                rm.setType(borrow.getType());
                rm.setBorrowType(borrow.getType());
                rm.setBorrowTimeType(borrow.getBorrowTimeType());
                rm.setBorrowStyle(borrow.getStyle()); 
                rm.setRepaymentAccount(BigDecimalUtil.add(r.getCapital(), r.getInterest(), r.getLateInterest()));
                rm.setBorrow(null);
                rm.setUser(null);
                list.add(rm);
            }
        }
        pageDateList.setList(list);
        return pageDateList;
    }

    @Override
    public PageDataList<BorrowRepaymentModel> getCompensatedList(BorrowModel model) {
        
        PageDataList<BorrowRepayment> pageDataList = borrowRepaymentDao.getCompensatedList(model);
        PageDataList<BorrowRepaymentModel> pageDateList = new PageDataList<BorrowRepaymentModel>();
        List<BorrowRepaymentModel> list = new ArrayList<BorrowRepaymentModel>();
        pageDateList.setPage(pageDataList.getPage());
        if (pageDataList.getList().size() > 0) {
            for (int i = 0; i < pageDataList.getList().size(); i++) {
                BorrowRepayment r = (BorrowRepayment) pageDataList.getList().get(i);
                BorrowRepaymentModel rm = BorrowRepaymentModel.instance(r);
                Borrow borrow = r.getBorrow();
                User user = r.getUser();                
                
                rm.setAddTime(borrow.getAddTime());
                rm.setBorrowId(borrow.getId());
                rm.setBorrowName(borrow.getName());
                rm.setUserName(user.getUserName());
                rm.setRealName(user.getRealName());
                rm.setMobilePhone(user.getMobilePhone());
                rm.setTimeLimit(borrow.getTimeLimit());
                rm.setType(borrow.getType());
                rm.setBorrowStyle(borrow.getStyle()); // 设置还款方式
                rm.setBorrow(null);
                rm.setUser(null);
                list.add(rm);
            }
        }
        pageDateList.setList(list);
        return pageDateList;
    }
    
    @Override
    public int getAllCount() {
        QueryParam param = QueryParam.getInstance();
        param.addParam("isTest", Operators.EQ, 0);
        return borrowDao.countByCriteria(param);
    }
    
    @Override
    public double getAllMomeny() {
        return borrowDao.getAllMomeny();
    }
    
    @Override
    public int getAllOverduedCount() {
        return borrowDao.getAllOverduedCount();
    }
    
    @Override
    public int getCountByStatus(int status) {
        QueryParam param = QueryParam.getInstance();
        param.addParam("status",  status);
        param.addParam("isTest", Operators.EQ, 0);
        return borrowDao.countByCriteria(param);
    }
    
    @Override
    public double getMomenyByStatus(int status) {
        return borrowDao.getMomenyByStatus(status);
    }
    @Override
    public double getMomenyByStatusType(int status, int type) {
    	return borrowDao.getMomenyByStatusType(status, type);
    }
    @Override
    public int getVerifyFullCount() {
        QueryParam param = QueryParam.getInstance();
        param.addParam("status",  1);
        param.addParam("scales",  100);
        param.addParam("isTest", Operators.EQ, 0);
        return borrowDao.countByCriteria(param);
    }
    
    @Override
    public double getVerifyFullMomeny() {
        return borrowDao.getVerifyFullMomeny();
    }
    
    @Override
    public int getAllOverdueingCount() {
        return borrowDao.getAllOverdueingCount();
    }
    
    @Override
    public double getAllOverduedMomeny() {
        return borrowDao.getAllOverduedMomeny();
    }
    
    @Override
    public double getAllOverdueingMomeny() {
        return borrowDao.getAllOverdueingMomeny();
    }

	@Override
	public PageDataList<Borrow> verifyBorrow(Borrow borrow, int currentPage,
			int pageSize) {
		// TODO Auto-generated method stub
		QueryParam param = QueryParam.getInstance().addPage(currentPage, pageSize).addParam("status", 0);
		PageDataList<Borrow> borrowPageList = borrowDao.findPageList(param);
		
		return borrowPageList;
	}

	@Override
	public void uploadMortgageByContract(Borrow borrow,
			List<BorrowUpload> list, List<BorrowMortgage> martgageList,
			long[] delIds, long[] delMortgageIds) {

	        if (martgageList != null) {
	            borrowMortgageDao.save(martgageList);
	        }
	        if (delMortgageIds != null) {
	            for (long id : delMortgageIds) {
	                borrowMortgageDao.delete(id);
	                List<BorrowUpload> bus = borrowUploadDao.findByMortgageId(id);
	                for (BorrowUpload bu : bus) {
	                    borrowUploadDao.delete(bu.getId());
	                    String realPath = ServletActionContext.getServletContext().getRealPath(bu.getPicPath());
	                    new File(realPath).delete();
	                }
	            }
	        }
	        if (delIds != null) {
	            for (long id : delIds) {
	                BorrowUpload bu = borrowUploadDao.find(id);
	                borrowUploadDao.delete(id);
	                String realPath = ServletActionContext.getServletContext().getRealPath(bu.getPicPath());
	                new File(realPath).delete();
	            }
	        }

	        borrowUploadDao.save(list);	
	}

	@Override
	public List<Borrow> findLoanListByDealParent(String dealParent,int borrowType) {
		// TODO Auto-generated method stub
		 //throw new BorrowException("当前借款标不存在或已流标");
        return borrowDao.findLoanListByDealParent(dealParent,borrowType);
	}
	
	@Override
	public List<Borrow> findLoanListByDealParent(String dealParent) {
		// TODO Auto-generated method stub
		//throw new BorrowException("当前借款标不存在或已流标");
		return borrowDao.findLoanListByDealParent(dealParent);
	}

	@Override
	public PageDataList<BorrowModel> getListOfBorrow(BorrowModel model) {

    	PageDataList<Borrow> pageDataList = borrowDao.getListOfBorrow(model);
        PageDataList<BorrowModel> pageDataList_ = new PageDataList<BorrowModel>();
        List<BorrowModel> list = new ArrayList<BorrowModel>();
        pageDataList_.setPage(pageDataList.getPage());
        VerifyLogDao verifyLogDao = (VerifyLogDao) BeanUtil.getBean("verifyLogDao");

        if (pageDataList.getList().size() > 0) {
            for (int i = 0; i < pageDataList.getList().size(); i++) {
                Borrow borrow = (Borrow) pageDataList.getList().get(i);
                BorrowModel bm = BorrowModel.instance(borrow);
                try {
                	DecimalFormat df = new DecimalFormat("#0.00");
                    bm.setUserName(borrow.getUser().getUserName());
                    bm.setUserId(borrow.getUser().getUserId());
                    BorrowConfig bconfig = borrowConfigDao.find((long)bm.getType());
                    bm.setTypeName(bconfig.getName());
                    
                    //用于展示和导出
                    bm.setAccountStr(df.format(borrow.getAccount()));//借款金额（用于显示和导出）
                    bm.setAprStr(df.format(borrow.getApr())+"%");//年利率
                    bm.setAccountYesStr(df.format(borrow.getAccountYes()));//实还总金额
                    bm.setScalesStr(df.format(borrow.getScales())+"%");//完成比例
                    //bm.setRepaymentAccountStr(df.format(borrow.getRepaymentAccount()));//应还本金
                    
                } catch (Exception e) {
                    bm.setUserName("<font color='red'>该用户被删除</font>");
                    bm.setUserId(0);
                }
                /*if(borrow.getUser().getUserCache().getCompanyType()!=null){
                	String name = "" ;
                    //独资企业:70,合伙企业:71,公司企业:72,个体工商户:73
                    if("70".equals(borrow.getUser().getUserCache().getCompanyType())){
                    	name="独资企业" ;
                    }
                    if("71".equals(borrow.getUser().getUserCache().getCompanyType())){
                    	name="合伙企业" ;
                    }
                    if("72".equals(borrow.getUser().getUserCache().getCompanyType())){
                    	name="公司企业" ;
                    }
                    if("73".equals(borrow.getUser().getUserCache().getCompanyType())){
                    	name="个体工商户" ;
                    }
                    bm.setCompanyType(name);
                }*/
                String name = "" ;
                if(model.getType() == Borrow.TYPE_MORTGAGE_ENERGY || model.getType() == Borrow.TYPE_NETWORK){
                	name = "企业经营";
                }
                if(model.getType() == Borrow.TYPE_MORTGAGE || model.getType() == Borrow.TYPE_AMORTIZE){
                	name = "个人经营";
                }
                bm.setCompanyType(name);
                VerifyLog log = verifyLogDao.findByType(borrow.getId(), "borrow", 1);
                if (log != null) {
                    Date d = log.getTime(); //初审时间
                    Calendar c = Calendar.getInstance();
                    c.setTime(d);
                    c.add(Calendar.DATE, borrow.getValidTime());
                    Calendar now = Calendar.getInstance();
                    now.setTime(new Date());
                    bm.setIsFlow(c.before(now));
                    bm.setStartTime(DateUtil.dateStr4(log.getTime()));
                }
                bm.setBorrowId(borrow.getId());
                bm.setUser(null);
                
                list.add(bm);
            }
        }
        pageDataList_.setList(list);
        return pageDataList_;
    
	}

	@Override
	public List<Borrow> findBorrowByStatus(long userId, List<Integer> idList) {
		
		QueryParam param = QueryParam.getInstance();
		UserCache userCache = userCacheDao.findByUserId(userId);
		if(userCache.getUserType().equals("11")){
			param.addParam("user.userId", userId);
			param.addParam("status", Operators.IN, idList);
		}
		
		if(userCache.getUserType().equals("12")){
			param.addParam("vouchFirm.userId", userId);
			param.addParam("status", Operators.IN, idList);
		}
		
		
		List<Borrow> borrowList = borrowDao.findByCriteria(param);
		
		return borrowList;
	}

	@Override
	public String borrowTotal(BorrowModel model) {
		
		return borrowDao.borrowTotal(model);
	}
	
	@Override
	public int borrowFulRecheckUserCount() {
		// TODO Auto-generated method stub
		return borrowDao.borrowFulRecheckUserCount();
	}

	@Override
	public List<Borrow> excelNewBorrowList(BorrowModel model) {
		//JSDP-116 sxy 2015-05-15 start
		return borrowDao.excelNewBorrowList(model);
		//JSDP-116 sxy 2015-05-15 start
	}
	@Override
	public List<Borrow> excelTenderPlanBorrowList(BorrowModel model) {
		//JSDP-116 sxy 2015-05-18 start
		return borrowDao.excelTenderPlanBorrowList(model);
		//JSDP-116 sxy 2015-05-18 start
	}
	
	//JSDP-116 fengguoqin 2015-05-19 start
		@Override
		public List<BorrowModel> excelListFlowBorrow(BorrowModel model) {
			return borrowDao.excelListFlowBorrow(model);
		}

		@Override
		public List<BorrowModel> excelListFullBorrow(BorrowModel model) {
			return borrowDao.excelListFullBorrow(model);
		}

		@Override
		public List<BorrowModel> excelListBorrow(BorrowModel model) {
			return borrowDao.excelListBorrow(model);
		}
		//JSDP-116 fengguoqin 2015-05-19 end
		//JSDP-165 xingjia 2015-05-26 start
		@Override
		public void updateDelayBorrow(Borrow borrow, int days) {
			BorrowWorker worker = BorrowHelper.getWorker(borrow);
	        worker.handleBorrowAfterPublish(borrow);
	        //修改初审时间
	        VerifyLog log = verifyLogDao.findByType(borrow.getId(), "borrow", 1);
	        log.setTime(DateUtil.rollDay(log.getTime(), days));
	        verifyLogDao.update(log);

	        borrowDao.update(borrow);
		}
		//JSDP-165 xingjia 2015-05-26 end
		
		
		@Override
		public List<Borrow> getBorrowList(BorrowModel bm){
			List<Borrow> list=new ArrayList<Borrow>();
			try {
				list = borrowDao.getListBorrow(bm);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				list=null;
			}
			return list;
		}
}
