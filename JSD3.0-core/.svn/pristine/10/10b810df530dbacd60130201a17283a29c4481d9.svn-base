package com.ddtkj.p2psys.goods.executer;

import com.ddtkj.p2psys.account.dao.AccountDao;
import com.ddtkj.p2psys.account.dao.AccountLogDao;
import com.ddtkj.p2psys.account.domain.Account;
import com.ddtkj.p2psys.account.domain.AccountLog;
import com.rongdu.common.util.BigDecimalUtil;
import com.rongdu.p2psys.account.exception.AccountException;
import com.rongdu.p2psys.core.Global;
import com.rongdu.p2psys.core.constant.Constant;
import com.rongdu.p2psys.core.executer.BaseExecuter;
import com.rongdu.p2psys.core.util.BeanUtil;
import com.rongdu.p2psys.user.dao.UserCacheDao;

/**
 * 分期宝用户手续费 （jira上编号：JSDBET-827）
 * 
 * @author wcw
 * @version 2.0
 * @since 2015-3-12  
 */
public class GoodsFeeExcuter extends BaseExecuter {

	protected AccountLogDao accountLogDao;
	protected AccountDao accountDao;
	protected UserCacheDao userCacheDao;
	private String accountLogType = Constant.FEE_FREEZE;

	@Override
	public String getAccountLogType() {
		return accountLogType;
	}

	@Override
	public void prepare() {
		accountLogDao = (AccountLogDao) BeanUtil.getBean("accountLogDao");
		accountDao = (AccountDao) BeanUtil.getBean("accountDao");
		userCacheDao = (UserCacheDao) BeanUtil.getBean("userCacheDao");
	}

	@Override
	public void addAccountLog() {
		Global.setTransfer("weburl", Global.getString("weburl"));
		Account account = accountDao.findObjByProperty("user.userId", this.user.getUserId());
		AccountLog log = new AccountLog(super.user, accountLogType, super.toUser);
		//操作金额
		log.setBorrowerRechargeMoney(borrowerRechargeMoney);
		log.setBorrowerEnterMoney(borrowerEnterMoney);
		//账户总额
		log.setAccountTotal(account.getAccountTotal());
		//账户多种可用
		log.setBorrowerEnterUsable(account.getBorrowerEnterUsable());
		log.setBorrowerRechargeUsable(account.getBorrowerRechargeUsable());
		//账户多种冻结
		log.setBorrowerFreezeUseEnter(account.getBorrowerFreezeUseEnter());
		log.setBorrowerFreezeUseRecharge(account.getBorrowerFreezeUseRecharge());
		//账户待收总额
		log.setCollectionTotal(account.getCollectionTotal());
		log.setRepaymentTotal(account.getRepaymentTotal());
		log.setRemark(this.getLogRemark());
		log.setPaymentsType((byte)0);
		accountLogDao.save(log);
	}

	@Override
	public void handleAccount() {
		//冻结分期宝手续费
		Account account = accountDao.getAccountByUserId(user.getUserId());
		// 冻结资金(手续费)
		account.setBorrowerFreezeUseRecharge(BigDecimalUtil.add(account.getBorrowerFreezeUseRecharge(),borrowerRechargeMoney));
		account.setBorrowerFreezeUseEnter(BigDecimalUtil.add(account.getBorrowerFreezeUseEnter(), borrowerEnterMoney));
		
		// 可用资金扣除(手续费)
		account.setBorrowerEnterUsable(BigDecimalUtil.sub(account.getBorrowerEnterUsable(), borrowerEnterMoney));
		account.setBorrowerRechargeUsable(BigDecimalUtil.sub(account.getBorrowerRechargeUsable(), borrowerRechargeMoney));
		
		if (account.getBorrowerUsableTotal() < 0) {
			throw new AccountException("可用金额不足,请先充值！", 1);
		}
		// 更新
		accountDao.update(account);
	}

	@Override
	public void handleAccountSum() {
		// TODO Auto-generated method stub

	}

	@Override
	public void handlePoints() {
		// TODO Auto-generated method stub

	}

	@Override
	public void handleNotice() {
		 
	}

	@Override
	public void addOperateLog() {
		// TODO Auto-generated method stub

	}

	@Override
	public void handleInterface() {
	/*	if (BaseTPPWay.isOpenApi()) {
			if(BaseTPPWay.apiCode().equals("1")){
				YjfService apiService = new YjfServiceImpl();
				Borrow borrow = (Borrow) Global.getTransfer().get("borrow");
				List<Object> taskList = new ArrayList<Object>();
				if (borrow.getType() == Borrow.TYPE_FLOW) {
					// 流转标直接打款
					apiService.flowBorrowLoan(money, super.user, borrow, super.toUser, taskList);
				} else {
					apiService.addTenderFreezeMoney(money,  super.user, borrow, super.toUser, taskList);
				}
				apiService.doApiTask(taskList);
			}else if(BaseTPPWay.apiCode().equals("2")){
				
			}
			
		}*/
	}

	@Override
	public void extend() {
		// TODO Auto-generated method stub

	}

}
