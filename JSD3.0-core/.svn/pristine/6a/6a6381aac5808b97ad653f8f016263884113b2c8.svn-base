package com.ddtkj.p2psys.account.model;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;

import com.ddtkj.p2psys.account.dao.AccountDao;
import com.ddtkj.p2psys.account.dao.AccountDrawCashDao;
import com.ddtkj.p2psys.account.domain.Account;
import com.ddtkj.p2psys.account.domain.AccountDraw;
import com.ddtkj.p2psys.errorlog.constant.ErrorLogConstant;
import com.ddtkj.p2psys.errorlog.exception.HandleException;
import com.ddtkj.p2psys.redpacket.dao.RpProduceDao;
import com.ddtkj.p2psys.redpacket.domain.RpProduce;
import com.ddtkj.p2psys.tpp.YmdTPPWay;
import com.ddtkj.p2psys.tpp.ymd.model.YmdCash;
import com.ddtkj.p2psys.tpp.ymd.model.YmdQuery;
import com.ddtkj.p2psys.tpp.ymd.model.YmdQueryBalance;
import com.ddtkj.p2psys.tpp.ymd.model.YmdQueryReturn;
import com.ddtkj.p2psys.tpp.ymd.model.YmdQueryReturnDetails;
import com.ddtkj.p2psys.user.constant.UserConstant;
import com.ddtkj.p2psys.user.domain.User;
import com.ddtkj.p2psys.user.exception.UserException;
import com.rongdu.common.exception.BussinessException;
import com.rongdu.common.util.BigDecimalUtil;
import com.rongdu.common.util.NumberUtil;
import com.rongdu.common.util.RSAUtil;
import com.rongdu.common.util.StringUtil;
import com.rongdu.common.util.code.MD5;
import com.rongdu.p2psys.account.domain.AccountBank;
import com.rongdu.p2psys.core.Global;
import com.rongdu.p2psys.core.constant.NoticeConstant;
import com.rongdu.p2psys.core.executer.AbstractExecuter;
import com.rongdu.p2psys.core.executer.ExecuterHelper;
import com.rongdu.p2psys.core.rule.RsaFormEncryptRuleCheck;
import com.rongdu.p2psys.core.rule.WithdrawCashRuleCheck;
import com.rongdu.p2psys.core.sms.sendMsg.BaseMsg;
import com.rongdu.p2psys.core.util.BeanUtil;
import com.rongdu.p2psys.core.util.ValidateUtil;
import com.rongdu.p2psys.tpp.TPPFactory;
import com.rongdu.p2psys.tpp.TPPWay;

/**
 * @描述：提现model
 * @作者:wangchangwei@ddtkj.com
 * @创建时间:  2014年12月17日 
 */
public class AccountDrawModel extends AccountDraw{
	private static final long serialVersionUID = -7231808408039913510L;
	Logger logger = Logger.getLogger(AccountDrawModel.class);
	/** 当前页码 */
	private int page;
	/** 每页总数 **/
	private int rows;
	/** 用户名 **/
	private String userName;
	/** 真实姓名 **/
	private String realName;
	/** 银行 **/
	private String bankName;
	/** 银行卡编号 **/
	private long bankId;
	/** 确认银行账号 */
	private String comfirmAccount;
	/** 交易密码 */
	private String payPwd;
	/** 手机验证码 */
	private String verifyCode;
	/** 开始时间 **/
	private String startTime;
	/** 结束时间 **/
	private String endTime;
	/** 审核备注 **/
	private String remark;
	/** 初审审核人 **/
	private String firstTrialUserName;
	/**复审审核人**/
	private String recheckUserName;
	/** 提现状态名 **/
    private String statusStr;
    
    private String bankProvinceName;//开户银行省
    private String bankCityName;//开户银行市
    private String userType;//用户类型
    
    private String drawAmountStr;//提现总额
    private String drawInAccountAmountStr;//到账金额
    private String drawFeeStr;//手续费
    
    // 2015年5月5日  孙晓勇
 	private String timeType;
 	public String getTimeType() {
 		return timeType;
 	}

 	public void setTimeType(String timeType) {
 		this.timeType = timeType;
 	}
 	// 2015年5月5日  孙晓勇
    
    public String getUserType() {
		return userType;
	}

	public void setUserType(String userType) {
		this.userType = userType;
	}

	/**
     * 提现时间值
     */
    private String addTimeStr;
    /**日期范围：0：全部，1：最近七天 2：最近一个月  3：最近两个月，4 最近三个月**/
    private int time;
    
    private String transData; //xml字符串
	/**
	 * 
	 * @param bank
	 * @return
	 */
	public AccountDraw prototype(AccountBank bank) {
		AccountDraw accountDraw = new AccountDraw(bank.getUser(), getDrawAmount());
		accountDraw.setBankNo(bank.getBankNo());
		accountDraw.setBankName(bank.getBank());
		accountDraw.setBankBranchName(bank.getBranch());
		accountDraw.setBankCity(bank.getCity());
		accountDraw.setBankProvince(bank.getProvince());
		accountDraw.setAddTime(new Date());
		accountDraw.setAddIp(Global.getIP());
		return accountDraw;
	}
	
	public static AccountDrawModel instance(AccountDraw draw) {
		AccountDrawModel drawModel = new AccountDrawModel();
		BeanUtils.copyProperties(draw, drawModel);
		return drawModel;
	}
	
	/**
	 *  验证手机验证码
	 */
	public void findDrawpwdValidMobile(String todo,User user) throws Exception{
		if (!ValidateUtil.checkPwdCode(todo+"_code", user.getUserName(), user.getUserId(), user.getMobilePhone(),todo, verifyCode)) {
			throw new UserException("校验码错误或已失效！", 1);
		}
		if (StringUtil.isBlank(this.verifyCode)) {
			throw new UserException("校验码为空！", 1);
		}
	}
	
	/**
	 * 验证用户交易密码
	 * @param user
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	public String validPaypwdModel(User user,int encrypt) throws UnsupportedEncodingException {
	
		if (StringUtil.isNotBlank(getPayPwd())) {
			if (StringUtil.isBlank(getPayPwd())) {
					throw new UserException("交易密码不能为空！", 1);
			} 
			RsaFormEncryptRuleCheck rsaCheck = (RsaFormEncryptRuleCheck) Global.getRuleCheck("rsaFormEncrypt");
			if (rsaCheck.enable_formEncrypt && encrypt == 1) {
			  payPwd = RSAUtil.getRSADecrypt(getPayPwd());
			}
			//fgq  JSDP-103 2015/5/13 start
			payPwd = URLDecoder.decode(payPwd.replaceAll("%", "%25"), "utf-8");
			//fgq  JSDP-103 2015/5/13 end
			if (!MD5.encode(payPwd).equals(user.getPaypwd())) {
				throw new UserException("交易密码不正确！", 1);
			}
		}
		return "OK";
	}
	
	public Map<String, Object> drawFee(Map<String, Object> map) {
		WithdrawCashRuleCheck rule = (WithdrawCashRuleCheck) Global
				.getRuleCheck("withdrawCash");
		double fee = 0;
		double drawAmount=(Double) (map.get("drawAmount")==null?"0.0":map.get("drawAmount"));
		//最大提现金额  暂时无
	   User u=(User) (map.get("user")==null?new User():map.get("user"));
	   AccountDao accountDao = (AccountDao) BeanUtil.getBean("accountDao");
	   Account account=accountDao.getAccountByUserId(u.getUserId());
	   double rechargeUsable=0;
	   double otherUsable=0;
	 /*  if("11".equals(u.getUserCache().getUserType())){
		   rechargeUsable=account.getBorrowerRechargeUsable();
		   otherUsable=BigDecimalUtil.sub(account.getBorrowerUsableTotal(),rechargeUsable);
	   }else{
		   rechargeUsable=account.getRechargeUsable();
		   otherUsable=BigDecimalUtil.sub(account.getUsableAccount(),rechargeUsable);
	   }*/
	   double useStaticRp=(Double) map.get("useStaticRp");
	   if("11".equals(u.getUserCache().getUserType())){
		   rechargeUsable=account.getBorrowerRechargeUsable();
		   otherUsable=BigDecimalUtil.sub(account.getBorrowerUsableTotal(),rechargeUsable);
	   }else{
		   rechargeUsable=account.getRechargeUsable();
		   otherUsable=BigDecimalUtil.sub(account.getUsableAccount(),rechargeUsable);
		   //JSDP-120 wcw 20150516 start
		   otherUsable=BigDecimalUtil.add(otherUsable,useStaticRp);
		   //JSDP-120 wcw 20150516 end
	   }
	   double currRecharge=0;
	   double currOther=0;
	   /*if(rechargeUsable>=drawAmount){
		   currRecharge=drawAmount;
	   }else{
		   currRecharge=rechargeUsable;
		   currOther=BigDecimalUtil.sub(drawAmount, rechargeUsable);
	   }*/
	   if(otherUsable>=drawAmount){
		   currOther=drawAmount;
	   }else{
		   currOther=otherUsable;
		   currRecharge=BigDecimalUtil.sub(drawAmount, currOther);
	   }
	   map.put("rechargeCash", currRecharge);
	   map.put("incomeCash", currOther);
	   Map<String, Map<String, Double>> map_=rule.calculateCashFee(map);
	   Map<String, Double> rechargeMap=new HashMap<String, Double>();
	   //充值相关
	   rechargeMap=map_.get("rechargeCash");
	   Map<String, Object> returnMap=new HashMap<String, Object>();
	   double rechargeCashFee=0;
	   double otherCashFee=0;
	   if(rechargeMap!=null){
		   double rechargeRequestMoney=rechargeMap.get("requestMoney");
		   double rechargeFeeRate=rechargeMap.get("feeRate");
		   rechargeCashFee=rechargeMap.get("cashFee");
		   double rechargeInAccountMoney=rechargeMap.get("usableMoney");
		   returnMap.put("rechargeRequestMoney", rechargeRequestMoney);
		   returnMap.put("rechargeFeeRate", rechargeFeeRate);
		   returnMap.put("rechargeCashFee", rechargeCashFee);
		   returnMap.put("rechargeInAccountMoney", rechargeInAccountMoney);
	   }
	   //除充值之外的其他
	   Map<String, Double> otherMap=new HashMap<String, Double>();
	   otherMap=map_.get("incomeCash");
	   if(otherMap!=null){
		   double otherRequestMoney=otherMap.get("requestMoney")==null?0.0:otherMap.get("requestMoney");
		   double otherFeeRate=otherMap.get("feeRate")==null?0.0:otherMap.get("feeRate");
		   otherCashFee=otherMap.get("cashFee")==null?0.0:otherMap.get("cashFee");
		   double otherInAccountMoney=otherMap.get("usableMoney")==null?0.0:otherMap.get("usableMoney");
		   returnMap.put("otherRequestMoney", otherRequestMoney);
		   returnMap.put("otherFeeRate", otherFeeRate);
		   returnMap.put("otherCashFee", otherCashFee);
		   returnMap.put("otherInAccountMoney", otherInAccountMoney);
	   }
	   //本次提现手续费   ---
	   fee=BigDecimalUtil.add(rechargeCashFee,otherCashFee);
	   //实际入账金额
	   double inAccount=BigDecimalUtil.sub(drawAmount, fee);
	   returnMap.put("drawFee", fee);
	   returnMap.put("inAccount", inAccount);
	   return returnMap;
	}
	 /**
     * 提现复审一之复审成功状态修改
     * @param drawMap
     * @return
     */
	public void  recheckDrawSuccess(Map<String, Object> drawMap){
		logger.info("提现复审一之复审成功状态修改业务开始");
		AccountDrawCashDao drawDao = (AccountDrawCashDao) BeanUtil.getBean("accountDrawCashDao");
		AccountDrawModel model= (AccountDrawModel) (drawMap.get("model")==null?new AccountDrawModel():drawMap.get("model"));
		if(model!=null&&model.getId()>0){
			//修改前提现状态
			String upBeforeStatus=(String) (drawMap.get("upBeforeStatus")==null?"0":drawMap.get("upBeforeStatus"));
			//修改后提现状态
			String upAfterStatus=(String) (drawMap.get("upAfterStatus")==null?"0":drawMap.get("upAfterStatus"));
			//通过id查询该次操作提现记录
			AccountDraw draw=drawDao.find(model.getId());
			if(draw!=null){
				User u=draw.getUser();
				if(u!=null){
					//校验一麻袋余额与提现金额
					checkYmdBalance(draw, u);
				    //先修改提现审核状态状态
			        drawDao.updateStatus(draw.getId(), upAfterStatus, upBeforeStatus);
			        //再修改其他内容
			        draw.setDrawHandleStatus(upAfterStatus);
				    draw.setRecheckOperId(model.getRecheckOperId());
				    draw.setRecheckFailRemark(model.getRecheckFailRemark());
				    draw.setRecheckTime(new Date());
				    drawDao.update(draw);
				    logger.info("提现复审real success");
				 }	
			 }
		}
		logger.info("提现复审一之复审成功状态修改业务结束");
	}
    /**
     * 提现复审二之等待银行转账本地业务处理
     * @param drawMap
     * @return
     */
	public void recheckDrawLocalhost(Map<String, Object> drawMap){
		logger.info("提现复审二之等待银行转账本地业务处理开始");
		AccountDrawCashDao drawDao = (AccountDrawCashDao) BeanUtil.getBean("accountDrawCashDao");
		RpProduceDao rpProduceDao = (RpProduceDao) BeanUtil.getBean("rpProduceDao");
		Map<String, Object> map=new HashMap<String, Object>();
		AccountDrawModel model= (AccountDrawModel) (drawMap.get("model")==null?new AccountDrawModel():drawMap.get("model"));
		if(model!=null&&model.getId()>0){
			//通过id查询该次操作提现记录
			AccountDraw draw=drawDao.find(model.getId());
			if(draw!=null){
				User u=draw.getUser();
				if(u!=null){
					Global.setTransfer("draw", draw);
					if(AccountDraw.DRAW_CASH_CHECK2_SUCCESS.equals(draw.getDrawHandleStatus())){
						//JSDBET-795 wcw 2015-3-10 start
						if(UserConstant.USER_SORT_INVESTOR.equals(u.getUserCache().getUserType())){
						    map=new HashMap<String, Object>();
				   			map.put("rechargeMoney", draw.getUseRecharge());
				   			map.put("awardMoney", draw.getUseAward());
				   			map.put("interestMoney", draw.getUseInterest());
				   			map.put("returnCapitalMoney", draw.getUseReturnMoney());
				   			AbstractExecuter executer = ExecuterHelper.doExecuter("drawYmdRequestSuccInvesterExecuter");
				   			executer.execute(map, draw.getUser());
				   			draw.setDrawHandleStatus(AccountDraw.DRAW_CASH_REQUEST_YMD_SUCCESS);

				   		    //更新静态红包状态：从冻结改为已使用
				   			List<RpProduce> list=rpProduceDao.list(u.getUserId(), RpProduce.RP_STATIC_RP_FREEZE, RpProduce.RP_STATIC);
			   			    if(list.size()>0){
					   			for(RpProduce r:list){
				   			    	rpProduceDao.updateStatus(r.getUser().getUserId(),RpProduce.RP_STATIC_RP_FREEZE , RpProduce.RP_STATIC_RP_ALREADY_USE, r.getId());
				   			    }
				   			}
				   	    }else{
				   		    map=new HashMap<String, Object>();
						    map.put("borrowerEnterMoney", draw.getBorrowerUseEnter());
						    map.put("borrowerRechargeMoney", draw.getBorrowerUseRecharge());
				   			AbstractExecuter executer = ExecuterHelper.doExecuter("drawYmdRequestSuccBorrowerExecuter");
				   			executer.execute(map, draw.getUser());
				   			draw.setDrawHandleStatus(AccountDraw.DRAW_CASH_REQUEST_YMD_SUCCESS);
				   	    }
						//JSDBET-795 wcw 2015-3-10 end
						//更新提现记录表
						drawDao.update(draw);
						}
				    
				    // 发送提现审核通知消息
				    Global.setTransfer("user", u);
				    Global.setTransfer("draw", draw);
				    BaseMsg msg = new BaseMsg(NoticeConstant.DRAW_RECHECK_SUCC);
				    msg.doEvent();
				 }	
			 }
		}
		logger.info("提现复审二之等待银行转账本地业务处理结束");
	}
	/**
	 * 提现复审二之等待银行转账汇潮转账业务处理
	 * @param drawMap
	 */
	public Map<String, Object> recheckDrawYmd(Map<String, Object> drawMap)throws Exception{
		logger.info("---提现复审二之等待银行转账汇潮转账业务处理开始----");
		AccountDrawCashDao drawDao = (AccountDrawCashDao) BeanUtil.getBean("accountDrawCashDao");
		RpProduceDao rpProduceDao = (RpProduceDao) BeanUtil.getBean("rpProduceDao");
		Map<String, Object> map=new HashMap<String, Object>();
		YmdCash ymdCash=new YmdCash();
		AccountDrawModel model= (AccountDrawModel) (drawMap.get("model")==null?new AccountDrawModel():drawMap.get("model"));
		if(model!=null&&model.getId()>0){
			AccountDraw draw=drawDao.find(model.getId());
			if(draw!=null){
				//先查询该提现订单是否已经存在于第三方
				YmdQuery ymdQuery=new YmdQuery();
				ymdQuery.setOutTradeNo(draw.getDrawTradeNo());
				YmdQueryReturn ymdQueryReturn=new YmdQueryReturn();
				ymdQueryReturn=YmdTPPWay.query(ymdQuery);
				List<YmdQueryReturnDetails> queryDetaillist=ymdQueryReturn.getList();
				if(queryDetaillist.size()==1) {
					ymdQueryReturn.setTradeStatus(queryDetaillist.get(0).getTradeStatus());
					if("00".equals(ymdQueryReturn.getResultCode())&&("66".equals(ymdQueryReturn.getTradeStatus())||"00".equals(ymdQueryReturn.getTradeStatus())||"88".equals(ymdQueryReturn.getTradeStatus()))){
						 ymdCash.setErrCode("0000");
						 map.put("ymdCash", ymdCash);
						 map.put("draw", draw);	
						 return map;
					}
				}
				//如果第三方提现订单不存在，则进行提现交易发送
				User u=draw.getUser();
				//向第三方发送提现请求
			    TPPWay way = TPPFactory.getTPPWay(null, u, null, draw.getDrawAmount()
						+ "", null);
			    ymdCash = (YmdCash) way.doNewCash(draw, u, 1,
						null, null, null);
			    if(!"0000".equals(ymdCash.getErrCode())){
				   throw new BussinessException(ymdCash.getErrMsg(ymdCash.getErrCode(), "一麻袋请求失败"), 1);
			    }
				map.put("ymdCash", ymdCash);
				map.put("draw", draw);	
				return map;
		    }
	    }
		logger.info("--提现复审二之等待银行转账汇潮转账业务处理结束2----");
		return null;
	}
	
	
	
	
	/**
     * 校验一麻袋账户余额是否大于提现金额
     * @param draw
     * @param u
     */
	private void checkYmdBalance(AccountDraw draw,User u){
		YmdQueryBalance ymdQueryBalance=new YmdQueryBalance();
		if(u!=null){
			try {
				ymdQueryBalance=YmdTPPWay.checkBalance(u.getUserName());
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if(!"00".equals(ymdQueryBalance.getErrCode())){
				//throw new BussinessException("汇潮"+ymdQueryBalance.getErrMsg(ymdQueryBalance.getStatus(), "一麻袋托管账户请求失败，请重新请求"),1);
				//JSDBET-812 gjh 2015-3-14 start
				throw new HandleException("汇潮"+ymdQueryBalance.getErrMsg(ymdQueryBalance.getStatus(), "一麻袋托管账户请求失败，请重新请求"),
						"提现静态红包转账失败",ErrorLogConstant.LEVEL_SERIOUS,ErrorLogConstant.TYPE_DRAW,
						ErrorLogConstant.CODE_DRAW_CHECK_TPOS,u,ErrorLogConstant.MODULE_ACCOUNT_DRAW,
						draw.getId(),1);
				//JSDBET-812 gjh 2015-3-14 end 
			}else{
				if(draw.getDrawAmount()<NumberUtil.getDouble2(ymdQueryBalance.getAmount())){
					throw new BussinessException("一麻袋余额小于提现金额，提现失败",1);
				}
			}
		}else{
			throw new BussinessException("用户为空，不能进行一麻袋余额查询","1");
		}
	}
	
	/**
     * 检验银行卡是否选择、提现金额是否大于提现阀值
     * @param draw
     * @param u
     */
	public void checkDrawAmount(AccountDrawModel model){
		if(model.getBankNo()==null ||"".equals(model.getBankNo())){
			throw  new UserException("请选择提现银行账户",1);
		}else  if(model.getDrawAmount()<100){
			throw  new UserException("提现金额必需大于100",1);
		}
	}
	public String getDrawAmountStr() {
		return drawAmountStr;
	}

	public void setDrawAmountStr(String drawAmountStr) {
		this.drawAmountStr = drawAmountStr;
	}

	public String getDrawInAccountAmountStr() {
		return drawInAccountAmountStr;
	}

	public void setDrawInAccountAmountStr(String drawInAccountAmountStr) {
		this.drawInAccountAmountStr = drawInAccountAmountStr;
	}

	public String getDrawFeeStr() {
		return drawFeeStr;
	}

	public void setDrawFeeStr(String drawFeeStr) {
		this.drawFeeStr = drawFeeStr;
	}

	public int getPage() {
		return page;
	}
	public void setPage(int page) {
		this.page = page;
	}
	public int getRows() {
		return rows;
	}
	public void setRows(int rows) {
		this.rows = rows;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public String getRealName() {
		return realName;
	}
	public void setRealName(String realName) {
		this.realName = realName;
	}
	public String getBankName() {
		return bankName;
	}
	public void setBankName(String bankName) {
		this.bankName = bankName;
	}
	public long getBankId() {
		return bankId;
	}
	public void setBankId(long bankId) {
		this.bankId = bankId;
	}
	public String getComfirmAccount() {
		return comfirmAccount;
	}
	public void setComfirmAccount(String comfirmAccount) {
		this.comfirmAccount = comfirmAccount;
	}
	public String getPayPwd() {
		return payPwd;
	}
	public void setPayPwd(String payPwd) {
		this.payPwd = payPwd;
	}
	public String getStartTime() {
		return startTime;
	}
	public void setStartTime(String startTime) {
		this.startTime = startTime;
	}
	public String getEndTime() {
		return endTime;
	}
	public void setEndTime(String endTime) {
		this.endTime = endTime;
	}
	public String getRemark() {
		return remark;
	}
	public void setRemark(String remark) {
		this.remark = remark;
	}
	public String getStatusStr() {
		return statusStr;
	}
	public void setStatusStr(String statusStr) {
		this.statusStr = statusStr;
	}
	public String getAddTimeStr() {
		return addTimeStr;
	}
	public void setAddTimeStr(String addTimeStr) {
		this.addTimeStr = addTimeStr;
	}
	public int getTime() {
		return time;
	}
	public void setTime(int time) {
		this.time = time;
	}
	public String getBankProvinceName() {
		return bankProvinceName;
	}

	public void setBankProvinceName(String bankProvinceName) {
		this.bankProvinceName = bankProvinceName;
	}

	public String getBankCityName() {
		return bankCityName;
	}

	public void setBankCityName(String bankCityName) {
		this.bankCityName = bankCityName;
	}

	public String getFirstTrialUserName() {
		return firstTrialUserName;
	}

	public void setFirstTrialUserName(String firstTrialUserName) {
		this.firstTrialUserName = firstTrialUserName;
	}

	public String getRecheckUserName() {
		return recheckUserName;
	}

	public void setRecheckUserName(String recheckUserName) {
		this.recheckUserName = recheckUserName;
	}

	public String getVerifyCode() {
		return verifyCode;
	}

	public void setVerifyCode(String verifyCode) {
		this.verifyCode = verifyCode;
	}

	public String getTransData() {
		return transData;
	}

	public void setTransData(String transData) {
		this.transData = transData;
	}



}
