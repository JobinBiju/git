package com.ddtkj.p2psys.webpetcard.service.impl;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.stereotype.Repository;

import com.ddtkj.p2psys.user.domain.User;
import com.ddtkj.p2psys.webpetcard.dao.PetCardDao;
import com.ddtkj.p2psys.webpetcard.dao.PetCardLogDao;
import com.ddtkj.p2psys.webpetcard.domain.PetCardLog;
import com.ddtkj.p2psys.webpetcard.model.PetCardLogModel;
import com.ddtkj.p2psys.webpetcard.service.PetCardLogService;
import com.rongdu.common.model.jpa.PageDataList;
import com.rongdu.common.model.jpa.QueryParam;
import com.rongdu.common.model.jpa.OrderFilter.OrderType;
import com.rongdu.common.model.jpa.SearchFilter.Operators;
import com.rongdu.common.util.BigDecimalUtil;
import com.rongdu.common.util.StringUtil;

/**
 * @描述：储值卡消费service实现类
 * @作者:xingjia@ddtkj.com
 * @创建时间:  2015年6月2日 
 * @JIRA JSDP-171 
 */
@Repository("petCardLogService")
public class PetCardLogServiceImpl implements PetCardLogService {
	@Resource
	private PetCardLogDao petCardLogDao;
	@PersistenceContext
	protected EntityManager em;
	@Resource
	private PetCardDao petCardDao;
	
	/**
	 * 
	 * 查询储蓄卡列表
	 * 
	 * @作者  孙晓勇
	 * @时间 2015年6月4日
	 * 
	 */
	@Override
	public PageDataList<PetCardLogModel> petCardLogList(int pageNumber, int pageSize,PetCardLogModel model) {
		
		QueryParam param = QueryParam.getInstance().addPage(pageNumber,pageSize);

		if (model != null) {
			/*// 批次号
			if(StringUtil.isNotBlank(model.getBatchNo())){
				param.addParam("batchNo", Operators.LIKE, model.getBatchNo()); 
			}
			// 卡号
			if(StringUtil.isNotBlank(model.getCardNo())){
				param.addParam("cardNo",  model.getCardNo()); 
			}*/
			// 用户名
			if(StringUtil.isNotBlank(model.getUserName())){
				param.addParam("userName", Operators.LIKE, model.getUserName()); 
			}
			// 状态
			if(StringUtil.isNotBlank(model.getStatus())){
				param.addParam("status", model.getStatus()); 
			}
			// 开始时间
			if(StringUtil.isNotBlank(model.getStartTime())){
				param.addParam("addTime", Operators.GTE, model.getStartTime()); 
			}
			// 结束时间
			if(StringUtil.isNotBlank(model.getEndTime())){
				param.addParam("addTime", Operators.LTE, model.getEndTime()); 
			}
			 
		}
		param.addOrder(OrderType.DESC, "id");

		PageDataList<PetCardLog> plist = petCardLogDao.findPageList(param);
		PageDataList<PetCardLogModel> dataList = new PageDataList<PetCardLogModel>();
		List<PetCardLogModel> list = new ArrayList<PetCardLogModel>();

		if (plist.getList().size() > 0) {
			for (int i = 0; i < plist.getList().size(); i++) {
				
				DecimalFormat df = new DecimalFormat("#0.00");
				
				PetCardLog petCardLog = (PetCardLog) plist.getList().get(i);
				PetCardLogModel petCardLogModel = new PetCardLogModel();
				petCardLogModel.setId(petCardLog.getId());
				//petCardLogModel.setBatchNo(petCardLog.getBatchNo());
				//petCardLogModel.setCardNo(petCardLog.getCardNo());
				petCardLogModel.setStatus(petCardLog.getStatus());
				//petCardLogModel.setMoney(Double.valueOf(df.format(petCardLog.getMoney())));
				/*petCardLogModel.setUserName(petCardLog.getUserName());
				petCardLogModel.setType(petCardLog.getType());
				petCardLogModel.setIsValid(petCardLog.getIsValid());
				petCardLogModel.setValidTime(petCardLog.getValidTime());
				petCardLogModel.setWinTime(petCardLog.getWinTime());
				petCardLogModel.setAddTime(petCardLog.getAddTime());
				petCardLogModel.setAddUser(petCardLog.getAddUser());
				*/

				list.add(petCardLogModel);
			}
		}

		dataList.setList(list);
		dataList.setPage(plist.getPage());
		return dataList;

		
	}


	@Override
	public PetCardLog getPetCardLogById(int id) {
		return petCardLogDao.find(id);
	}
	
	@Override
	public PageDataList<PetCardLog> petCardLogListForSQL(int pageNumber,
			int pageSize, PetCardLogModel model) {
		return petCardLogDao.petCardLogListForSQL(pageNumber, pageSize, model);
	}
	
	@Override
	public List<PetCardLog> excelPetCardLogList(PetCardLogModel model) {
		return petCardLogDao.excelPetCardLogList(model);
	}


	@Override
	public PetCardLog updateCardLog(PetCardLog log) {
		
		return petCardLogDao.update(log);
	}

	//JSDP-171 xingjia 20150609 start
	@Override
	public double petCardConsumeMoney(long userId) {
		
		return petCardLogDao.petCardConsumeMoney(userId);
	}
	//JSDP-171 xingjia 20150609 end


	/* (non-Javadoc)
	 * @see com.ddtkj.p2psys.webpetcard.service.PetCardLogService#petCardUseableMoney(com.ddtkj.p2psys.user.domain.User)
	 */
	@Override
	public double petCardUseableMoney(User user) {
		return petCardDao.getSumPetCardProduce(user.getUserId());
	}
}
