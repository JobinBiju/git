package com.rongdu.p2psys.user.dao.jdbc;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.Query;

import org.springframework.stereotype.Repository;

import com.rongdu.common.dao.jpa.BaseDaoImpl;
import com.rongdu.common.model.jpa.PageDataList;
import com.rongdu.common.model.jpa.QueryParam;
import com.rongdu.common.model.jpa.SearchFilter.Operators;
import com.rongdu.common.util.Page;
import com.rongdu.common.util.StringUtil;
import com.rongdu.p2psys.core.domain.Operator;
import com.rongdu.p2psys.user.dao.KefuChangeDao;
import com.rongdu.p2psys.user.domain.KefuRecord;
import com.rongdu.p2psys.user.model.KefuModel;
@Repository("kefuChangeDao")
public class KefuChangeDaoImpl extends BaseDaoImpl<KefuRecord> implements KefuChangeDao{

	@Override
	public int count(QueryParam param) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void verifyKefuRecord(long userId, long newKefuId) throws Exception {
		// TODO Auto-generated method stub
		
	}

	@Override
	public PageDataList<KefuModel> kefuRecordList(int pageNumber, int pageSize,
			KefuRecord model) throws Exception {
		// TODO Auto-generated method stub
		PageDataList<KefuRecord> pageDataList = findKefuList(pageNumber,pageSize,model);
		
		PageDataList<KefuModel> pageDataList_ = new PageDataList<KefuModel>();
		List<KefuModel> list = new ArrayList<KefuModel>();
		pageDataList_.setPage(pageDataList.getPage());
		if (pageDataList.getList().size() > 0) {
			for (int i = 0; i < pageDataList.getList().size(); i++) {
				KefuRecord kefuRecord = (KefuRecord) pageDataList.getList().get(i);
				KefuModel kefuModel = KefuModel.instance(kefuRecord);
				list.add(kefuModel);
			}
		}
		pageDataList_.setList(list);
        return pageDataList_;
	}

	@Override
	public KefuRecord getKefuRecordById(long id) throws Exception {
		// TODO Auto-generated method stub
		KefuRecord kefuRecord = super.find(id);
		
		return kefuRecord;
	}

	@Override
	public PageDataList<KefuRecord> findKefuList(int pageNumber, int pageSize, KefuRecord model)
			throws Exception {
		// TODO Auto-generated method stub
		
		PageDataList<KefuRecord> pageDataList = new PageDataList<KefuRecord>();
//        StringBuffer sb = new StringBuffer("select kfr.* from rd_kefu_record kfr");
        
        StringBuffer sb = new StringBuffer("SELECT kfr.* "
        		+ " FROM rd_kefu_record kfr,t_jsd_usert_jsd_user u ,s_operator p,t_jsd_user_cache uc "
        		+ " WHERE u.user_id=kfr.user_id AND p.id = kfr.new_kefu_id "
        		+ " AND uc.user_id=u.user_id AND uc.status=0 AND p.is_delete=FALSE ");
        
       
        if(null != model && 0 != model.getEventType()){
        	sb.append(" and kfr.event_type="+model.getEventType());
        }
        if(null != model && 0!= model.getVerifyResult()){
        	sb.append(" and kfr.verify_result = "+model.getVerifyResult());
        }

        Query query = em.createNativeQuery(sb.toString(), KefuRecord.class);
        Page page = new Page(query.getResultList().size(), pageNumber, pageSize);
        query.setFirstResult((pageNumber - 1) * pageSize);
        query.setMaxResults(pageSize);
        List<KefuRecord> list = query.getResultList();
        pageDataList.setList(list);
        pageDataList.setPage(page);
        return pageDataList;
	}

	@Override
	public void updateKefuRecord(KefuRecord kefuRecord) throws Exception {
		// TODO Auto-generated method stub
		super.update(kefuRecord);
	}

	@Override
	public PageDataList<KefuRecord> findKefuListByMap(int pageNumber,
			int pageSize,  Map<String, Object> map) throws Exception {
		// TODO Auto-generated method stub
		
		
		PageDataList<KefuRecord> pageDataList = new PageDataList<KefuRecord>();
//        StringBuffer sb = new StringBuffer("select kfr.* from rd_kefu_record kfr");
        
        StringBuffer sb = new StringBuffer("SELECT kfr.* "
        		+ " FROM rd_kefu_record kfr,t_jsd_user u ,s_operator p,t_jsd_user_cache uc "
        		+ " WHERE u.user_id=kfr.user_id AND p.id = kfr.new_kefu_id "
        		+ " AND uc.user_id=u.user_id AND u.islocked='NN' AND p.is_delete=FALSE ");
        
        
        KefuRecord model = (KefuRecord) map.get("model");
        String userName = (String) map.get("userName");
        String optName = (String) map.get("optName");
        if(null != model && 0 != model.getEventType()){
        	sb.append(" and kfr.event_type="+model.getEventType());
        }
        if(null != model && 0!= model.getVerifyResult()){
        	sb.append(" and kfr.verify_result = "+model.getVerifyResult());
        }
        if(null != userName){
        	sb.append(" and u.user_name like '%"+userName+"%'");
        }
        if(null != optName){
        	sb.append(" and p.user_name like '%"+optName+"%'");
        }
        sb.append(" ORDER BY id DESC");
        Query query = em.createNativeQuery(sb.toString(), KefuRecord.class);
        Page page = new Page(query.getResultList().size(), pageNumber, pageSize);
        query.setFirstResult((pageNumber - 1) * pageSize);
        query.setMaxResults(pageSize);
        List<KefuRecord> list = query.getResultList();
        pageDataList.setList(list);
        pageDataList.setPage(page);
        return pageDataList;
	}

	@Override
	public PageDataList<KefuModel> kefuRecordListByMap(int pageNumber, int pageSize,
			 Map<String, Object> map) throws Exception {
		// TODO Auto-generated method stub
		//QueryParam param = QueryParam.getInstance().addPage(pageNumber, pageSize);
		
		
		PageDataList<KefuRecord> pageDataList = findKefuListByMap(pageNumber,pageSize,map);
		
		PageDataList<KefuModel> pageDataList_ = new PageDataList<KefuModel>();
		List<KefuModel> list = new ArrayList<KefuModel>();
		pageDataList_.setPage(pageDataList.getPage());
		if (pageDataList.getList().size() > 0) {
			for (int i = 0; i < pageDataList.getList().size(); i++) {
				KefuRecord kefuRecord = (KefuRecord) pageDataList.getList().get(i);
				KefuModel kefuModel = KefuModel.instance(kefuRecord);
				list.add(kefuModel);
			}
		}
		pageDataList_.setList(list);
        return pageDataList_;
	}

	@Override
	public KefuRecord getKefuByUserIdAndType(Long userid, Long kefuid, int type)
			throws Exception {
		QueryParam param = QueryParam.getInstance();
		param.addParam("userId",userid);
		param.addParam("newKefuId", kefuid);
		param.addParam("eventType", type) ;
		param.addParam("verifyResult",Operators.NOTEQ,4) ;
		param.addParam("verifyResult",Operators.NOTEQ,2) ;
		return findByCriteriaForUnique(param);
	}
	//JSDP-116 fengguoqin 2015-05-19 start
	@Override
	public List<KefuModel> excelListChangeKF(KefuModel model) {
		StringBuffer sql = new StringBuffer();
		sql.append(" SELECT  kf.`id` ,u.`user_name`,op2.`no`,op2.`name`,");
		sql.append("  CASE kf.`event_type` WHEN '1'THEN  '更换'   WHEN '2'THEN  '投诉' ELSE '不确定' END  AS eventType, ");
		sql.append("  CASE kf.`verify_result` WHEN 5 THEN  '待审核' WHEN 1 THEN  '审核通过' WHEN 2  THEN  '审核通过'WHEN 3 THEN  '审核通过'  WHEN 4 THEN  '失效' ELSE '无状态' END  AS verifyResult, op.user_name vfUserName,");
		sql.append("  DATE_FORMAT( kf.`verify_time`,'%Y-%m-%d %T') verifyTime, ");
		sql.append("  DATE_FORMAT( kf.`add_time`,'%Y-%m-%d %T') addTimes,  ");
		sql.append("  kf.`add_ip`,kf.`remark`");
		sql.append("  FROM `t_jsd_user` u, ");
		sql.append("  `rd_kefu_record` kf   ");
		sql.append("  LEFT JOIN `s_operator` op ON kf.`verify_id` = op.id  ");
		sql.append("  LEFT JOIN `s_operator` op2 ON kf.new_kefu_id = op2.id ");
		sql.append("  WHERE kf.`user_id` = u.`user_id`");
		if(!StringUtil.isBlank(model.getUserName() )){
			sql.append("  AND u.user_name  like '%"+model.getUserName()+"%'  ");
		}
		if(!StringUtil.isBlank(model.getKefuName())){
			sql.append("  AND op2.`user_name` like '%"+model.getKefuName()+"%'  ");
		}
		if(!StringUtil.isBlank(model.getEventType()) && 99!=model.getEventType()){
			sql.append("  AND kf.event_type= '"+model.getEventType()+"'  ");
		}
		if(!StringUtil.isBlank(model.getVerifyResult()) && 99!=model.getVerifyResult()){
			sql.append("  AND kf.verify_result = '"+model.getVerifyResult()+"'  ");
		}
		sql.append("  ORDER BY kf.add_time DESC");
		
	      Query query = em.createNativeQuery(sql.toString());
	     
			List userList = query.getResultList();
			return userList;
			//JSDP-116 fengguoqin 2015-05-19 end
	}
}
