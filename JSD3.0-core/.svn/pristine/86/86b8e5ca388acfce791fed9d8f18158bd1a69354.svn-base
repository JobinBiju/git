package com.rongdu.p2psys.borrow.model.worker;

import java.util.Date;
import java.util.List;

import com.ddtkj.p2psys.account.domain.Account;
import com.ddtkj.p2psys.borrow.domain.BorrowTender;
import com.ddtkj.p2psys.user.domain.User;
import com.rongdu.p2psys.borrow.domain.Borrow;
import com.rongdu.p2psys.borrow.domain.BorrowCollection;
import com.rongdu.p2psys.borrow.domain.BorrowConfig;
import com.rongdu.p2psys.borrow.domain.BorrowRepayment;
import com.rongdu.p2psys.borrow.model.BorrowModel;
import com.rongdu.p2psys.borrow.model.interest.InterestCalculator;

/**
 * 封装Borrow业务处理接口
 * 
 * @author Administrator
 */
public interface BorrowWorker {

	/**
	 * @return
	 */
	Borrow prototype();

	/**
	 * @return
	 */
	BorrowConfig getBorrowConfig();

	/**
	 * @param user
	 */
	void setBorrowField(User user);

	/**
	 * 是否跳过初审
	 * 
	 * @param borrow
	 */
	void skipTrial(Borrow borrow);

	/**
	 * 
	 */
	void trial();

	/**
	 * 初审
	 */
	void verify();

	/**
	 * 撤回
	 */
	void revokeBorrow();
	
	/**
	 * 秒标初审不通过解冻资金
	 */
	void secondUnVerifyFreeze();

	/**
	 * 截标
	 */
	void stopBorrow();

	/**
	 * 是否跳过满表复审
	 */
	void skipReview();

	/**
	 * 计算借款标的利息
	 * 
	 * @return
	 */
	double calculateInterest();

	/**
	 * 计算借款标的利息
	 * 
	 * @return
	 */
	double calculateInterest(double validAccount);

	/**
	 * @return
	 */
	InterestCalculator interestCalculator();

	/**
	 * @param validAccount
	 * @return
	 */
	InterestCalculator interestCalculator(double validAccount);

	/**
	 * 计算借款标的手续费
	 * 
	 * @return
	 */
	double calculateBorrowFee();

	/**
	 * @return
	 */
	double calculateBorrowAward();

	/**
	 * @return
	 */
	BorrowRepayment[] getRepayment();

	/**
	 * @param period
	 * @return
	 */
	Date getRepayTime(int period);

	/**
	 * @param period
	 * @return
	 */
	Date getFlowRepayTime(int period);

	/**
	 * @return
	 */
	boolean isNeedRealName();

	/**
	 * @return
	 */
	boolean isNeedVIP();

	/**
	 * @return
	 */
	boolean isNeedEmail();

	/**
	 * @return
	 */
	boolean isNeedPhone();

	/**
	 * @return
	 */
	boolean isNeedVideo();

	/**
	 * @return
	 */
	boolean isNeedScene();

	/**
	 * @param u
	 * @return
	 */
	boolean checkIdentify(User u);

	/**
	 * @return
	 */
	boolean checkModelData();

	/**
	 * 是否最后一期
	 * 
	 * @param period 期数
	 * @return
	 */
	boolean isLastPeriod(int period);

	/**
	 * @return
	 */
	double getTransactionFee();

	/**
	 * @param tender
	 * @param ic
	 * @return
	 */
	List<BorrowCollection> createCollectionList(BorrowTender tender, InterestCalculator ic);

	/**
	 * @param tender
	 * @param period
	 * @return
	 */
	String calCollectionRepayTime(BorrowTender tender, int period);

	/**
	 * @param clist
	 * @return
	 */
	List<BorrowRepayment> createFlowRepaymentList(List<BorrowCollection> clist);

	/**
	 * 计算奖励情况
	 * 
	 * @return
	 */
	double calculateAward();

	/**
	 * @param account
	 * @return
	 */
	double calculateAward(double account);

	/**
	 * @return
	 */
	boolean allowFullSuccess();

	/**
	 * @param tender
	 */
	void prepareTender(BorrowTender tender);

	/**
	 * @param tender
	 * @return
	 */
	double validAccount(BorrowTender tender);

	/**
	 * @param user
	 * @return
	 */
	boolean allowPublish(User user);

	/**
	 * 发标前处理
	 * 
	 * @param borrow
	 * @param partAccount
	 * @return
	 */
	Borrow handleBorrowBeforePublish(Borrow borrow);

	/**
	 * 发标后处理
	 * 
	 * @param borrow
	 * @return
	 */
	Borrow handleBorrowAfterPublish(Borrow borrow);

	/**
	 * 投标前校验
	 * 
	 * @param model
	 * @param tenderNum
	 * @param user
	 * @param flow_count
	 * @return
	 */
	BorrowModel checkTenderBefore(BorrowModel model, double tenderNum, User user, int flow_count);

	/**
	 * 投标校验
	 * 
	 * @param tender
	 */
	void checkTender(BorrowTender tender);
	
	/**
	 * 环迅投标校验
	 * @param model
	 * @param tenderNum
	 * @param user
	 */
	void checkTender(BorrowModel model, double tenderNum, User user,String pwd);


	/**
	 * @param tender
	 * @param ic
	 * @return
	 */
	BorrowTender tenderSuccess(BorrowTender tender, InterestCalculator ic);

	/**
	 * 满标复审处理第三方接口
	 */
	void handleVerifyFull();
	
    /**
     * 满标复审通过后，处理tender、collection
     */
    void handleTenderAfterFullSuccess();	

	/**
	 * 满标复审通过后，处理borrow、repayment
	 */
	void handleBorrowAfterFullSuccess();

	/**
	 * 满标复审未通过后，处理tender
	 */
	void handleTenderAfterFullFail();

	/**
	 * 投标后立即生息，流转标
	 * 
	 * @param tender
	 */
	void immediateInterestAfterTender(BorrowTender tender);

	/**
	 * 投完标后立即还款，秒标、提前还息的几个
	 */
	void immediateRepayAfterTender();

	/**
	 * 
	 */
	void immediateInviteAwardAfterTender();

	/**
	 * 计算借款手续费
	 * 
	 * @return 借款手续费
	 */
	double getManageFee();

	/**
	 * 计算展期利息
	 * 
	 * @param borrowRepayment
	 * @return
	 */
	double calExtensionInterest(BorrowRepayment borrowRepayment);

	/**
	 * 还款前校验
	 * 
	 * @param borrowRepayment
	 * @param account
	 */
	void validBeforeRepayment(BorrowRepayment borrowRepayment, Account account);

	/**
	 * 还款 处理借款人资金
	 * 
	 * @param repay
	 */
	void borrowRepayHandleBorrow(BorrowRepayment repay);

	/**
	 * 还款 处理投资人资金
	 * 
	 * @param repay
	 */
	void borrowRepayHandleTender(BorrowRepayment repay);
	
	/**
	 * 还款 处理借款人资金(提前还款)
	 * @param repay
	 */
	public void borrowPriorRepayHandleBorrow(BorrowRepayment repay);
	
	/**
	 * 还款 处理投资人资金(提前还款)
	 * @param repay
	 */
	public void borrowPriorRepayHandleTender(BorrowRepayment repay);
	
    /**
     * 代偿前校验
     * 
     * @param borrowRepayment
     * @param account
     */
    void validBeforeCompensate(BorrowRepayment borrowRepayment);	

}
