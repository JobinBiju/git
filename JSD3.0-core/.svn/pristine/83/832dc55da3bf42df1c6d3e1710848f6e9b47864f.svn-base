package com.ddtkj.p2psys.account.dao.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.Query;

import org.springframework.stereotype.Repository;

import com.ddtkj.p2psys.account.dao.AccountRechargeDao;
import com.ddtkj.p2psys.account.domain.AccountRecharge;
import com.ddtkj.p2psys.account.model.AccountRechargeModel;
import com.ddtkj.p2psys.statistics.domain.StatisticsData;
import com.rongdu.common.dao.jpa.BaseDaoImpl;
import com.rongdu.common.model.jpa.PageDataList;
import com.rongdu.common.model.jpa.QueryParam;
import com.rongdu.common.util.DateUtil;
import com.rongdu.common.util.Page;
import com.rongdu.common.util.StringUtil;

/**
 * @描述：
 * @作者:wangchangwei@ddtkj.com
 * @创建时间: 2014年12月9日
 */
@Repository("ymdAccountRechargeDao")
public class AccountRechageDaoImpl extends BaseDaoImpl<AccountRecharge>
		implements AccountRechargeDao {

	@Override
	public AccountRecharge getRechargeByTradeno(String tradeNo) {
		QueryParam param = QueryParam.getInstance();
		param.addParam("tradeNo", tradeNo);
		return findByCriteriaForUnique(param);
	}

	@Override
	public int updateRecharge(String tradeStatus, String returnText,
			String tradeNo) {
		QueryParam param = QueryParam.getInstance();
		param.addParam("tradeStatus", tradeStatus);
		param.addParam("returnMsg", returnText);
		param.addParam("tradeNo", tradeNo);
		param.addParam("tradeStatus", 55);
		return countByCriteria(param);
	}

	@Override
	public AccountRechargeModel getRechargeSummary(long userId) {
		AccountRechargeModel model = new AccountRechargeModel();
		//String rechargeTotalSql = "SELECT SUM(recharge_amount) AS num FROM t_jsd_account_recharge WHERE trade_status='00' AND recharge_amount > 0 AND user_Id = :userId";
		//JSDP-160 - 充值金额未展示充值补单金额问题   gjh2015-5-11 start
		String rechargeTotalSql = "SELECT SUM(recharge_amount) AS num FROM t_jsd_account_recharge WHERE trade_status in('00','01') AND recharge_amount > 0 AND user_Id = :userId";
		//JSDP-160 - 充值金额未展示充值补单金额问题   gjh2015-5-11 end
		
		Query query = em.createNativeQuery(rechargeTotalSql).setParameter(
				"userId", userId);
		Object totalObj = query.getSingleResult();
		if (totalObj != null) {
			double rechargeTotal = Double.parseDouble(query.getSingleResult()
					.toString());
			model.setRechargeTotal(rechargeTotal);
		} 
		/*
		 * String onlineRechargeTotalSql =
		 * "SELECT SUM(money) AS num FROM rd_account_recharge WHERE status=1 AND (type=1 OR type=2) AND user_id = :userId"
		 * ; Query onlineQuery =
		 * em.createNativeQuery(onlineRechargeTotalSql).setParameter("userId",
		 * userId); Object onlineObj = onlineQuery.getSingleResult(); if
		 * (onlineObj != null) { double onlineRechargeTotal =
		 * Double.parseDouble(onlineQuery.getSingleResult().toString());
		 * model.setOnlineRechargeTotal(onlineRechargeTotal); } String
		 * offlineRechargeTotalSql =
		 * "SELECT SUM(money) AS num FROM rd_account_recharge WHERE status=1 AND type=3 AND user_id = :userId"
		 * ; Query offlineQuery =
		 * em.createNativeQuery(offlineRechargeTotalSql).setParameter("userId",
		 * userId); Object offlineObj = offlineQuery.getSingleResult(); if
		 * (offlineObj != null) { double offlineRechargeTotal =
		 * Double.parseDouble(offlineQuery.getSingleResult().toString());
		 * model.setOfflineRechargeTotal(offlineRechargeTotal); }
		 */
		return model;
	}
	
	
	@Override
	public AccountRechargeModel getRechargeSummaryByendTime(Date date,
			long userId) {
		AccountRechargeModel model = new AccountRechargeModel();
		//JSDP-160 - 充值金额未展示充值补单金额问题   gjh2015-5-25 start
		String rechargeTotalSql = "SELECT SUM(recharge_amount) AS num FROM t_jsd_account_recharge WHERE trade_status in('00','01') AND recharge_amount > 0 AND add_time <= :addTime AND user_Id = :userId";
		//JSDP-160 - 充值金额未展示充值补单金额问题   gjh2015-5-25 end
		Query query = em.createNativeQuery(rechargeTotalSql).setParameter("addTime", date).setParameter(
				"userId", userId);
		Object totalObj = query.getSingleResult();
		if (totalObj != null) {
			double rechargeTotal = Double.parseDouble(query.getSingleResult()
					.toString());
			model.setRechargeTotal(rechargeTotal);
		}
		return model;
	}
	
	
	/**
	 * 查询充值用户数(充值过至少一次的未注销的用户)
	 * @author sunxiaoyong 2014年12月25日
	 */
	@Override
	public int rechargedUserCount(String islocked) {
		//JSDP-160 - 充值金额未展示充值补单金额问题   gjh2015-5-25 start
		String rechargeTotalSql = "SELECT COUNT(DISTINCT t1.user_id) FROM t_jsd_account_recharge AS t1,t_jsd_user AS t2 WHERE t1.trade_status in('00','01') AND t1.recharge_amount > 0 AND t2.islocked != :Islocked";
		//JSDP-160 - 充值金额未展示充值补单金额问题   gjh2015-5-25 end
		Query query = em.createNativeQuery(rechargeTotalSql).setParameter(
				"Islocked", islocked);
		Object totalObj = query.getSingleResult();
		int rechargeTotal = 0;
		if (totalObj != null) {
			
			rechargeTotal = (int)Double.parseDouble(query.getSingleResult().toString());
			
		}
		return rechargeTotal;
	}

	@Override
	public double getRechargeToday(long userId) {

		//String rechargeTotalSql = "SELECT SUM(draw_amount) AS num FROM t_jsd_account_draw WHERE draw_handle_status='30' AND draw_amount > 0 AND date(add_time) = curdate() AND user_Id = :userId";
		//JSDP-160 - 充值金额未展示充值补单金额问题   gjh2015-5-25 start
		String rechargeTotalSql = "SELECT SUM(recharge_amount) FROM t_jsd_account_recharge WHERE trade_status in('00','01') AND DATE(add_time) = CURDATE() AND user_Id = :userId ";
		//JSDP-160 - 充值金额未展示充值补单金额问题   gjh2015-5-25 end
		Query query = em.createNativeQuery(rechargeTotalSql).setParameter(
				"userId", userId);
		Object rechargeToday = (Object)query.getSingleResult();	
		if(rechargeToday !=null){	
		return 	Double.parseDouble(query.getSingleResult().toString());
		}
		return 0.0;
	}

	@Override
	public int count(int tradeStatus) {
		QueryParam param = QueryParam.getInstance().addParam("tradeStatus",
				tradeStatus);
		return countByCriteria(param);
	}

	/**
	 * 查询累计充值成功金额数——投资人
	 * @author 孙晓勇 2014年12月25日
	 */
	@Override
	public double rechargedAllMomeny() {
		//JSDP-160 - 充值金额未展示充值补单金额问题   gjh2015-5-25 start
		String sql = "SELECT SUM(t1.recharge_amount) AS num FROM t_jsd_account_recharge t1,t_jsd_user_cache t2 WHERE t1.user_id = t2.user_id AND t1.trade_status in('00','01') AND t1.recharge_amount > 0 AND t2.user_type = '10'";
		//JSDP-160 - 充值金额未展示充值补单金额问题   gjh2015-5-25 
        Query query = em.createNativeQuery(sql);
        Object obj = query.getSingleResult();
        if (obj != null) {
            return Double.parseDouble(obj.toString());
        }
        return 0;
	}
	
	
	/**
	 * 查询充值成功用户数——投资人(充值过至少一次的未注销的用户)
	 * @author 孙晓勇
	 */
	@Override
	public int rechargedTenderUserCount() {
		//JSDP-160 - 充值金额未展示充值补单金额问题   gjh2015-5-25 start
		String sql = "SELECT COUNT(DISTINCT t1.user_id) AS num FROM t_jsd_account_recharge t1,t_jsd_user_cache t2,t_jsd_user t3 WHERE t1.user_id = t2.user_id AND t1.trade_status in('00','01') AND t1.recharge_amount > 0 AND t2.user_type = '10'";
		//JSDP-160 - 充值金额未展示充值补单金额问题   gjh2015-5-25 end
		Query query = em.createNativeQuery(sql);
        Object obj = query.getSingleResult();
        if (obj != null) {
            return (int) Double.parseDouble(obj.toString());
        }
        return 0;
	}

	@Override
	public List<AccountRechargeModel> rechargeTotal(AccountRechargeModel model) {
		StringBuffer sql = new StringBuffer("SELECT SUM(r.recharge_amount),r.trade_status FROM t_jsd_account_recharge r ,"
				+ "t_jsd_user u,t_jsd_user_cache uc WHERE r.user_id=u.user_id AND r.user_id=uc.user_id ");
		if(StringUtil.isNotBlank(model.getUserName())){
			sql.append(" and u.user_name like '%"+model.getUserName()+"%' ");
		}
		if(StringUtil.isNotBlank(model.getUserType())){
			sql.append(" and uc.user_type=:userType ");
		}
		if(StringUtil.isNotBlank(model.getRechargeType())){
			sql.append(" and r.recharge_type=:rechargeType ");
		}
		if(StringUtil.isNotBlank(model.getRealName())){
			sql.append(" and u.real_name = :realName");
		}
		if(!model.getTradeStatus().equals("66")){
			sql.append(" and r.trade_status = :tradeStatus");
		}
		if(StringUtil.isNotBlank(model.getTradeNo())){
			sql.append(" and r.trade_no =:tradeNo ");
		}
		// JSDP-208 sxy 20150703 start
		if(StringUtil.isNotBlank(model.getRechargeWay())){
			sql.append(" and r.recharge_way = '"+model.getRechargeWay()+"' ");
		}
		// JSDP-208 sxy 20150703 start
		if(StringUtil.isNotBlank(model.getStartTime())){
			sql.append(" and r.add_time >= :startTime ");
		}
		if(StringUtil.isNotBlank(model.getEndTime())){
			sql.append(" and r.add_time <= :endTime ");
		}
		sql.append(" group by r.trade_status ");
		Query query = em.createNativeQuery(sql.toString());
		
		if(StringUtil.isNotBlank(model.getUserType())){
			query.setParameter("userType", model.getUserType());
		}
		if(StringUtil.isNotBlank(model.getRealName())){
			query.setParameter("realName", model.getRealName());
		}
		if(!model.getTradeStatus().equals("66")){
			query.setParameter("tradeStatus", model.getTradeStatus());
		}
		if(StringUtil.isNotBlank(model.getRechargeType())){
			query.setParameter("rechargeType", model.getRechargeType());
		}
		if(StringUtil.isNotBlank(model.getTradeNo())){
			query.setParameter("tradeNo", model.getTradeNo());
		}
		if(StringUtil.isNotBlank(model.getStartTime())){
			query.setParameter("startTime", model.getStartTime());
		}
		if(StringUtil.isNotBlank(model.getEndTime())){
			query.setParameter("endTime", model.getEndTime());
		}
		List<AccountRechargeModel> rechargeList = new ArrayList<AccountRechargeModel>();
		List rechargeListSum = query.getResultList();
		AccountRechargeModel recharge = new AccountRechargeModel();
		Object[] obj = new Object[rechargeListSum.size()];
		for(int i=0;i<rechargeListSum.size();i++){
			obj = (Object[]) rechargeListSum.get(i);
			
			//JSDP-175 xingjia 20150610 start
			// 充值成功 
			if((null != obj[1] && obj[1].equals(AccountRecharge.RECHARGE_SUCCESS_STATUS))){
				recharge.setRechargeSucSum(Double.parseDouble(obj[0].toString()));
			}
			//补单成功
			if((null != obj[1] && obj[1].equals(AccountRecharge.RECHARGE_REPAIR_SUCCESS_STATUS))){
				recharge.setSupplyRechargeSucSum(Double.parseDouble(obj[0].toString()));
			}
			//JSDP-175 xingjia 20150610 end
			if(null != obj[1] && obj[1].equals(AccountRecharge.RECHARGE_FAIL_STATUS)){
				recharge.setRechargeFailSum(Double.parseDouble(obj[0].toString()));
			}
			if(null != obj[1] && obj[1].equals(AccountRecharge.RECHARGE_APPLY_STATUS)){
				recharge.setRechargeIngSum(Double.parseDouble(obj[0].toString()));
			}
		}
		rechargeList.add(recharge);
		
		return rechargeList;
	}
	
	
	// JSDPBUG-99 20150505  sxy
	@Override
	public PageDataList<AccountRechargeModel> rechargeMoneyStatisticsList(AccountRechargeModel model, int pageNumber, int pageSize) {
		
		
		StringBuffer sb = new StringBuffer();
		
		QueryParam param = QueryParam.getInstance();
		//JSDP-160 - 充值金额未展示充值补单金额问题   gjh2015-5-25 start
		sb.append(" SELECT * FROM t_jsd_account_recharge t1 WHERE t1.trade_status in('00','01') ");
		//JSDP-160 - 充值金额未展示充值补单金额问题   gjh2015-5-25 end
		
		if(StringUtil.isNotBlank(model.getTimeType())){
			
			if("yesterday".equals(model.getTimeType())){
				sb.append(" AND DATE_FORMAT(t1.add_time,'%y-%m-%d') = DATE_FORMAT(DATE_SUB(NOW(),INTERVAL 1 DAY),'%y-%m-%d')  ");
			}
			if("today".equals(model.getTimeType())){
				sb.append(" AND DATE_FORMAT(t1.add_time,'%y-%m-%d') = DATE_FORMAT(NOW(),'%y-%m-%d') ");
			}
			if("week".equals(model.getTimeType())){
				sb.append(" AND DATE_FORMAT(t1.add_time,'%y-%m-%d')  BETWEEN  DATE_FORMAT(DATE_SUB(NOW(),INTERVAL 7 DAY),'%y-%m-%d') AND DATE_FORMAT(NOW(),'%y-%m-%d') ");
			}
			if("month".equals(model.getTimeType())){
				sb.append(" AND DATE_FORMAT(t1.add_time,'%Y-%m')=DATE_FORMAT(NOW(),'%Y-%m') ");
			}
			// 时间段
			if("area".equals(model.getTimeType())){
				if(null != model.getStartTime() && null != model.getEndTime()){
					sb.append(" AND DATE_FORMAT(t1.add_time,'%y-%m-%d')  BETWEEN  DATE_FORMAT("+model.getStartTime()+",'%y-%m-%d') AND DATE_FORMAT("+model.getEndTime()+",'%y-%m-%d') ");
				}
			}

		}
		
		Query query = em.createNativeQuery(sb.toString(), AccountRecharge.class);
        Page page = new Page(query.getResultList().size(), pageNumber, pageSize);
        query.setFirstResult((pageNumber - 1) * pageSize);
        query.setMaxResults(pageSize);
        List<AccountRechargeModel> list = query.getResultList();
        System.out.println(list.size());
        
        
        PageDataList<AccountRechargeModel> pageDataList = new PageDataList<AccountRechargeModel>();
        /*
        if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				AccountRecharge recharge = list.get(i);
				AccountRechargeModel rechargeModel = new AccountRechargeModel();
				BeanUtils.copyProperties(recharge, rechargeModel);
				rechargeModel.setAddTimeStr(DateUtil.dateStr4(recharge.getAddTime()));
				rechargeModel.setTypeStr("");
				
				rechargeModel.setUserName(recharge.getUser().getUserName());
				
				
				System.out.println("用户名==="+recharge.getUser().getUserName());
				
				
				list.add(rechargeModel);
			}
		}
        
        
        */
        
        pageDataList.setList(list);
        pageDataList.setPage(page);
        return pageDataList;
		
		////
		/*
		PageDataList<AccountRecharge> pageDateList = findPageListBySql(sb.toString(),param);
		PageDataList<AccountRechargeModel> pageDateList_ = new PageDataList<AccountRechargeModel>();
		List<AccountRechargeModel> list = new ArrayList<AccountRechargeModel>();
		if (pageDateList.getList().size() > 0) {
			for (int i = 0; i < pageDateList.getList().size(); i++) {
				AccountRecharge recharge = (AccountRecharge) pageDateList.getList().get(i);
				AccountRechargeModel arm = new AccountRechargeModel();
				BeanUtils.copyProperties(recharge, arm);
				arm.setAddTimeStr(DateUtil.dateStr4(recharge.getAddTime()));
				arm.setTypeStr("");
				list.add(arm);
			}
		}
		pageDateList_.setPage(pageDateList.getPage());
		pageDateList_.setList(list);
		return pageDateList_;
		
		
		*/
		
		
		////
		
		/*PageDataList<AccountRechargeModel> pageDateList_ = new PageDataList<AccountRechargeModel>();
		List<AccountRechargeModel> list = new ArrayList<AccountRechargeModel>();
		DecimalFormat df =new DecimalFormat("#0.00");
		
		if (pageDataList.getList().size() > 0) {
			for (int i = 0; i < pageDataList.getList().size(); i++) {
				AccountRecharge recharge = (AccountRecharge) pageDataList.getList().get(i);
				AccountRechargeModel arm = new AccountRechargeModel();
				BeanUtils.copyProperties(recharge, arm);
			
				arm.setAddTimeStr(DateUtil.dateStr4(recharge.getAddTime()));
				arm.setTypeStr("");
				arm.setUserName(recharge.getUser().getUserName());
				arm.setRealName(recharge.getUser().getRealName());
				arm.setUserType(recharge.getUser().getUserCache().getUserType());
				arm.setInAccountamountStr(df.format(recharge.getInAccountAmount()));
				arm.setAccountFeeStr(df.format(recharge.getRechargeFee()));
				arm.setStatusStr(arm.getStatusStr());

				list.add(arm);
			}
		}
		
		pageDateList_.setPage(pageDataList.getPage());
		pageDateList_.setList(list);
		return pageDateList_;*/
		
		
	}

	@Override
	public List excelRechargeList(AccountRechargeModel model) {
		
		StringBuffer sql = new StringBuffer();
		
		
		
		
		if(model.getRechargeType().equals("1")){
			sql.append("SELECT ar.trade_no,u.user_name,u.real_name,ar.in_account_amount,ar.recharge_fee,ar.add_time,"
					+" CASE ar.trade_status"
					+" WHEN 00 THEN '充值转账成功'"
					+" WHEN 55 THEN '充值转账提交中'"
					+" WHEN 99 THEN '充值转账失败'"
					+" WHEN 52 THEN '充值转账审核中'"
					+" WHEN 53 THEN '充值转账审核失败'"
					+" WHEN 01 THEN '补单转账成功'"
					+" ELSE '无' END FROM t_jsd_account_recharge ar,t_jsd_user u WHERE u.user_id=ar.user_id");
		}else{
			
			sql.append("SELECT ar.trade_no tradeNo,CASE uc.user_type WHEN 10 THEN '投资人'"
					+ " WHEN 11 THEN '借款人' WHEN 12 THEN '担保公司' WHEN 13 THEN '商城用户'"
					+ " ELSE '无' END userType,u.user_name userName,u.real_name realName,"
					+ "ar.in_account_amount inAccount,ar.recharge_fee rechargeFee,ar.add_time ADDTIME,"
					+ " CASE ar.trade_status WHEN 00 THEN '成功' WHEN 01 THEN '补单成功' WHEN 99 THEN '失败'"
					+ " WHEN 55 THEN '充值中' ELSE '无'END tradeStatus FROM t_jsd_account_recharge ar,"
					+ "t_jsd_user u,t_jsd_user_cache uc WHERE u.user_id=ar.user_Id AND u.user_id=uc.user_id");
		}
		
		
		
		if(StringUtil.isNotBlank(model.getUserName())){
			sql.append(" and u.user_name like '%"+model.getUserName()+"%'");
		}
		// JSDP-208 sxy 20150703 start
		if(StringUtil.isNotBlank(model.getRechargeWay())){
			sql.append(" and ar.recharge_way = '"+model.getRechargeWay()+"'");
		}
		// JSDP-208 sxy 20150703 start
		if(model != null){
			if(StringUtil.isNotBlank(model.getRechargeType())){
				sql.append(" and ar.recharge_type =:rechargeType");
			}
			if(StringUtil.isNotBlank(model.getUserType())){
				sql.append(" and uc.user_type =:userType ");
			}
			
			if (StringUtil.isNotBlank(model.getStartTime())) {
				sql.append(" and ar.add_time >=:startTime ");
			}

			if (StringUtil.isNotBlank(model.getEndTime())) {
				sql.append(" and ar.add_time <:endTime ");
			}
			if (StringUtil.isNotBlank(model.getTradeStatus())&& !"66".equals(model.getTradeStatus())) {
				sql.append(" and ar.trade_status =:tradeStatus");
			}
			if (StringUtil.isNotBlank(model.getTradeNo())) {
				sql.append(" and ar.trade_no =:tradeNo ");
			}
		}
		
		if(StringUtil.isNotBlank(model.getRealName())){
			//sql.append(" and u.real_name =:realName ");
			//sql.append(" and u.real_name like '%"+model.getRealName()+"%' ");
			sql.append(" and u.real_name like '%"+model.getRealName()+"%' ");
		}
		sql.append(" order by ar.add_time desc ");
		
		Query query = em.createNativeQuery(sql.toString());
		
		if(StringUtil.isNotBlank(model.getRechargeType())){
			// JSDP-185 sxy 20150619 start   类型为int值
			query.setParameter("rechargeType", Integer.parseInt(model.getRechargeType()));
		}
		if(StringUtil.isNotBlank(model.getUserType())){
			query.setParameter("userType", model.getUserType());
		}
		
		if (StringUtil.isNotBlank(model.getStartTime())) {
			Date start = DateUtil.valueOf(model.getStartTime());
			query.setParameter("startTime", start);
		}

		if (StringUtil.isNotBlank(model.getEndTime())) {
			Date end = DateUtil.valueOf(model.getEndTime());
			query.setParameter("endTime", end);
		}
		if (StringUtil.isNotBlank(model.getTradeStatus())&& !"66".equals(model.getTradeStatus())) {
			query.setParameter("tradeStatus", model.getTradeStatus());
		}
		if (StringUtil.isNotBlank(model.getTradeNo())) {
			query.setParameter("tradeNo", model.getTradeNo());
		}
		// JSDP-185 sxy 20150619 start
		/*if(StringUtil.isNotBlank(model.getRealName())){
			query.setParameter("realName", model.getRealName());
		}*/
		List list = query.getResultList();
		
		return list;
	}

	@Override
	public PageDataList<AccountRecharge> rechargeMoneyStatisticsListForSQL(
			AccountRechargeModel model, int page, int size) {

		/*StringBuffer sql = new StringBuffer();

		if(model.getRechargeType().equals("1")){
			sql.append("SELECT ar.trade_no,u.user_name,u.real_name,ar.in_account_amount,ar.recharge_fee,ar.add_time,"
					+" CASE ar.trade_status"
					+" WHEN 00 THEN '充值转账成功'"
					+" WHEN 55 THEN '充值转账提交中'"
					+" WHEN 99 THEN '充值转账失败'"
					+" WHEN 52 THEN '充值转账审核中'"
					+" WHEN 53 THEN '充值转账审核失败'"
					+" WHEN 01 THEN '补单转账成功'"
					+" ELSE '无' END FROM t_jsd_account_recharge ar,t_jsd_user u WHERE u.user_id=ar.user_id");
		}else{
			
			sql.append("SELECT ar.trade_no tradeNo,CASE uc.user_type WHEN 10 THEN '投资人'"
					+ " WHEN 11 THEN '借款人' WHEN 12 THEN '担保公司' WHEN 13 THEN '商城用户'"
					+ " ELSE '无' END userType,u.user_name userName,u.real_name realName,"
					+ "ar.in_account_amount inAccount,ar.recharge_fee rechargeFee,ar.add_time ADDTIME,"
					+ " CASE ar.trade_status WHEN 00 THEN '成功' WHEN 01 THEN '补单成功' WHEN 99 THEN '失败'"
					+ " WHEN 55 THEN '充值中' ELSE '无'END tradeStatus FROM t_jsd_account_recharge ar,"
					+ "t_jsd_user u,t_jsd_user_cache uc WHERE u.user_id=ar.user_Id AND u.user_id=uc.user_id");
		}
		
		// 充值类型
		if (StringUtil.isNotBlank(model.getRegisterWay())) {
			sql.append(" AND t1.register_way = '"+model.getRegisterWay()+"' ");
		}
		
		// 时间类型
		if (StringUtil.isNotBlank(model.getTimeType())) {

			// 昨天记录
			if (StatisticsData.DATA_TIME_YESTERDAY.equals(model
					.getTimeType())) {
				sql.append(" AND DATE_FORMAT(t1.add_time,'%y-%m-%d') = DATE_FORMAT(DATE_SUB(NOW(),INTERVAL 1 DAY),'%y-%m-%d') ");

			}
			// 今天记录
			if (StatisticsData.DATA_TIME_TODAY.equals(model.getTimeType())) {
				sql.append(" AND DATE_FORMAT(t1.add_time,'%y-%m-%d') = DATE_FORMAT(NOW(),'%y-%m-%d') ");
			}
			// 一周内记录
			if (StatisticsData.DATA_TIME_WEEK.equals(model.getTimeType())) {
				sql.append(" AND DATE_FORMAT(t1.add_time,'%y-%m-%d')  BETWEEN  DATE_FORMAT(DATE_SUB(NOW(),INTERVAL 7 DAY),'%y-%m-%d') AND  DATE_FORMAT(NOW(),'%y-%m-%d') ");
			}
			// 本月记录
			if (StatisticsData.DATA_TIME_MONTH.equals(model.getTimeType())) {
				sql.append(" AND DATE_FORMAT(t1.add_time,'%Y-%m')=DATE_FORMAT(NOW(),'%Y-%m')  ");
			}
			// 时间段记录
			if (StatisticsData.DATA_TIME_AREA.equals(model.getTimeType())) {

				if (null != model.getStartTime()) {
					sql.append(" AND DATE_FORMAT(t1.add_time,'%y-%m-%d %H:%i:%s') >= DATE_FORMAT('"
							+ DateUtil.dateStr4(model.getStartTime())
							+ "','%y-%m-%d %H:%i:%s') ");
				}
				if (null != model.getEndTime()) {
					sql.append(" AND DATE_FORMAT(t1.add_time,'%y-%m-%d %H:%i:%s') <= DATE_FORMAT('"
							+ DateUtil.dateStr4(model.getEndTime())
							+ "','%y-%m-%d %H:%i:%s') ");
				}

			}

		}*/
		StringBuffer sql = new StringBuffer();

		//if(model.getRechargeType().equals("1")){
			sql.append(" SELECT ar.trade_no,uc.user_type,u.user_name,u.real_name,ar.recharge_amount,ar.in_account_amount,ar.recharge_fee,"
					+ " ar.add_time,ar.recharge_type, "
					+ " ar.trade_status"
					+ " FROM t_jsd_account_recharge ar,t_jsd_user u,t_jsd_user_cache uc WHERE u.user_id=ar.user_id and u.user_id=uc.user_id ");
		//}else{
			
		/*	sql.append(" SELECT ar.trade_no tradeNo,CASE uc.user_type WHEN 10 THEN '投资人' "
					+ " WHEN 11 THEN '借款人' WHEN 12 THEN '担保公司' WHEN 13 THEN '商城用户' "
					+ " ELSE '无' END userType,u.user_name userName,u.real_name realName, "
					+ "ar.in_account_amount inAccount,ar.recharge_fee rechargeFee,ar.add_time ADDTIME, "
					+ " CASE ar.recharge_type WHEN 00 THEN '第三方充值' WHEN 01 THEN '转账充值' WHEN 02 THEN '平台充值' ELSE '其他' END rechargeType, "
					+ " CASE ar.trade_status WHEN 00 THEN '成功' WHEN 01 THEN '补单成功' WHEN 99 THEN '失败' "
					+ " WHEN 55 THEN '充值中' ELSE '无'END tradeStatus FROM t_jsd_account_recharge ar, "
					+ " t_jsd_user u,t_jsd_user_cache uc WHERE u.user_id=ar.user_Id AND u.user_id=uc.user_id ");*/
		//}
		
		// 充值类型
		if (StringUtil.isNotBlank(model.getRechargeType())) {
			sql.append(" AND ar.recharge_type = '" + model.getRechargeType() + "' ");
		}
		// 充值状态
		if (StringUtil.isNotBlank(model.getTradeStatus())) {
			sql.append(" AND ar.trade_status = '" + model.getTradeStatus() + "' ");
		}
		// 用户类型
		if (StringUtil.isNotBlank(model.getUserType())) {
			sql.append(" AND uc.user_type = '" + model.getUserType() + "' ");
		}
		// 时间类型
		if (StringUtil.isNotBlank(model.getTimeType())) {
			
			// 昨天记录
			if (StatisticsData.DATA_TIME_YESTERDAY.equals(model.getTimeType())) {
				sql.append(" AND DATE_FORMAT(ar.add_time,'%y-%m-%d') = DATE_FORMAT(DATE_SUB(NOW(),INTERVAL 1 DAY),'%y-%m-%d') ");
			}
			// 今天记录
			if (StatisticsData.DATA_TIME_TODAY.equals(model.getTimeType())) {
				sql.append(" AND DATE_FORMAT(ar.add_time,'%y-%m-%d') = DATE_FORMAT(NOW(),'%y-%m-%d') ");
			}
			// 一周内记录
			if (StatisticsData.DATA_TIME_WEEK.equals(model.getTimeType())) {
				sql.append(" AND DATE_FORMAT(ar.add_time,'%y-%m-%d')  BETWEEN  DATE_FORMAT(DATE_SUB(NOW(),INTERVAL 7 DAY),'%y-%m-%d') AND  DATE_FORMAT(NOW(),'%y-%m-%d') ");
			}
			// 本月记录
			if (StatisticsData.DATA_TIME_MONTH.equals(model.getTimeType())) {
				sql.append(" AND DATE_FORMAT(ar.add_time,'%Y-%m')=DATE_FORMAT(NOW(),'%Y-%m') ");
			}
			// 时间段记录
			if (StatisticsData.DATA_TIME_AREA.equals(model.getTimeType())) {
				if (StringUtil.isNotBlank(model.getStartTime())) {
					sql.append(" AND DATE_FORMAT(ar.add_time,'%y-%m-%d %H:%i:%s') >= DATE_FORMAT('"
							+ model.getStartTime() + "','%y-%m-%d %H:%i:%s') ");
				}
				if (StringUtil.isNotBlank(model.getEndTime())) {
					sql.append(" AND DATE_FORMAT(ar.add_time,'%y-%m-%d %H:%i:%s') <= DATE_FORMAT('"
							+ model.getEndTime() + "','%y-%m-%d %H:%i:%s') ");
				}
			}
			
		}
		
		sql.append("  AND u.islocked != 'FF'");
		sql.append("  ORDER BY ar.add_time DESC");
		
		Query query = em.createNativeQuery(sql.toString());
		// 注意下面的页数和条数改为所接收的值，或者在之前将两个值设置在Model里
		Page pages = new Page(query.getResultList().size(), size, page);
		PageDataList<AccountRecharge> pageList = new PageDataList<AccountRecharge>();
		query.setFirstResult((page - 1) * size);
		query.setMaxResults(size);
		List queryList = query.getResultList();
		List<AccountRecharge> userList = new ArrayList<AccountRecharge>();
		Object[] object = new Object[13];
		for(int i=0;i<queryList.size();i++){
			object = (Object[]) queryList.get(i);
			AccountRechargeModel obj = new AccountRechargeModel();
//			userM.setUserId((Long) object[0]);
			// 订单号
			obj.setTradeNo((String)object[0]);
			// 用户类型
			obj.setUserType((String) object[1]);
			// 用户名
			obj.setUserName((String) object[2]);
			// 真实姓名
			obj.setRealName((String) object[3]);
			// 充值金额
			obj.setRechargeAmount((Double.valueOf((object[4]).toString())));
			// 到账金额
			obj.setInAccountAmount((Double.valueOf((object[5]).toString())));
			// 手续费金额
			obj.setRechargeFee((Double.valueOf((object[6]).toString())));
			// 充值时间
			obj.setAddTime((Date) object[7]);
			// 充值类型
			obj.setRechargeType((object[8]).toString());
			// 状态
			obj.setTradeStatus((String) object[9]);
			userList.add(obj);
		}
		
		
		pageList.setList(userList);
		pageList.setPage(pages);

		return pageList;
		
		
		
		
	}
		
     /*   Query query = em.createNativeQuery(sb.toString(), AccountRecharge.class);
        Page page = new Page(query.getResultList().size(), pageNumber, pageSize);
        query.setFirstResult((pageNumber - 1) * pageSize);
        query.setMaxResults(pageSize);
        List<AccountRecharge> list = query.getResultList();
        pageDataList.setList(list);
        pageDataList.setPage(page);
        return pageDataList;
        
        
	*/
	// JSDPBUG-99 20150505  sxy
}
