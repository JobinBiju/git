package com.rongdu.p2psys.core.notice.email;

import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

import com.rongdu.p2psys.core.domain.Notice;
import com.rongdu.p2psys.core.service.NoticeService;

public class EmailNoticeJobQueue<T> {

	@SuppressWarnings({ "unchecked", "rawtypes" })
	private Queue<T> emailQueue = new ConcurrentLinkedQueue();
	private EmailLoanTask emailTask;

	public EmailNoticeJobQueue(EmailLoanTask task) {
		super();
		this.emailTask = task;
	}

	public synchronized void offer(T model) {
		if (!emailQueue.contains(model)) {
			emailQueue.offer(model);
			emailTask.execute();
		}
	}

	public synchronized void offer(List<T> ts) {
		for (int i = 0; i < ts.size(); i++) {
			T t = ts.get(i);
			if (!emailQueue.contains(t)) {
				emailQueue.offer(t);
			}
		}
		emailTask.execute();
	}

	public synchronized T poll() {
		return emailQueue.poll();
	}

	public synchronized T peek() {
		return emailQueue.peek();
	}

	public synchronized void remove(T model) {
		emailQueue.remove(model);
	}

	public int size() {
		return emailQueue.size();
	}

	public static EmailNoticeJobQueue<Notice> EMAILNOTICE = null;

	public static void init(NoticeService noticeService) {
		EMAILNOTICE = new EmailNoticeJobQueue<Notice>(new EmailNoticeTask(noticeService));
	}

	public static void stop() {
		EMAILNOTICE.emailTask.stop();
	}

	public void doAutoQueue() {
	}

}
