package com.ddtkj.p2psys.redpacket.dao.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.Query;

import org.springframework.stereotype.Repository;

import com.ddtkj.p2psys.redpacket.dao.RpActivityProduceDao;
import com.ddtkj.p2psys.redpacket.domain.RpActivity;
import com.ddtkj.p2psys.redpacket.domain.RpActivityConsume;
import com.ddtkj.p2psys.redpacket.domain.RpActivityProduce;
import com.ddtkj.p2psys.redpacket.model.RpActivityProduceModel;
import com.rongdu.common.dao.jpa.BaseDaoImpl;
import com.rongdu.common.model.jpa.QueryParam;
import com.rongdu.common.model.jpa.SearchFilter.Operators;
import com.rongdu.common.util.StringUtil;

/**
 * @描述：活动红包的产生dao层实现   JSDP-184
 * @作者:xingjia@ddtkj.com
 * @创建时间:  2015年6月15日 
 */
@Repository("rpActivityProduceDao")
public class RpActivityProduceDaoImpl extends BaseDaoImpl<RpActivityProduce> implements RpActivityProduceDao {

	@Override
	public List<RpActivityProduceModel> getSumListRpProduce(
			RpActivityProduceModel model) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT "
				  +" SUM(rap.activity_award)" 
				  +" FROM"
				  +" t_jsd_rp_activity_produce rap,"
				  +" t_jsd_user u "
				  +" WHERE u.user_id = rap.award_user");
		
		if(StringUtil.isNotBlank(model.getUserName())){
			sql.append(" AND u.user_name LIKE '%"+model.getUserName()+"%'");
		}
		if(StringUtil.isNotBlank(model.getType())){
			sql.append(" AND rap.activity_type =:activityType ");
		}
		if(StringUtil.isNotBlank(model.getStartTime())){
			sql.append(" AND rap.add_time >=:startTime ");
		}
		if(StringUtil.isNotBlank(model.getEndTime())){
			sql.append(" AND rap.add_time <:endTime ");
		}
		//JSDP-203 xingjia 20150702 start
		if(StringUtil.isNotBlank(model.getAwardType()) && !"99".equals(model.getAwardType())){
			if("Y".equals(model.getAwardType())){
				sql.append(" AND rap.award_type != :awardType");
			}else{
				sql.append(" AND rap.award_type = :awardType");
			}
		}
		//JSDP-203 xingjia 20150702 end
		
		sql.append(" ORDER BY rap.add_time DESC");
		Query query = em.createNativeQuery(sql.toString());
		
		if(StringUtil.isNotBlank(model.getType()) && !"99".equals(model.getType())){
			query.setParameter("activityType", model.getType());
		}
		if(StringUtil.isNotBlank(model.getStartTime())){
			query.setParameter("startTime", model.getStartTime());
		}
		if(StringUtil.isNotBlank(model.getEndTime())){
			query.setParameter("endTime", model.getEndTime());
		}
		//JSDP-203 xingjia 20150702 start
		if(StringUtil.isNotBlank(model.getAwardType()) && !"99".equals(model.getAwardType())){
			query.setParameter("awardType", RpActivityProduce.RP_AWARD_OLD_MOST_TENDER);
		}
		//JSDP-203 xingjia 20150702 end
		Object obj = query.getSingleResult();
		RpActivityProduceModel rapModel = new RpActivityProduceModel();
		List<RpActivityProduceModel> rapModelList = new ArrayList<RpActivityProduceModel>();
		//活动产生红包
		if(null != obj){
			rapModel.setRpActivityProduceSum(Double.parseDouble(obj+""));
		}
		rapModelList.add(rapModel);
		return rapModelList;
	}

	@Override
	public List excelListRpProduce(RpActivityProduceModel model) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT "
				  +" rap.id,u.user_name,u.real_name,rap.activity_type,rap.activity_award,rap.add_time,rap.remark"
				  +" FROM"
				  +" t_jsd_rp_activity_produce rap,"
				  +" t_jsd_user u "
				  +" WHERE u.user_id = rap.award_user ");
		
		
		if(StringUtil.isNotBlank(model.getUserName())){
			sql.append(" AND u.user_name LIKE '%"+model.getUserName()+"%'");
		}
		if(StringUtil.isNotBlank(model.getType())){
			sql.append(" AND rap.activity_type =:activityType ");
		}
		if(StringUtil.isNotBlank(model.getStartTime())){
			sql.append(" AND rap.add_time >=:startTime ");
		}
		if(StringUtil.isNotBlank(model.getEndTime())){
			sql.append(" AND rap.add_time <:endTime ");
		}
		sql.append(" ORDER BY rap.add_time DESC");
		Query query = em.createNativeQuery(sql.toString());
		
		if(StringUtil.isNotBlank(model.getType()) && !"99".equals(model.getType())){
			query.setParameter("activityType", model.getType());
		}
		if(StringUtil.isNotBlank(model.getStartTime())){
			query.setParameter("startTime", model.getStartTime());
		}
		if(StringUtil.isNotBlank(model.getEndTime())){
			query.setParameter("endTime", model.getEndTime());
		}
		
		List rapList = query.getResultList();
		return rapList;
	}

	@Override
	public double getSumProduceByType(String activityType, long userId,int validTime) {
		double activitySum = 0;
		//JSDP-203 20150720 xingjia start
		if(StringUtil.isNotBlank(activityType) && userId != 0){
			StringBuffer sql = new StringBuffer();
			sql.append("SELECT (activity_award)-(rp_consume+rp_unvalid) AS validMoney FROM t_jsd_rp_activity_produce "
					+ "WHERE activity_type='"+activityType+"' AND award_user="+userId+" and is_enable=1");
			sql.append(" and TO_DAYS(NOW()) - TO_DAYS(DATE_ADD(add_time, INTERVAL "+validTime+" DAY)) <=0 ");
			Query query = em.createNativeQuery(sql.toString());
			Object object = query.getSingleResult();
			if(null != object){
				activitySum = Double.parseDouble(object.toString());
			}
		}
		//JSDP-203 20150720 xingjia end
		return activitySum;
	}
	//端午节活动 wcw 2015-6-19 start
	@Override
	public List getBorrowId(String activityType,Date addTime,Date endTime) {
	//public List getBorrowId(String activityType){
		StringBuffer sql = new StringBuffer();
		sql.append(" select borrow_id from t_jsd_rp_activity_produce where 1=1");
		if(StringUtil.isNotBlank(activityType)){
			sql.append(" and activity_type =:activityType ");
		}
		if(addTime!=null){
			sql.append(" and add_time>=:addTime  ");
		}
		if(endTime!=null){
			sql.append(" and add_time<=:endTime ");
		}
        sql.append(" group by borrow_id");
		Query query = em.createNativeQuery(sql.toString());
		if(StringUtil.isNotBlank(activityType)){
			query.setParameter("activityType", activityType);
		}
		if(addTime!=null){
			query.setParameter("addTime", addTime);
		}
		if(endTime!=null){
			query.setParameter("endTime", endTime);
		}
		List list = query.getResultList();
		return list;
	}
	//端午节活动  wcw 2015-6-19 end

	//JSDP-203 xingjia 20150702 start
	@Override
	public List<RpActivityProduce> getActivityTypeList(long userId, String status,String awardType) {
		QueryParam param = QueryParam.getInstance();
		param.addParam("awardUser.userId", userId);
		param.addParam("activityType.status", Operators.NOTEQ, status);
		param.addParam("activityType.awardType",awardType);
		List<RpActivityProduce> rapList = super.findByCriteria(param);
		return rapList;
	}
	//JSDP-203 xingjia 20150702 end
	@Override
	public List<RpActivityProduce> getRpActivityProduceList(RpActivityProduceModel rpm){
		StringBuffer sql = new StringBuffer();
		sql.append(" select * from t_jsd_rp_activity_produce where 1=1");
		if(rpm.getBorrowId()!=0){
			sql.append(" and borrow_id=:borrowId");
		}
		if(StringUtil.isNotBlank(rpm.getAwardType())){
			sql.append(" and award_type=:awardType");
		}
		Query query = em.createNativeQuery(sql.toString());
		if(rpm.getBorrowId()!=0){
			query.setParameter("borrowId", rpm.getBorrowId());
		}
		if(StringUtil.isNotBlank(rpm.getAwardType())){
			query.setParameter("awardType", rpm.getAwardType());
		}
		List<RpActivityProduce> list = query.getResultList();
		return list;
	}
	
	public RpActivityProduce getRpActivityProduce(RpActivityProduceModel rpm){
		StringBuffer sql = new StringBuffer();
		sql.append(" select * from t_jsd_rp_activity_produce where 1=1");
		if(rpm.getBorrowId()!=0){
			sql.append(" and borrow_id=:borrowId");
		}
		if(StringUtil.isNotBlank(rpm.getAwardType())){
			sql.append(" and award_type=:awardType");
		}
		sql.append(" order by id desc limit 1");
		Query query = em.createNativeQuery(sql.toString(),RpActivityProduce.class);
		if(rpm.getBorrowId()!=0){
			query.setParameter("borrowId", rpm.getBorrowId());
		}
		if(StringUtil.isNotBlank(rpm.getAwardType())){
			query.setParameter("awardType", rpm.getAwardType());
		}
		RpActivityProduce rp=null;
		Object object=null;
		try {
			object = query.getSingleResult();
			if(null != object){
				rp = (RpActivityProduce) object;
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			rp=null;
		}
		return rp;
	}

	/* (non-Javadoc)
	 * @see com.ddtkj.p2psys.redpacket.dao.RpActivityProduceDao#getRpActivityProduce(java.lang.String, double, long)
	 */
	@Override
	public RpActivityProduce getRpActivityProduce(String activityType,
			double awardMoney, long userId) {
		QueryParam param  = QueryParam.getInstance();
		param.addParam("activityType", activityType);
		param.addParam("activityAward", awardMoney);
		param.addParam("awardUser.userId", userId);
		RpActivityProduce rap = super.findByCriteriaForUnique(param);
		
		return rap;
	}
	//JSDP-203 20150720 xingjia start
	/* (non-Javadoc)
	 * @see com.ddtkj.p2psys.redpacket.dao.RpActivityProduceDao#getRpActivityProdceListUnvalid(java.lang.String, int)
	 */
	@Override
	public List<RpActivityProduce> getRpActivityProdceListUnvalid(
			String activityType, int validTime) {
		StringBuffer sql = new StringBuffer();
		sql.append("select * from t_jsd_rp_activity_produce WHERE activity_type='"+ activityType +"' "
				+ "TO_DAYS(NOW()) - TO_DAYS(DATE_ADD(add_time, INTERVAL "+ validTime +" DAY)) > 0");
		Query query = em.createNativeQuery(sql.toString(), RpActivityProduce.class);
		List<RpActivityProduce> rpList = query.getResultList();
		return rpList;
	}
	//JSDP-203 20150720 xingjia end
}
