package com.ddtkj.p2psys.account.executer;

import com.ddtkj.p2psys.account.domain.Account;
import com.ddtkj.p2psys.account.domain.AccountLog;
import com.ddtkj.p2psys.user.domain.User;
import com.rongdu.common.util.BigDecimalUtil;
import com.rongdu.p2psys.account.exception.AccountException;
import com.rongdu.p2psys.core.constant.Constant;
import com.rongdu.p2psys.core.constant.NoticeConstant;
import com.rongdu.p2psys.core.executer.BaseExecuter;
import com.rongdu.p2psys.core.sms.sendMsg.BaseMsg;

/**
 * 
 * @描述：用户购买会员服务
 * @作者:xingjia@ddtkj.com
 * @创建时间:  2015年2月28日
 */
public class BuyMemberServiceExecuter extends BaseExecuter {
	
	private String accountLogType = Constant.VIP_FEE;
	
	@Override
	public String getAccountLogType() {
		return accountLogType;
	}

	@Override
	public void addAccountLog() {
		Account account = accountDao.findObjByProperty("user.userId", this.user.getUserId());
		AccountLog log = new AccountLog(super.user, accountLogType, new User(Constant.ADMIN_ID));
		//操作金额
		log.setRechargeMoney(rechargeMoney);
		log.setAwardMoney(awardMoney);
		log.setInterestMoney(interestMoney);
		log.setReturnCapitalMoney(returnCapitalMoney);
		
		//账户总额
		log.setAccountTotal(account.getAccountTotal());
		//账户多种可用
		log.setRechargeUsable(account.getRechargeUsable());
		log.setAwardUsable(account.getAwardUsable());
		log.setInterestUsable(account.getInterestUsable());
		log.setReturnCapitalUsable(account.getReturnCapitalUsable());
		log.setRpDynamicUsable(account.getRpDynamicTotal());
		//账户多种冻结
		log.setFreezeUseAward(account.getFreezeUseAward());
		log.setFreezeUseInterest(account.getFreezeUseInterest());
		log.setFreezeUseRecharge(account.getFreezeUseRecharge());
		log.setFreezeUseReturnCapital(account.getFreezeUseReturnCapital());
		log.setFreezeRpDynamic(account.getFreezeRpDynamic());
		//账户待收总额
		log.setCollectionTotal(account.getCollectionTotal());
		log.setRemark(this.getLogRemark());
		log.setPaymentsType((byte)0);
		accountLogDao.save(log);

	}

	@Override
	public void handleAccount() {
		
		Account account = accountDao.getAccountByUserId(user.getUserId());
	   // 账户各类可用金额
	   account.setRechargeUsable(BigDecimalUtil.add(account.getRechargeUsable(), -rechargeMoney));
	   
	   account.setAwardUsable(BigDecimalUtil.add(account.getAwardUsable(), -awardMoney));
	  
	   account.setInterestUsable(BigDecimalUtil.add(account.getInterestUsable(), -interestMoney));
	   
	   account.setReturnCapitalUsable(BigDecimalUtil.add(account.getReturnCapitalUsable(), -returnCapitalMoney));
	   
	   account.setAccountTotal(BigDecimalUtil.add(account.getAccountTotal(),-rechargeMoney,-awardMoney,-interestMoney,-returnCapitalMoney));
	  
	   if(account.getRechargeUsable() < 0){
	       throw new AccountException("充值可用金额不足！", 1);
	   }
	   if(account.getInterestUsable() < 0){
	       throw new AccountException("利息可用金额不足！", 1);
	   }
	   if(account.getAwardUsable() < 0){
	       throw new AccountException("奖励可用金额不足！", 1);
	   }
	   if(account.getReturnCapitalUsable()< 0){
	       throw new AccountException("回款可用金额不足！", 1);
	   }
		accountDao.update(account);
	}

	@Override
	public void handleAccountSum() {
		super.handleAccountSum();

	}

	@Override
	public void handlePoints() {
		// TODO Auto-generated method stub

	}

	@Override
	public void handleNotice() {
		BaseMsg msg = new BaseMsg(NoticeConstant.BUY_VIP_SUCCESS);
		msg.doEvent();
	}

	@Override
	public void addOperateLog() {
		
	}

	@Override
	public void handleInterface() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void extend() {
		// TODO Auto-generated method stub

	}
}
