package com.rongdu.p2psys.user.dao.jdbc;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;

import com.rongdu.common.dao.jpa.BaseDaoImpl;
import com.rongdu.common.model.jpa.PageDataList;
import com.rongdu.common.model.jpa.QueryParam;
import com.rongdu.common.model.jpa.OrderFilter.OrderType;
import com.rongdu.common.util.Page;
import com.rongdu.p2psys.user.dao.UserLogisticsAddressDao;
import com.rongdu.p2psys.user.domain.UserLogisticsAddress;
import com.rongdu.p2psys.user.exception.UserException;

@Repository("userLogisticsAddressDao")
public class UserLogisticsAddressDaoImpl extends
		BaseDaoImpl<UserLogisticsAddress> implements UserLogisticsAddressDao {

	@Override
	public void addLogisticsAddress(UserLogisticsAddress userLogisticsAddress) {
		super.save(userLogisticsAddress);

	}

	@Override
	public int countLogisticsAddress(long userId) {

		int count = 0;

		QueryParam param = QueryParam.getInstance();
		
		param.addParam("user.userId", userId);
		count = countByCriteria(param);

		return count;
	}

	@Override
	public List<UserLogisticsAddress> list(long userId) {
		
		QueryParam param = QueryParam.getInstance();
		param.addParam("user.userId", userId);
		param.addOrder(OrderType.DESC, "isDefault");
		return super.findByCriteria(param);
	}

	@Override
	public void modifyLogiscAddress(UserLogisticsAddress userLogisticsAddress) {

		String nativeSql = "  UPDATE t_jsd_memeber_logistics_address SET name = :name,province = :province,city=:city ,county=:county,zip_code = :zipCode ,phone = :phone ,detail_address =:detailAddress WHERE id = :id";
		String[] names = new String[] { "name", "province", "city","county","zipCode", "phone",
				"detailAddress", "id" };
		Object[] values = new Object[] { 
				userLogisticsAddress.getName(),
				userLogisticsAddress.getRegionProvince().getId(),
				userLogisticsAddress.getRegionCity().getId(),
				userLogisticsAddress.getRegionCounty().getId(),
				userLogisticsAddress.getZipCode(),
				userLogisticsAddress.getPhone(), 
				userLogisticsAddress.getDetailAddress(),
				userLogisticsAddress.getId() };
		int result = updateBySql(nativeSql, names, values);
		if (result != 1) {
			throw new UserException("更新用户收货地址失败！", 1);
		}

	}

	@Override
	public void deleteLogisticsAddress(int id) {

		super.delete(id);
	}

	@Override
	public void modifyIsDefault(long userId,int id) {

		String sqlupdateAll = "UPDATE UserLogisticsAddress SET isDefault = :isDefault1 where user_id= :userId";

		String sql = "UPDATE UserLogisticsAddress SET isDefault = :isDefault2 WHERE id = :id";

		Query q = em.createQuery(sqlupdateAll);
		q.setParameter("userId", userId);
		q.setParameter("isDefault1", 0);
		q.executeUpdate();

		Query query = em.createQuery(sql);
		query.setParameter("isDefault2", 1);
		query.setParameter("id", id);
		int result = query.executeUpdate();
		if (result != 1) {
			throw new UserException("更新默认收货地址失败！", 1);
		}

	}

	@Override
	public UserLogisticsAddress queryLogisticsAddress(int id) {

		String sql = " FROM UserLogisticsAddress where id= :id ";

		Query query = em.createQuery(sql);

		query.setParameter("id", id);

		List<UserLogisticsAddress> list = query.getResultList();

		return list.get(0);

	}

	/**
	 * 获取用户收货地址
	 * @sunxiaoyongddtkj.com
	 * 
	 */
	@Override
	public PageDataList<UserLogisticsAddress> addressPageDataList(
			QueryParam param) {
		//return super.findAllPageList(param);
		return super.findPageList(param);
	}
	
	/**
	 * 获取用户的其他收货地址
	 * @sunxiaoyongddtkj.com
	 * 
	 */
	public PageDataList<UserLogisticsAddress> otherAddressList(int userId) {

		String sql = "SELECT * FROM t_jsd_memeber_logistics_address WHERE is_default=0 AND user_id = :userId";
		
		EntityManager em = this.getEm();
		
		 Query query = em.createNativeQuery(sql, UserLogisticsAddress.class);
		 if (userId > 0) {
             query.setParameter("userId", userId);
         }
		 Page page = new Page(query.getResultList().size(), 1, 10);
         
		 List<UserLogisticsAddress> list = query.getResultList();

         PageDataList<UserLogisticsAddress> pageDataList = new PageDataList<UserLogisticsAddress>();
         
         pageDataList.setList(list);
         pageDataList.setPage(page);
      
         return pageDataList;
		
	}

	@Override
	public UserLogisticsAddress queryLogisticsAddressByUserId(long userId) {
		
		QueryParam param  = QueryParam.getInstance();
		param.addParam("user.userId", userId);
		param.addParam("isDefault", 1);
		UserLogisticsAddress address  = this.findByCriteriaForUnique(param);
		

		return address;
	}

}
