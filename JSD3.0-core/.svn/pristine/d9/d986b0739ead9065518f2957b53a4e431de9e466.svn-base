package com.rongdu.p2psys.core.util;

import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;

import com.ddtkj.p2psys.user.domain.User;
import com.octo.captcha.service.CaptchaServiceException;
import com.rongdu.common.util.StringUtil;
import com.rongdu.p2psys.core.Global;
import com.rongdu.p2psys.core.dao.NoticeDao;
import com.rongdu.p2psys.user.dao.UserDao;
import com.rongdu.p2psys.user.dao.UserIdentifyDao;
import com.rongdu.p2psys.user.exception.UserException;

/**
 * 数据校验工具类
 * 
 * @author xx
 * @version 2.0
 * @since 2014年1月8日
 */
public class ValidateUtil {
	public static Logger logger = Logger.getLogger(ValidateUtil.class);
	private static Map<String, Object> map;

	/**
	 * 校验_验证码
	 * 
	 * @param validCode 验证码
	 * @return 校验结果 true：通过 false：不通过
	 */
	public static boolean checkValidCode(String validCode) {
		boolean b = false;
		// Test LoadRunner测试用万能验证码
//		if ("1".equals("1")) {
//			return true;
//		}
		HttpServletRequest request = ServletActionContext.getRequest();
        if(request.getSession().getAttribute("code")==null){
        	return false;
		}
		try {
			/*b = CaptchaServiceSingleton.getInstance().validateResponseForID((String)request.getSession().getAttribute("v"),
					validCode.toLowerCase());*/
			 logger.info("页面上的验证码==="+validCode.toLowerCase());
			 logger.info("session中的验证码==="+((String)request.getSession().getAttribute("code")).toLowerCase());
			 b=validCode.toLowerCase().equals(((String)request.getSession().getAttribute("code")).toLowerCase());
		} catch (CaptchaServiceException e) {
			b = false;

			e.printStackTrace();
		}
		request.getSession().removeAttribute("code");
		if("#￥%@".equals(validCode)||"^*#!".equals(validCode)){//TODO 雷凯自动测试使用正式上线时删除
			b = true;
		}
		return b;
	}

	/**
	 * 校验_验证码
	 * @param key
	 * @param userName 用户名
	 * @param userId 用户ID
	 * @param email 电子邮件
	 * @param todo
	 * @param code
	 * @return 校验结果 true：通过 false：不通过
	 * @throws Exception 
	 */
    public static boolean checkPwdCode(String key, String userName,Long userId, String addr, String todo, String code) throws Exception {
		boolean b = false;
		HttpServletRequest request = ServletActionContext.getRequest();
		Map map = (HashMap<String, Object>)request.getSession().getAttribute(key);
		if (map == null) {
			return b;
		}
		NoticeDao noticeDao = (NoticeDao) BeanUtil.getBean("noticeDao");
		// 发送校验码时间取得
//		long verifyTime = noticeDao.getNoticeAddTimeByUserId(userId, addr);
		long verifyTime = Calendar.getInstance().getTimeInMillis();
		// 验证码有效期取得
		long vtime = StringUtil.toLong(Global.getValue("verify_code_time"));
		// 验证码超过有效期的场合
		if (System.currentTimeMillis() - verifyTime > vtime * 1000) {
			
			return b;
		}
		//Map<String, Object> map = (HashMap<String, Object>) obj;
		String userName_ = StringUtil.isNull(map.get("userName"));
		String todo_ = StringUtil.isNull(map.get("todo"));
		String code_ = StringUtil.isNull(map.get("code"));
		if (StringUtil.isNotBlank(userName_) && userName_.equals(userName) && StringUtil.isNotBlank(todo_)
				&& todo_.equals(todo) && StringUtil.isNotBlank(code_) && code_.equals(code)) {
			b = true;
			request.getSession().removeAttribute(key);
		}
		return b;
	}
	/**
	 * 校验_验证码
	 * @param key
	 * @param userName 用户名
	 * @param userId 用户ID
	 * @param email 电子邮件
	 * @param todo
	 * @param code
	 * @return 校验结果 true：通过 false：不通过
	 * @throws Exception 
	 */
	public static boolean checkCode(String key, String userName,Long userId, String email, String todo, String code) throws Exception {
		boolean b = false;
		HttpServletRequest request = ServletActionContext.getRequest();
		Object obj = request.getSession().getAttribute(key);
		if (obj == null) {
			return b;
		}
		NoticeDao noticeDao = (NoticeDao) BeanUtil.getBean("noticeDao");
		// 发送校验码时间取得
		long verifyTime = noticeDao.getAddTimeByUserId(userId,email);
		// 验证码有效期取得
		long vtime = StringUtil.toLong(Global.getValue("verify_code_time"));
		// 验证码超过有效期的场合
		if (System.currentTimeMillis() - verifyTime > vtime * 1000) {
			return b;
		}
		Map<String, Object> map = (HashMap<String, Object>) obj;
		String userName_ = StringUtil.isNull(map.get("userName"));
		String todo_ = StringUtil.isNull(map.get("todo"));
		String code_ = StringUtil.isNull(map.get("code"));
		if (StringUtil.isNotBlank(userName_) && userName_.equals(userName) && StringUtil.isNotBlank(todo_)
				&& todo_.equals(todo) && StringUtil.isNotBlank(code_) && code_.equals(code)) {
			b = true;
			request.getSession().removeAttribute(key);
		}
		return b;
	}

	/**
	 * @author guojunhui@ddtkj.com
	 * 校验用户名 规则：数字与字母组合，字母，汉字，4-16位，中文占2位（郭俊辉修改）
	 * 
	 * @param userName 用户名
	 * @return 校验结果 true：通过 false：不通过
	 */
	public static boolean isUserName(String userName) {
		int w = 0; 
		for (int i=0; i < userName.length(); i++) {//用于判断用户名的长度 
		   char[] c = userName.toCharArray(); 
		   //单字节加1 
		   if ((c[i] >= 0x0001 && c[i] <= 0x007e) || (0xff60 <= c[i] && c[i] <= 0xff9f)) { 
		    w++; 
		   } 
		   else { 
		    w += 2; 
		   } 
		} 
	    if (w < 4 || w >16) {
	        throw new UserException("用户名长度必须是4-16位！", 1);
	    }
		Pattern p = Pattern.compile("^(?![0-9]+$)[0-9A-Za-z_\u0391-\uFFE5]{2,16}$");
		Matcher m = p.matcher(userName);
		return m.matches();
	}

	/**
	 * 校验是否中文
	 * 
	 * @param str 字符串
	 * @return 校验结果 true：通过 false：不通过
	 */
	public static boolean isChinese(String str) {
		Pattern regex = Pattern.compile("[\\u4e00-\\u9fa5]{2,25}");
		Matcher matcher = regex.matcher(StringUtil.isNull(str));
		return matcher.matches();
	}

	/**
	 * 校验Email格式
	 * 
	 * @param email 输入邮箱
	 * @return 校验结果 true：通过 false：不通过
	 */
	public static boolean isEmail(String email) {
		Pattern regex = Pattern.compile("\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*");
		Matcher matcher = regex.matcher(StringUtil.isNull(email));
		return matcher.matches();
	}

	/**
	 * 校验手机号格式
	 * 
	 * @param phone 手机号
	 * @return 校验结果 true：通过 false：不通过
	 */
	public static boolean isPhone(String phone) {
		//JSDP-97 gjh 2015-5-11 start
		Pattern regex = Pattern.compile("^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1})|(14[0-9]{1})|(17[0-9]{1}))\\d{8})$");
		//JSDP-97 gjh 2015-5-11 start
		Matcher matcher = regex.matcher(StringUtil.isNull(phone));
		boolean isMatched = matcher.matches();
		return isMatched;
	}

	/**
	 * 校验手机号
	 * 
	 * @param phone 手机号
	 * @return 校验结果和消息
	 */
	public static Map<String, Object> checkPhone(String phone) {
		map = new HashMap<String, Object>();
		map.put("result", false);
		if (StringUtil.isBlank(phone)) {
			map.put("message", "请输入手机号！");
			return map;
		}
		if (!isPhone(phone)) {
			map.put("message", "请输入正确的11位手机号！");
		} else {
			map.put("result", true);
		}
		return map;
	}
	/**
	 * 校验手机号格式与是否已经存在
	 * @param phone 手机号
	 * @return 校验结果和消息
	 */
	public static void checkPhoneExist(String phone) {
		//JSDP-97 gjh 2015-5-11 start
		Pattern regex = Pattern.compile("^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1})|(14[0-9]{1})|(17[0-9]{1}))\\d{8})$");
		//JSDP-97 gjh 2015-5-11 start
        Matcher matcher = regex.matcher(StringUtil.isNull(phone));
        boolean isMatched = matcher.matches();
        if (!isMatched) {
            throw new UserException("您输入的手机号格式不对");
        } 
        UserDao userDao = (UserDao) BeanUtil.getBean("userDao");
        if (userDao.countByMobilePhone(phone) > 1) {
            throw new UserException("您输入的手机号已存在");
        }
	}
	/**
	 * 校验实名认证通过的手机号格式与是否已经存在
	 * @param phone 手机号
	 * @return 校验结果和消息
	 */
	public static void checkVerifyOkPhoneExist(String phone) {
		//JSDP-97 gjh 2015-5-11 start
		Pattern regex = Pattern.compile("^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1})|(14[0-9]{1})|(17[0-9]{1}))\\d{8})$");
		//JSDP-97 gjh 2015-5-11 start
        Matcher matcher = regex.matcher(StringUtil.isNull(phone));
        boolean isMatched = matcher.matches();
        if (!isMatched) {
            throw new UserException("您输入的手机号格式不对");
        } 
        UserIdentifyDao userIdentifyDao = (UserIdentifyDao) BeanUtil.getBean("userIdentifyDao");
        if (userIdentifyDao.countByMobilePhone(phone) > 0) {
            throw new UserException("您输入的手机号已存在");
        }
	}
	/**
	 * 校验实名认证通过的身份证号是否已经存在
	 * @param cardNo 手机号
	 * @return 校验结果和消息
	 * wcw 
	 * 2014-12-4
	 */
	public static void checkVerifyOkCardNoExist(String cardNo) {
        UserIdentifyDao userIdentifyDao = (UserIdentifyDao) BeanUtil.getBean("userIdentifyDao");
        if (userIdentifyDao.countByVerifyOkCardNo(cardNo) > 0) {
            throw new UserException("您输入的身份证号已存在",1);
        }
	}
	/**
	 * 校验实名认证通过的身份证号是否已经存在
	 * @param cardNo 手机号
	 * @return 校验结果和消息
	 * wcw 
	 * 2014-12-4
	 */
	public static void checkCardNoExist(String cardNo) {
        UserIdentifyDao userIdentifyDao = (UserIdentifyDao) BeanUtil.getBean("userIdentifyDao");
        if (userIdentifyDao.countByCardNo(cardNo) > 0) {
            throw new UserException("您输入的身份证号已存在",1);
        }
	}
	
	//JSDP-190  wcw 2015-06-24 start
	/**
	 * 校验实名认证通过的身份证号是否已经存在
	 * @param cardNo 手机号
	 * @return 校验结果和消息
	 * wcw 
	 * 2014-12-4
	 */
	public static void checkCardNoExist(String cardNo,String userName) {
        UserIdentifyDao userIdentifyDao = (UserIdentifyDao) BeanUtil.getBean("userIdentifyDao");
        UserDao userDao = (UserDao) BeanUtil.getBean("userDao");
        User user=userDao.getUserByUserName(userName);
        if (user!=null&&!cardNo.equals(user.getCardNO())&&userIdentifyDao.countByCardNo(cardNo) > 0) {
            throw new UserException("您输入的身份证号已存在",1);
        }
	}
	//JSDP-190  wcw 2015-06-24 end
	/**
	 * 真实姓名校验
	 * @param realName 姓名
	 * @return 校验结果和消息 
	 * fengggq@ddtkj.com
	 * 2015-04-21
	 */
	public static void checkRealName(String realName) {
		  Pattern regex = Pattern.compile("^[\u4E00-\u9FA5]{2,11}$");
	        Matcher matcher = regex.matcher(StringUtil.isNull(realName));
	        boolean isMatched = matcher.matches();
	        if(StringUtil.isBlank(realName)){
	        	 throw new UserException("请输入真实姓名！", 1);
	        }else if (!isMatched) {
	            throw new UserException("您输入的真实姓名格式不正确！", 1);
	        } 
	}
	
	/**
	 * 身份证格式校验
	 * @param cardNo 身份证号码
	 * @return 校验结果和消息
	 * fengggq@ddtkj.com
	 * 2015-04-21
	 */
	public static void checkCardNo(String cardNO) {
		  Pattern regex = Pattern.compile("(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)");
	        Matcher matcher = regex.matcher(StringUtil.isNull(cardNO));
	        boolean isMatched = matcher.matches();
	        if(StringUtil.isBlank(cardNO)){
	        	 throw new UserException("请输入身份证号码！", 1);
	        }else if (!isMatched) {
	            throw new UserException("您输入的身份证格式不正确！", 1);
	        } 
	}
	public static void main(String[] args) {
		ValidateUtil v = new ValidateUtil();
		v.checkRealName("郭俊辉");
		v.checkCardNo("14233219920824362X");
	}
}
