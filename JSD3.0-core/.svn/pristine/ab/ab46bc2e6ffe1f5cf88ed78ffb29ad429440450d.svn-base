package com.rongdu.p2psys.borrow.dao.jdbc;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.persistence.Query;

import org.springframework.stereotype.Repository;

import com.ddtkj.p2psys.credit.domain.CreditLog;
import com.ddtkj.p2psys.user.domain.User;
import com.rongdu.common.dao.jpa.BaseDaoImpl;
import com.rongdu.common.model.jpa.PageDataList;
import com.rongdu.common.model.jpa.QueryParam;
import com.rongdu.common.model.jpa.SearchFilter.Operators;
import com.rongdu.common.util.BigDecimalUtil;
import com.rongdu.common.util.DateUtil;
import com.rongdu.common.util.Page;
import com.rongdu.common.util.StringUtil;
import com.rongdu.p2psys.borrow.dao.BorrowCollectionDao;
import com.rongdu.p2psys.borrow.domain.Borrow;
import com.rongdu.p2psys.borrow.domain.BorrowCollection;
import com.rongdu.p2psys.borrow.model.BorrowCollectionModel;

@SuppressWarnings("unchecked")
@Repository("borrowCollectionDao")
public class BorrowCollectionDaoImpl extends BaseDaoImpl<BorrowCollection> implements BorrowCollectionDao {

	@Override
	public double getReceivedInterestSum(long userId) {
		String jpal = "SELECT SUM(interest) FROM BorrowCollection WHERE (status = 1 OR (status = 0 AND repaymentYesAccount<>0)) AND user.userId = :userId";
		Query query = em.createQuery(jpal);
		query.setParameter("userId", userId);
		Object obj = query.getSingleResult();
		if (obj == null) {
			obj = 0;
		}
		return Double.parseDouble(obj.toString());
	}

	@Override
	public double getOverDueInterestSum(long userId) {
		String jpal = "SELECT SUM(lateInterest) FROM BorrowCollection WHERE (status = 1 OR (status = 0 AND repaymentYesAccount<>0)) AND user.userId = :userId";
		Query query = em.createQuery(jpal);
		query.setParameter("userId", userId);
		Object obj = query.getSingleResult();
		if (obj == null) {
			obj = 0;
		}
		return Double.parseDouble(obj.toString());
	}
	
	@Override
	public List<BorrowCollection> list(long borrowId, int period,int status) {
		//JSDBET-835 wcw 2015-3-20 start //摒除collection中type=2的待收记录
		String sql="select * from rd_borrow_collection where status=:status and borrow_id=:borrowId and period=:period and type not in (2)";
		//JSDBET-835 wcw 2015-3-20 end
		Query query = em.createNativeQuery(sql, BorrowCollection.class);
        query.setParameter("borrowId", borrowId);
        query.setParameter("period", period);
        query.setParameter("status", status);
        List<BorrowCollection> list = (List<BorrowCollection>) query.getResultList();
        return list;
		/*QueryParam param = QueryParam.getInstance();
		param.addParam("status", 0);
		param.addParam("borrow.id", borrowId);
		param.addParam("period", period);
		return super.findByCriteria(param);*/
        
	}

	@Override
	public double getRemainderCapital(long tenderId) {
		String jpql = "select sum(capital) from BorrowCollection bc where bc.status=0  and bc.tender.id= ?1 ";
		Query q = em.createQuery(jpql).setParameter(1, tenderId);
		Object ret = q.getSingleResult();
		if (ret == null)
			return 0;
		return Double.parseDouble(ret.toString());
	}

	@Override
	public double getRemainderInterest(long tenderId) {
		String jpql = "select sum(interest) from BorrowCollection bc where bc.status=0  and bc.tender.id= ?1 ";
		Query q = em.createQuery(jpql).setParameter(1, tenderId);
		Object ret = q.getSingleResult();
		if (ret == null)
			return 0;
		return Double.parseDouble(ret.toString());
	}
	
	@Override
	public double getInterestByBorrowAndPeriod(long borrowId, int period) {
        String jpql = "select sum(interest) from BorrowCollection bc where bc.status=0  and bc.borrow.id= ?1 and bc.period= ?2 ";
        Query query = em.createQuery(jpql);
        query.setParameter(1, borrowId);
        query.setParameter(2, period);
        Object ret = query.getSingleResult();
        if (ret == null)
            return 0;
        return Double.parseDouble(ret.toString());
	}

	@Override
	public BorrowCollection getCollectionByTenderAndPeriod(long tenderId, int period,int status) {
		String jpql = "from BorrowCollection bc where bc.status=?3  and bc.tender.id= ?1 and bc.period = ?2";
		Query query =em.createQuery(jpql,BorrowCollection.class);
		query.setParameter(1, tenderId);
		query.setParameter(2,period);
		query.setParameter(3, status);
		List<BorrowCollection> list = query.getResultList();
		
		return (BorrowCollection)list.get(0);
	}
	
	@Override
	public BorrowCollection getNextCollectionByUserId(long userId){
		String jpql = "from BorrowCollection bc where bc.status=0  and repaymentTime>=now() and bc.user.userId= ?1 order by repaymentTime asc";
		Query query =em.createQuery(jpql);
		query.setParameter(1, userId);
		List<BorrowCollection> list = query.getResultList();
		if (list != null && list.size() > 0) {
			return list.get(0);
		}
		return null;
	}
	
	@Override
	public int countCollect(long userId,long collectionStatus) {
		String jpql = "select count(1) from rd_borrow_collection bc where bc.user_id= "+userId;
		if(collectionStatus!=-1){
			jpql+=" and bc.status="+collectionStatus;
		}
		//JSDP-197 债权转让的待收记录不包含在内 wcw 2015-06-26 start
		jpql+=" and bc.type!=2 ";
		//JSDP-197 债权转让的待收记录不包含在内 wcw 2015-06-26 end
		Query q = em.createNativeQuery(jpql);
		Object ret = q.getSingleResult();
		if (ret == null)
			return 0;
		return Integer.parseInt((ret.toString()));
		/*QueryParam param = QueryParam.getInstance();
		param.addParam("status", 0);
		param.addParam("user.userId", userId);
		//代收款为复审通过
		param.addParam("borrow.status",3);
		return countByCriteria(param);*/
	}
	
	@Override
	public int countCollected(long userId) {
		QueryParam param = QueryParam.getInstance();
		param.addParam("status", 1);
		param.addParam("user.userId", userId);
		return countByCriteria(param);
	}
	
	@Override
	public BorrowCollectionModel getCollectStatistics(long userId){
		BorrowCollectionModel bm = new BorrowCollectionModel();
		HashMap data = new HashMap();
		List list = new ArrayList();
		//获取本月待收sql
		String jpqlMonth = "select ifnull(sum(repayment_account),0),count(id) from rd_borrow_collection bc where bc.status=0  and bc.user_id= ?1 "
				+ "and month(bc.repayment_time)=month(now()) AND year(bc.repayment_time)=year(now())";
		Query q = em.createNativeQuery(jpqlMonth).setParameter(1, userId);
		list = q.getResultList();
		double monthAccount = 0;
		int monthCount = 0;
		if (list != null && list.size() > 0) {
			Iterator iterator = list.iterator(); 
			while (iterator.hasNext()) { 
				Object[] row = (Object[]) iterator.next();	
				monthAccount= Double.parseDouble(row[0].toString());
				monthCount = Integer.parseInt(row[1].toString());
			}
		}
		data.put("monthAccount", monthAccount);
		data.put("monthCount", monthCount);
		//获取下月待收sql
		String jpqlNextMonth = "select ifnull(sum(repayment_account),0),count(id) from rd_borrow_collection bc where bc.status=0  and bc.user_id= ?1 "
				+ " and PERIOD_DIFF( date_format( now( ) , '%Y%m' ) , date_format( bc.repayment_time, '%Y%m' ) ) =-1";
		q = em.createNativeQuery(jpqlNextMonth).setParameter(1, userId);
		list = q.getResultList();
		double nextMonthAccount = 0;
		int nextMonthCount = 0;
		if (list != null && list.size() > 0) {
			Iterator iterator = list.iterator(); 
			while (iterator.hasNext()) { 
				Object[] row = (Object[]) iterator.next();	
				nextMonthAccount= Double.parseDouble(row[0].toString());
				nextMonthCount = Integer.parseInt(row[1].toString());
			}
		}
		data.put("nextMonthAccount", nextMonthAccount);
		data.put("nextMonthCount", nextMonthCount);
		//获取剩余待收sql
		String jpqlOther = "select ifnull(sum(repayment_account),0),count(id) from rd_borrow_collection bc where bc.status=0  and bc.user_id= ?1 "
				+ " and (PERIOD_DIFF( date_format( bc.repayment_time, '%Y%m' ) ,  date_format( now( ) , '%Y%m' )) >1 or PERIOD_DIFF( date_format( bc.repayment_time, '%Y%m' ) ,  date_format( now( ) , '%Y%m' )) < 0)";
		q = em.createNativeQuery(jpqlOther).setParameter(1, userId);
		list = q.getResultList();
		double otherMonthAccount = 0;
		int otherMonthCount = 0;
		if (list != null && list.size() > 0) {
			Iterator iterator = list.iterator(); 
			while (iterator.hasNext()) { 
				Object[] row = (Object[]) iterator.next();	
				otherMonthAccount= Double.parseDouble(row[0].toString());
				otherMonthCount = Integer.parseInt(row[1].toString());
			}
		}
		data.put("otherMonthAccount", otherMonthAccount);
		data.put("otherMonthCount", otherMonthCount);
		double allMonthAccount=BigDecimalUtil.add(monthAccount,nextMonthAccount,otherMonthAccount);
		int allMonthCount=monthCount+nextMonthCount+otherMonthCount;
		data.put("allMonthAccount", allMonthAccount);
		data.put("allMonthCount", allMonthCount);
		bm.setCollectData(data);
		return bm;
	}
	@Override
	public double getCollectByMonth(int month, long userId) {
		String jpql = "select sum(repaymentAccount) from BorrowCollection bc where bc.user.userId= ?1 and bc.status=0 and month(bc.repaymentTime)=?2 AND year(bc.repaymentTime)=year(now())";
		Query q = em.createQuery(jpql).setParameter(1, userId).setParameter(2, month);
		Object ret = q.getSingleResult();
		if (ret == null)
			return 0;
		return Double.parseDouble(ret.toString());
	}
	
	@Override
	public BorrowCollectionModel getBCMByCollectTime(BorrowCollectionModel bm, Date nextCollectTime, long userId) {
		String jpql = "select ifnull(sum(repayment_account),0),count(id) from rd_borrow_collection bc where bc.status=0  and bc.user_id= ?1 "
				+ " and date_format( bc.repayment_time, '%Y%m%d' ) = date_format( ?2 , '%Y%m%d' )";
		Query q = em.createNativeQuery(jpql).setParameter(1, userId).setParameter(2, nextCollectTime);
		Object[] obj = (Object[]) q.getSingleResult();
		double account = Double.parseDouble(obj[0] + "");
		int count = Integer.parseInt(obj[1] + "");
		bm.setNextCollextAccount(account);
		bm.setNextCollextCount(count);
		return bm;
	}

	@Override
	public double getRemainderMoney(long borrowId) {
		String jpql = "select sum(capital) from BorrowCollection bc where bc.status=0  and bc.borrow.id= ?1 ";
		Query q = em.createQuery(jpql).setParameter(1, borrowId);
		Object ret = q.getSingleResult();
		if (ret == null)
			return 0;
		return Double.parseDouble(ret.toString());
	}

	@Override
	public void updatePriorRepayStatus(long borrowId) {
		StringBuffer buffer = new StringBuffer(
				"UPDATE rd_borrow_collection SET status = 1,repayment_yes_time = ?1");
		buffer.append(" WHERE status = 0 AND borrow_id = ?2");
		Query query = em.createNativeQuery(buffer.toString());
		query.setParameter(1, new Date());
		query.setParameter(2, borrowId);
		query.executeUpdate();
	}

    @Override
    public double accumulatedNetIncome(User user) {
        String jpql = "select sum(interest) from BorrowCollection bc where bc.status = 1  and bc.user.userId = ?1";
        Query q = em.createQuery(jpql).setParameter(1, user.getUserId());
        Object ret = q.getSingleResult();
        if(ret == null) return 0;
        return Double.parseDouble(ret.toString());
    }

    @Override
    public double inInvestAmount(User user, int status) {
        StringBuffer jpql = new StringBuffer("SELECT SUM(p1.capital) FROM rd_borrow_collection p1,"); 
        jpql.append(" rd_borrow_repayment p2 WHERE p1.borrow_id = p2.borrow_id AND p1.period = p2.period");
        if(status == 0){
            jpql.append(" AND p1.status = 0 AND p2.status = 0 AND p1.user_id = :userId"); 
        }else if(status == 1){
            jpql.append(" AND ( (p1.status = 0 AND p2.status = 0) OR p1.status = 1) AND p1.user_id = :userId"); 
        }
        Query q = em.createNativeQuery(jpql.toString()).setParameter("userId", user.getUserId());
        Object ret = q.getSingleResult();
        if(ret == null) return 0;
        return Double.parseDouble(ret.toString());
    }

    /**
     * 今日收益：计算今日收益的时候，要把这个标已还和未还的都要算上，之后除以借款的时间
     * 在修改的次方法的时候一定要谨慎
     */
    @Override
    public double sumTodayInterest(User user) {
        StringBuffer jpql = new StringBuffer("SELECT SUM((p1.interest)/(TO_DAYS(p1.repayment_time)");
        jpql.append(" - IF(p3.borrow_time_type = 0, TO_DAYS(DATE_SUB(p1.repayment_time,INTERVAL p3.time_limit MONTH)),");
        jpql.append(" TO_DAYS(DATE_SUB(p1.repayment_time,INTERVAL p3.time_limit DAY))))) AS money");
        jpql.append(" FROM rd_borrow_collection p1 , rd_borrow_repayment p2 , rd_borrow p3 WHERE p1.borrow_id = p2.borrow_id");
        jpql.append(" AND p3.status != 8 AND p1.period = p2.period AND p3.id = p2.borrow_id AND p1.user_id = :userId");
        Query q = em.createNativeQuery(jpql.toString()).setParameter("userId", user.getUserId());
        Object ret = q.getSingleResult();
        if(ret == null) return 0;
        return Double.parseDouble(ret.toString());
    }

    @Override
    public double getInterestByUser(User user) {
        StringBuffer jpql = new StringBuffer("SELECT SUM(p1.interest) FROM rd_borrow_collection p1 where 1=1 ");
        jpql.append(" AND p1.status = 0 AND p1.user_id = :userId");
      //JSDP-197 债权转让的待收记录不包含在内 wcw 2015-06-26 start
        jpql.append(" and p1.type!=2 ");
      //JSDP-197 债权转让的待收记录不包含在内 wcw 2015-06-26 end
        Query q = em.createNativeQuery(jpql.toString()).setParameter("userId", user.getUserId());
        double interest = 0;
        Object obj = q.getSingleResult();
        if (obj != null) {
            interest = Double.parseDouble(obj.toString());
        }
        return interest;
    }
    
    @Override
	public double getInterestByUser(User user, Date startTime, Date endTime) {
    	 StringBuffer jpql = new StringBuffer("SELECT SUM(p1.interest) FROM rd_borrow_collection p1");
         jpql.append(" WHERE  p1.status = 1 AND p1.type= 1 AND p1.user_id = :userId");
         if(startTime != null){
        	 
        	 jpql.append(" AND p1.add_time >= :startTime ");
         }
         jpql.append(" AND p1.add_time <= :endTime ");
         Query q = em.createNativeQuery(jpql.toString());
         q.setParameter("userId", user.getUserId());
         Date start = null;
         if(startTime != null){
        	 start = DateUtil.valueOf(DateUtil.dateStr2(startTime) + " 00:00:00");
        	 q.setParameter("startTime", start);
         }
        
       	Date end = DateUtil.valueOf(DateUtil.dateStr2(endTime) + " 23:59:59");
       		
       		q.setParameter("endTime",end);
         
         double interest = 0;
         Object obj = q.getSingleResult();
         if (obj != null) {
             interest = Double.parseDouble(obj.toString());
         }
         return interest;
	}
    
    @Override
	public double getInterestByUser(User user, int type) {
    	 StringBuffer jpql = new StringBuffer("SELECT SUM(p1.interest) FROM rd_borrow_collection p1,");
         jpql.append(" rd_borrow b WHERE p1.borrow_id = b.id ");
         jpql.append(" AND p1.status = 0 AND b.type = :type AND p1.type = 2 AND p1.user_id = :userId");
         Query q = em.createNativeQuery(jpql.toString());
         q.setParameter("userId", user.getUserId());
         q.setParameter("type", type);
         double interest = 0;
         Object obj = q.getSingleResult();
         if (obj != null) {
             interest = Double.parseDouble(obj.toString());
         }
         return interest;
	}
    
    @Override
    public List<Object[]> getInterestByUserAndDate(User user, String date) {
        StringBuffer sql = new StringBuffer("SELECT DATE_FORMAT(p1.repayment_time,'%m-%d'),SUM(p1.interest) FROM rd_borrow_collection p1,");
        sql.append("  WHERE ");
        sql.append(" p1.status = 0 AND DATE_FORMAT(p1.repayment_time,'%Y-%m') = :timeDate AND p1.user_id = :userId");
        sql.append(" group by date_format(p1.repayment_time,'%m-%d')");
        Query q = em.createNativeQuery(sql.toString()).setParameter("timeDate", date).setParameter("userId", user.getUserId());
        return q.getResultList();
    }
    @Override
    public double getCapitalByUser(User user) {
        StringBuffer jpql = new StringBuffer("SELECT SUM(p1.capital) FROM rd_borrow_collection p1 where 1=1 ");
      //JSDP-197 债权转让的待收记录不包含在内 wcw 2015-06-26 start
        jpql.append(" AND p1.status = 0 and p1.type!=2 AND p1.user_id = :userId ");
      //JSDP-197 债权转让的待收记录不包含在内 wcw 2015-06-26 end
        Query q = em.createNativeQuery(jpql.toString()).setParameter("userId", user.getUserId());
        double capital = 0;
        Object obj = q.getSingleResult();
        if (obj != null) {
            capital = Double.parseDouble(obj.toString());
        }
        return capital;
    }
    
    @Override
	public double getCapitalByUser(User user, int type) {
    	StringBuffer jpql = new StringBuffer("SELECT SUM(p1.capital) FROM rd_borrow_collection p1,");
        jpql.append(" rd_borrow b WHERE p1.borrow_id = b.id ");
        jpql.append(" AND p1.status = 0 AND b.type = :type  AND p1.type = 2 AND p1.user_id = :userId");
        Query q = em.createNativeQuery(jpql.toString());
        q.setParameter("userId", user.getUserId());
        q.setParameter("type", type);
        
        double capital = 0;
        Object obj = q.getSingleResult();
        if (obj != null) {
            capital = Double.parseDouble(obj.toString());
        }
        return capital;
	}
    
    @Override
    public List<Object[]>  getCapitalByUserAndDate(User user, String date) {
        StringBuffer sql = new StringBuffer("SELECT DATE_FORMAT(p1.repayment_time,'%m-%d'),SUM(p1.capital) FROM rd_borrow_collection p1 ");
        sql.append("  WHERE ");
        sql.append("  p1.status = 0 AND DATE_FORMAT(p1.repayment_time,'%Y-%m') = :timeDate AND p1.user_id = :userId");
        sql.append(" group by date_format(repayment_time,'%m-%d')");
        Query q = em.createNativeQuery(sql.toString()).setParameter("timeDate", date).setParameter("userId", user.getUserId());
        return q.getResultList();
    }

    @Override
    public List<String> getCollectionDate(User user) {
        StringBuffer jpql = new StringBuffer("SELECT  DISTINCT(DATE_FORMAT(p1.repayment_time,'%Y-%m')) FROM rd_borrow_collection p1");
        jpql.append("  WHERE ");
        jpql.append("  p1.status = 0  AND p1.user_id = :userId ORDER BY p1.repayment_time ,p1.id ASC");
        Query q = em.createNativeQuery(jpql.toString());
        q.setParameter("userId", user.getUserId());
        return q.getResultList();
    }

    @Override
    public List<BorrowCollection> getMemberCollectionList(User user) {
        StringBuffer jpql = new StringBuffer("SELECT  p1.* FROM rd_borrow_collection p1");
        jpql.append("  WHERE ");
        jpql.append("  p1.status = 0  AND p1.user_id = :userId ORDER BY p1.repayment_time ,p1.id ASC LIMIT 4");
        Query query = em.createNativeQuery(jpql.toString(), BorrowCollection.class);
        query.setParameter("userId", user.getUserId());
        List<BorrowCollection> list = (List<BorrowCollection>) query.getResultList();
        return list;
    }

    @Override
    public PageDataList<BorrowCollection> getList(BorrowCollectionModel model) {
        StringBuffer jpql = new StringBuffer("SELECT DISTINCT p1.* FROM rd_borrow_collection p1,");
        jpql.append("rd_borrow p3, t_jsd_user p4 WHERE ");
        jpql.append("  p1.borrow_id = p3.id AND p4.user_id = p1.user_id");
        long userId = 0;
        //JSDP-85 gjh 2015-5-4 start
        long borrowId = 0;
        int period = 0;
        int type = 0;
        String investUserName = "";
        PageDataList<BorrowCollection> pageDataList = new PageDataList<BorrowCollection>();
        if (model != null) {
            if(model.getUser() != null && model.getUser().getUserId() > 0){
                jpql.append(" AND p1.user_id = :userId");
                userId = model.getUser().getUserId();
            }
            if(model.getBorrowId() != 0){
            	jpql.append(" AND p3.id = :borrowId");
            	borrowId = model.getBorrowId();
            }
            if(model.getPeriod() > 0){
            	jpql.append(" AND p1.period = :period");
            	period = model.getPeriod();
            }
            
        //JSDP-85 gjh 2015-5-4 end
            if(model.getInvestUserName() != null && model.getInvestUserName().length() > 0){
                investUserName = model.getInvestUserName();
                jpql.append(" AND p4.user_name LIKE :investUserName");
            }
            //fengguoqin@ddtkj.com JSDP-205  2015.7.2  start
            if(model.getType()==11){//正常代收
            	jpql.append(" AND p1.type = :type");
            	type = 0;
            }else if (model.getType()==22){//债权转让
            	jpql.append(" AND p1.type = :type");
            	type = 2;
            }
            //fengguoqin@ddtkj.com JSDP-205  2015.7.2  end
            Date startTime1 = null;
            Date endTime1 = null;
            Date registerStartTime1 = null;
            Date registerEndTime1 = null;
            String contractNo = null;
            if (StringUtil.isNotBlank(model.getStartTime())) {
                //startTime1 = DateUtil.valueOf(model.getStartTime() + " 00:00:00");
                startTime1 = DateUtil.valueOf(model.getStartTime());
                jpql.append(" AND p1.repayment_time >= :startTimeA");
            }
            if (StringUtil.isNotBlank(model.getEndTime())) {
                //endTime1 = DateUtil.valueOf(model.getEndTime() + " 23:59:59");
                endTime1 = DateUtil.valueOf(model.getEndTime());
                jpql.append(" AND p1.repayment_time <= :endTimeA");
            }
            // 2015年5月10日    孙晓勇
            // 注册时间
            if (StringUtil.isNotBlank(model.getRegisterStartTime())) {
                //startTime1 = DateUtil.valueOf(model.getRegisterStartTime() + " 00:00:00");
            	registerStartTime1 = DateUtil.valueOf(model.getRegisterStartTime());
                jpql.append(" AND p4.add_time >= :registerStartTimeA");
            }
            if (StringUtil.isNotBlank(model.getRegisterEndTime())) {
                //endTime1 = DateUtil.valueOf(model.getRegisterEndTime() + " 23:59:59");
            	registerEndTime1 = DateUtil.valueOf(model.getRegisterEndTime());
                jpql.append(" AND p4.add_time <= :registerEndTimeA");
            }
            // 2015年5月10日    孙晓勇
            if(!StringUtil.isBlank(model.getContractNo())){
            	contractNo = model.getContractNo();
            	jpql.append(" AND p3.deal_no = :contractNo");
            }
            int status = -1;
            Date startTime2 = null;
            Date endTime2 = null;
            if(model.getTime() > 0){
                if(model.getStatus() == 0){// 如果状态为待收，则查询时间为当前时间加上model.getTime()
                    startTime1 = DateUtil.getDayStartTime(System.currentTimeMillis()/1000);
                    jpql.append(" AND p1.status = 0 AND p1.repayment_time >= :startTimeA AND p1.repayment_time <= :endTimeA");
                    if (model.getTime() == 7) {
                        endTime1 = DateUtil.rollDay(startTime1, 7);
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                    } else if (model.getTime() > 0 && model.getTime() < 4){
                        endTime1 = DateUtil.rollMon(startTime1, model.getTime());
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                    }
                }else if(model.getStatus() == 1){// 如果状态为已收，则查询时间为当前时间减去model.getTime()
                    endTime1 = DateUtil.getDayStartTime(System.currentTimeMillis()/1000);
                    jpql.append(" AND p1.status = 1 AND p1.repayment_time >= :startTimeA AND p1.repayment_time <= :endTimeA");
                    if (model.getTime() == 7) {
                        startTime1 = DateUtil.rollDay(endTime1, -7);
                        startTime1 = DateUtil.getDayEndTime(startTime1.getTime() / 1000);
                    } else if (model.getTime() > 0 && model.getTime() < 4){
                        startTime1 = DateUtil.rollMon(endTime1, -model.getTime());
                        startTime1 = DateUtil.getDayEndTime(startTime1.getTime() / 1000);
                    }
                }else if(model.getStatus() == -1){
                    jpql.append(" AND ( (p1.status = 0 AND p1.repayment_time >= :startTimeA AND p1.repayment_time <= :endTimeA)");
                    jpql.append(" OR ( p1.status = 1 AND p1.repayment_time >= :startTimeB AND p1.repayment_time <= :endTimeB ) )");
                    startTime1 = DateUtil.getDayStartTime(System.currentTimeMillis()/1000);
                    endTime2 = startTime1;
                    if (model.getTime() == 7) {
                        // 待收信息时间处理
                        endTime1 = DateUtil.rollDay(startTime1, 7);
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                        // 已收信息时间处理
                        startTime2 = DateUtil.rollDay(endTime2, -7);
                        startTime2 = DateUtil.getDayEndTime(startTime2.getTime() / 1000);
                        
                    } else if (model.getTime() > 0 && model.getTime() < 4){
                        // 待收信息时间处理
                        endTime1 = DateUtil.rollMon(startTime1, model.getTime());
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                        // 已收信息时间处理
                        startTime2 = DateUtil.rollMon(endTime2, -model.getTime());
                        startTime2 = DateUtil.getDayEndTime(startTime2.getTime() / 1000);
                    } 
                }
            }else if(model.getTime() <= 0 && model.getStatus() > -1){
                status = model.getStatus();
                jpql.append(" AND p1.status = :status");
            }
            
            String borrowName = "";
            if(model.getBorrowName() != null && model.getBorrowName().length() > 0 && !"undefined".equals(model.getBorrowName()) ){
                borrowName = model.getBorrowName();
                jpql.append(" AND p3.name LIKE :borrowName");
            }
            jpql.append(" AND p4.islocked != 'FF' ");
            
          //JSDP-197 债权转让的待收记录不包含在内 wcw 2015-06-26 start
          /*  jpql.append(" and p1.type<>2 ");*/
          //JSDP-197 债权转让的待收记录不包含在内 wcw 2015-06-26 end
            
            //JSDP-61 gjh 2015-5-10 start
            //jpql.append(" ORDER BY p1.id ASC");
            jpql.append(" ORDER BY p1.repayment_time ASC");
            //JSDP-61 gjh 2015-5-10 end
            Query query = em.createNativeQuery(jpql.toString(), BorrowCollection.class);
            if (userId > 0) {
                query.setParameter("userId", userId);
            }
            
            if (borrowId > 0) {
            	query.setParameter("borrowId", borrowId);
            }
            
            if (period > 0) {
            	query.setParameter("period", period - 1);
            }
            
            if (status > -1) {
                query.setParameter("status", status);
            }
            //fengguoqin@ddtkj.com JSDP-205  2015.7.2  start
            if(model.getType()==11){//正常代收
            	 query.setParameter("type", 0);
            }else if (model.getType()==22){//债权转让
            	 query.setParameter("type", 2);
            }
            //fengguoqin@ddtkj.com JSDP-205  2015.7.2  end
            if (registerStartTime1 != null) {
                query.setParameter("registerStartTimeA", registerStartTime1);
            }
            if (registerEndTime1 != null) {
                query.setParameter("registerEndTimeA", registerEndTime1);
            }
            if (startTime1 != null) {
                query.setParameter("startTimeA", startTime1);
            }
            if (endTime1 != null) {
                query.setParameter("endTimeA", endTime1);
            }
            if (startTime2 != null) {
                query.setParameter("startTimeB", startTime2);
            }
            if (endTime2 != null) {
                query.setParameter("endTimeB", endTime2);
            }
            if(investUserName.length() > 0){
                query.setParameter("investUserName", "%"+investUserName+"%");
            }
            if(borrowName.length() > 0){
                query.setParameter("borrowName", "%"+borrowName+"%");
            }
            if(contractNo != null){
            	query.setParameter("contractNo", contractNo);
            }
            Page page = new Page(query.getResultList().size(), model.getPage(), model.getSize());
            query.setFirstResult((model.getPage() - 1) * model.getSize());
            query.setMaxResults(model.getSize());
            List<BorrowCollection> list = query.getResultList();
            pageDataList.setList(list);
            pageDataList.setPage(page);
        }
        return pageDataList;
    }
 // JSDP-206  wcw 2015-07-02 start 
    @Override
    public PageDataList<BorrowCollection> getBorrowCollectionList(BorrowCollectionModel model) {
        StringBuffer jpql = new StringBuffer("SELECT  p1.* FROM rd_borrow_collection p1 where 1=1 ");
        long userId = 0;
        int period = 0;
        PageDataList<BorrowCollection> pageDataList = new PageDataList<BorrowCollection>();
        if (model != null) {
            if(model.getUser() != null && model.getUser().getUserId() > 0){
                jpql.append(" AND p1.user_id = :userId");
                userId = model.getUser().getUserId();
            }
            if(model.getPeriod() > 0){
            	jpql.append(" AND p1.period = :period");
            	period = model.getPeriod();
            }
            
            Date startTime1 = null;
            Date endTime1 = null;
            Date registerStartTime1 = null;
            Date registerEndTime1 = null;
            if (StringUtil.isNotBlank(model.getStartTime())) {
                startTime1 = DateUtil.valueOf(model.getStartTime());
                jpql.append(" AND p1.repayment_time >= :startTimeA");
            }
            if (StringUtil.isNotBlank(model.getEndTime())) {
                endTime1 = DateUtil.valueOf(model.getEndTime());
                jpql.append(" AND p1.repayment_time <= :endTimeA");
            }
            int status = -1;
            Date startTime2 = null;
            Date endTime2 = null;
            if(model.getTime() > 0){
                if(model.getStatus() == 0){// 如果状态为待收，则查询时间为当前时间加上model.getTime()
                    startTime1 = DateUtil.getDayStartTime(System.currentTimeMillis()/1000);
                    jpql.append(" AND p1.status = 0 AND p1.repayment_time >= :startTimeA AND p1.repayment_time <= :endTimeA");
                    if (model.getTime() == 7) {
                        endTime1 = DateUtil.rollDay(startTime1, 7);
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                    } else if (model.getTime() > 0 && model.getTime() < 4){
                        endTime1 = DateUtil.rollMon(startTime1, model.getTime());
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                    }
                }else if(model.getStatus() == 1){// 如果状态为已收，则查询时间为当前时间减去model.getTime()
                    endTime1 = DateUtil.getDayStartTime(System.currentTimeMillis()/1000);
                    jpql.append(" AND p1.status = 1 AND p1.repayment_time >= :startTimeA AND p1.repayment_time <= :endTimeA");
                    if (model.getTime() == 7) {
                        startTime1 = DateUtil.rollDay(endTime1, -7);
                        startTime1 = DateUtil.getDayEndTime(startTime1.getTime() / 1000);
                    } else if (model.getTime() > 0 && model.getTime() < 4){
                        startTime1 = DateUtil.rollMon(endTime1, -model.getTime());
                        startTime1 = DateUtil.getDayEndTime(startTime1.getTime() / 1000);
                    }
                }else if(model.getStatus() == -1){
                    jpql.append(" AND ( (p1.status = 0 AND p1.repayment_time >= :startTimeA AND p1.repayment_time <= :endTimeA)");
                    jpql.append(" OR ( p1.status = 1 AND p1.repayment_time >= :startTimeB AND p1.repayment_time <= :endTimeB ) )");
                    startTime1 = DateUtil.getDayStartTime(System.currentTimeMillis()/1000);
                    endTime2 = startTime1;
                    if (model.getTime() == 7) {
                        // 待收信息时间处理
                        endTime1 = DateUtil.rollDay(startTime1, 7);
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                        // 已收信息时间处理
                        startTime2 = DateUtil.rollDay(endTime2, -7);
                        startTime2 = DateUtil.getDayEndTime(startTime2.getTime() / 1000);
                        
                    } else if (model.getTime() > 0 && model.getTime() < 4){
                        // 待收信息时间处理
                        endTime1 = DateUtil.rollMon(startTime1, model.getTime());
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                        // 已收信息时间处理
                        startTime2 = DateUtil.rollMon(endTime2, -model.getTime());
                        startTime2 = DateUtil.getDayEndTime(startTime2.getTime() / 1000);
                    } 
                }
            }else if(model.getTime() <= 0 && model.getStatus() > -1){
                status = model.getStatus();
                jpql.append(" AND p1.status = :status");
            }
            
          //JSDP-197 债权转让的待收记录不包含在内 wcw 2015-06-26 start
            jpql.append(" and p1.type<>2 ");
          //JSDP-197 债权转让的待收记录不包含在内 wcw 2015-06-26 end
            
            //JSDP-61 gjh 2015-5-10 start
            //jpql.append(" ORDER BY p1.id ASC");
            jpql.append(" ORDER BY p1.repayment_time ASC ");
            jpql.append(" limit :start,:end ");
            //JSDP-61 gjh 2015-5-10 end
            Query query = em.createNativeQuery(jpql.toString(), BorrowCollection.class);
            if (userId > 0) {
                query.setParameter("userId", userId);
            }
            if (period > 0) {
            	query.setParameter("period", period - 1);
            }
            
            if (status > -1) {
                query.setParameter("status", status);
            }
            if (registerStartTime1 != null) {
                query.setParameter("registerStartTimeA", registerStartTime1);
            }
            if (registerEndTime1 != null) {
                query.setParameter("registerEndTimeA", registerEndTime1);
            }
            if (startTime1 != null) {
                query.setParameter("startTimeA", startTime1);
            }
            if (endTime1 != null) {
                query.setParameter("endTimeA", endTime1);
            }
            if (startTime2 != null) {
                query.setParameter("startTimeB", startTime2);
            }
            if (endTime2 != null) {
                query.setParameter("endTimeB", endTime2);
            }
            Page page = new Page(model.getCount(), model.getPage(), model.getSize());
            query.setParameter("start", page.getStart());
            query.setParameter("end", page.getPernum());
            //query.setFirstResult((model.getPage() - 1) * model.getSize());
           // query.setMaxResults(model.getSize());
            List<BorrowCollection> list = query.getResultList();
            pageDataList.setList(list);
            pageDataList.setPage(page);
        }
        return pageDataList;
    }
    @Override
    public int getCollectionCount(BorrowCollectionModel model) {
        StringBuffer jpql = new StringBuffer("SELECT count(1) FROM rd_borrow_collection p1 where 1=1");
        long userId = 0;
        int period = 0;
        String investUserName = "";
        PageDataList<BorrowCollection> pageDataList = new PageDataList<BorrowCollection>();
        if (model != null) {
            if(model.getUser() != null && model.getUser().getUserId() > 0){
                jpql.append(" AND p1.user_id = :userId");
                userId = model.getUser().getUserId();
            }
            if(model.getPeriod() > 0){
            	jpql.append(" AND p1.period = :period");
            	period = model.getPeriod();
            }
            Date startTime1 = null;
            Date endTime1 = null;
            if (StringUtil.isNotBlank(model.getStartTime())) {
                //startTime1 = DateUtil.valueOf(model.getStartTime() + " 00:00:00");
                startTime1 = DateUtil.valueOf(model.getStartTime());
                jpql.append(" AND p1.repayment_time >= :startTimeA");
            }
            if (StringUtil.isNotBlank(model.getEndTime())) {
                //endTime1 = DateUtil.valueOf(model.getEndTime() + " 23:59:59");
                endTime1 = DateUtil.valueOf(model.getEndTime());
                jpql.append(" AND p1.repayment_time <= :endTimeA");
            }
            int status = -1;
            Date startTime2 = null;
            Date endTime2 = null;
            if(model.getTime() > 0){
                if(model.getStatus() == 0){// 如果状态为待收，则查询时间为当前时间加上model.getTime()
                    startTime1 = DateUtil.getDayStartTime(System.currentTimeMillis()/1000);
                    jpql.append(" AND p1.status = 0 AND p1.repayment_time >= :startTimeA AND p1.repayment_time <= :endTimeA");
                    if (model.getTime() == 7) {
                        endTime1 = DateUtil.rollDay(startTime1, 7);
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                    } else if (model.getTime() > 0 && model.getTime() < 4){
                        endTime1 = DateUtil.rollMon(startTime1, model.getTime());
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                    }
                }else if(model.getStatus() == 1){// 如果状态为已收，则查询时间为当前时间减去model.getTime()
                    endTime1 = DateUtil.getDayStartTime(System.currentTimeMillis()/1000);
                    jpql.append(" AND p1.status = 1 AND p1.repayment_time >= :startTimeA AND p1.repayment_time <= :endTimeA");
                    if (model.getTime() == 7) {
                        startTime1 = DateUtil.rollDay(endTime1, -7);
                        startTime1 = DateUtil.getDayEndTime(startTime1.getTime() / 1000);
                    } else if (model.getTime() > 0 && model.getTime() < 4){
                        startTime1 = DateUtil.rollMon(endTime1, -model.getTime());
                        startTime1 = DateUtil.getDayEndTime(startTime1.getTime() / 1000);
                    }
                }else if(model.getStatus() == -1){
                    jpql.append(" AND ( (p1.status = 0 AND p1.repayment_time >= :startTimeA AND p1.repayment_time <= :endTimeA)");
                    jpql.append(" OR ( p1.status = 1 AND p1.repayment_time >= :startTimeB AND p1.repayment_time <= :endTimeB ) )");
                    startTime1 = DateUtil.getDayStartTime(System.currentTimeMillis()/1000);
                    endTime2 = startTime1;
                    if (model.getTime() == 7) {
                        // 待收信息时间处理
                        endTime1 = DateUtil.rollDay(startTime1, 7);
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                        // 已收信息时间处理
                        startTime2 = DateUtil.rollDay(endTime2, -7);
                        startTime2 = DateUtil.getDayEndTime(startTime2.getTime() / 1000);
                        
                    } else if (model.getTime() > 0 && model.getTime() < 4){
                        // 待收信息时间处理
                        endTime1 = DateUtil.rollMon(startTime1, model.getTime());
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                        // 已收信息时间处理
                        startTime2 = DateUtil.rollMon(endTime2, -model.getTime());
                        startTime2 = DateUtil.getDayEndTime(startTime2.getTime() / 1000);
                    } 
                }
            }else if(model.getTime() <= 0 && model.getStatus() > -1){
                status = model.getStatus();
                jpql.append(" AND p1.status = :status");
            }
          //JSDP-197 债权转让的待收记录不包含在内 wcw 2015-06-26 start
            jpql.append(" and p1.type<>2 ");
          //JSDP-197 债权转让的待收记录不包含在内 wcw 2015-06-26 end
            
            //JSDP-61 gjh 2015-5-10 start
            //jpql.append(" ORDER BY p1.id ASC");
            jpql.append(" ORDER BY p1.repayment_time ASC");
            //JSDP-61 gjh 2015-5-10 end
            Query query = em.createNativeQuery(jpql.toString());
            if (userId > 0) {
                query.setParameter("userId", userId);
            }
            if (period > 0) {
            	query.setParameter("period", period - 1);
            }
            if (status > -1) {
                query.setParameter("status", status);
            }
            if (startTime1 != null) {
                query.setParameter("startTimeA", startTime1);
            }
            if (endTime1 != null) {
                query.setParameter("endTimeA", endTime1);
            }
            if (startTime2 != null) {
                query.setParameter("startTimeB", startTime2);
            }
            if (endTime2 != null) {
                query.setParameter("endTimeB", endTime2);
            }
            if(investUserName.length() > 0){
                query.setParameter("investUserName", "%"+investUserName+"%");
            }
            int count = ((BigInteger) query.getSingleResult()).intValue();
            return count;
        }
        return 0;
    }
 // JSDP-206  wcw 2015-07-02 end
    @Override
    public double sumInterest() {
        StringBuffer jpql = new StringBuffer("SELECT SUM(p1.interest) FROM rd_borrow_collection p1 WHERE p1.status = 1");
        Query q = em.createNativeQuery(jpql.toString());
        double interest = 0;
        Object obj = q.getSingleResult();
        if (obj != null) {
            interest = Double.parseDouble(obj.toString());
        }
        return interest;
    }

	@Override
	public List<BorrowCollection> getMemberCollectionList(User user,
			Borrow borrow,long tenderid) {
		StringBuffer jpql = new StringBuffer("SELECT  p1.* FROM rd_borrow_collection p1 ");
        jpql.append(" WHERE p1.status <> 1  AND p1.user_id = :userId AND p1.borrow_id= :borrowId AND p1.tender_id = :tenderID");
        Query query = em.createNativeQuery(jpql.toString(), BorrowCollection.class);
        query.setParameter("userId", user.getUserId());
        query.setParameter("borrowId", borrow.getId());
        query.setParameter("tenderID", tenderid);
        List<BorrowCollection> list = (List<BorrowCollection>) query.getResultList();
        return list;
	}

	@Override
	public double getCollectionTotal(User user, Borrow borrow,long tenderid) {
		StringBuffer jpql = new StringBuffer("SELECT  SUM(p1.repayment_account) FROM rd_borrow_collection p1");
        jpql.append(" WHERE p1.status = 0   AND p1.user_id = :userId AND p1.borrow_id= :borrowId AND p1.tender_id = :tenderID");
        Query query = em.createNativeQuery(jpql.toString());
        query.setParameter("userId", user.getUserId());
        query.setParameter("borrowId", borrow.getId());
        query.setParameter("tenderID", tenderid);
        Object obj = query.getSingleResult();
        double interest = 0;
        if (obj != null) {
            interest = Double.parseDouble(obj.toString());
        }
		return interest;
	}

	@Override
	public double getCapitalTotal(User user, Borrow borrow,long tenderid) {
		StringBuffer jpql = new StringBuffer("SELECT  SUM(p1.capital) FROM rd_borrow_collection p1");
        jpql.append(" WHERE p1.status = 0 AND p1.user_id = :userId AND p1.borrow_id= :borrowId AND p1.tender_id = :tenderID");
        Query query = em.createNativeQuery(jpql.toString());
        query.setParameter("userId", user.getUserId());
        query.setParameter("borrowId", borrow.getId());
        query.setParameter("tenderID", tenderid);
        Object obj = query.getSingleResult();
        double interest = 0;
        if (obj != null) {
            interest = Double.parseDouble(obj.toString());
        }
		return interest;
	}
	
	@Override
	public Object[] getCollectionRepayTotal(Borrow borrow,long tenderid,long status) {
		StringBuffer jpql = new StringBuffer("SELECT  SUM(p1.capital),sum(p1.repayment_account),sum(p1.interest) FROM rd_borrow_collection p1");
        jpql.append(" WHERE p1.status = :status   AND p1.borrow_id= :borrowId AND p1.tender_id = :tenderID");
        Query query = em.createNativeQuery(jpql.toString());
        query.setParameter("status", status);
        query.setParameter("borrowId", borrow.getId());
        query.setParameter("tenderID", tenderid);
        Object[] obj = (Object[]) query.getSingleResult();
		return obj;
	}

	@Override
	public double getCollectionRepayCapitalTotal(Borrow borrow,long tenderid,long status,long type) {
		StringBuffer jpql = new StringBuffer("SELECT  SUM(p1.capital) FROM rd_borrow_collection p1");
        jpql.append(" WHERE p1.status = :status and p1.type=:type   AND p1.borrow_id= :borrowId AND p1.tender_id = :tenderID");
        Query query = em.createNativeQuery(jpql.toString());
        query.setParameter("status", status);
        query.setParameter("borrowId", borrow.getId());
        query.setParameter("tenderID", tenderid);
        query.setParameter("type", type);
        Object obj = (Object) query.getSingleResult();
        double capitalTotal = 0;
        if (obj != null) {
        	capitalTotal = Double.parseDouble(obj.toString());
        }
		return capitalTotal;
	}
	/* (non-Javadoc)
	 * @see com.rongdu.p2psys.borrow.dao.BorrowCollectionDao#getThisPeriod(com.ddtkj.p2psys.user.domain.User, com.rongdu.p2psys.borrow.domain.Borrow, int)
	 */
	@Override
	public BorrowCollection getThisPeriod(User user, Borrow borrow,int period,long tenderid) {
		StringBuffer jpql = new StringBuffer("SELECT  p1.* FROM rd_borrow_collection p1");
        jpql.append(" WHERE p1.user_id = :userId AND p1.borrow_id =:borrowId AND p1.period =:period AND p1.tender_id = :tenderID ");
        Query query = em.createNativeQuery(jpql.toString(), BorrowCollection.class);
        query.setParameter("userId", user.getUserId());
        query.setParameter("borrowId", borrow.getId());
        query.setParameter("period", period);
        query.setParameter("tenderID", tenderid);
        try{
        	if(query.getResultList().size()==0 ){
                return null;
            }else{
            	BorrowCollection b = (BorrowCollection) query.getSingleResult();
            	return b;
            }
        }catch(Exception e){
        	e.printStackTrace(); 
        	return null ;
        }
	}

	@Override
	public double getHaveInsterest(User user, Borrow borrow,long tenderid) {
		StringBuffer jpql = new StringBuffer("SELECT  SUM(p1.interest) FROM rd_borrow_collection p1");
        jpql.append(" WHERE p1.status = 1 AND p1.user_id = :userId AND p1.borrow_id= :borrowId AND p1.tender_id = :tenderID");
        Query query = em.createNativeQuery(jpql.toString());
        query.setParameter("userId", user.getUserId());
        query.setParameter("borrowId", borrow.getId());
        query.setParameter("tenderID", tenderid);
        Object obj = query.getSingleResult();
        double interest = 0;
        if (obj != null) {
            interest = Double.parseDouble(obj.toString());
        }
		return interest;
	}

	@Override
	public int getCollectedSum(long userId, Date startTime,Date endTime,int type) {
		QueryParam param = QueryParam.getInstance();
		param.addParam("status", 1);
		param.addParam("user.userId", userId);
		param.addParam("type", type);
		param.addParam("repaymentYesTime", Operators.GTE, startTime);
		param.addParam("repaymentYesTime", Operators.LTE, endTime);
		return countByCriteria(param);
	}

	@Override
	public double getBorrowCollectedInterest(long userId, Date startTime,
			Date endTime) {

		 StringBuffer jpql = new StringBuffer("SELECT SUM(p1.interest) FROM rd_borrow_collection p1");
	        jpql.append(" WHERE ");
	        jpql.append("  p1.status = 1 AND p1.user_id = :userId ");
	        if(startTime != null){
	        	
	        	jpql.append(" AND p1.repayment_yes_time >= :startTime ");
	        }
	        jpql.append(" AND p1.repayment_yes_time <= :endTime ");
	        Query q = em.createNativeQuery(jpql.toString());
	        q.setParameter("userId", userId);
	        if(startTime != null){
	        	
	        	q.setParameter("startTime", startTime);
	        }
	        q.setParameter("endTime", endTime);
	        double interest = 0;
	        Object obj = q.getSingleResult();
	        if (obj != null) {
	            interest = Double.parseDouble(obj.toString());
	        }
	        return interest;
	}

	@Override
	public double getBorrowCollectedLateInterest(long userId, Date startTime,
			Date endTime) {
		 StringBuffer jpql = new StringBuffer("SELECT SUM(p1.late_interest) FROM rd_borrow_collection p1");
	        jpql.append("  WHERE  ");
	        jpql.append("  p1.status = 1 AND p1.user_id = :userId ");
	        if(startTime != null){
	        	
	        	jpql.append(" AND p1.add_time >= :startTime ");
	        }
	        jpql.append(" AND p1.add_time <= :endTime ");
	        Query q = em.createNativeQuery(jpql.toString());
	        q.setParameter("userId", userId);
	        if(startTime != null){
	        	
	        	q.setParameter("startTime", startTime);
	        }
	        q.setParameter("endTime", endTime);
	        double lateInterest = 0;
	        Object obj = q.getSingleResult();
	        if (obj != null) {
	        	lateInterest = Double.parseDouble(obj.toString());
	        }
	        return lateInterest;
	}

	@Override
	public double getCollectionTotalByCredit(CreditLog ca) {
		StringBuffer jpql = new StringBuffer("SELECT  SUM(p1.repayment_account) FROM rd_borrow_collection p1 right join t_jsd_collection_credit t ON t.collection_id = p1.id");
        jpql.append(" WHERE p1.status=0 and t.cl_id= :byCreidt");
        Query query = em.createNativeQuery(jpql.toString());
        query.setParameter("byCreidt", ca.getId());
        Object obj = query.getSingleResult();
        double interest = 0;
        if (obj != null) {
            interest = Double.parseDouble(obj.toString());
        }
		return interest;
	}

	@Override
	public BorrowCollectionModel getThisPeriodByCredit(CreditLog ca,int period) {
		StringBuffer jpql = new StringBuffer("SELECT  p1.* FROM rd_borrow_collection p1 right join t_jsd_collection_credit t ON t.collection_id = p1.id ");
        jpql.append(" WHERE p1.status=0 and t.cl_id= :byCreidtLog AND p1.period=:period and p1.status =0 and p1.type<>2");
        Query query = em.createNativeQuery(jpql.toString(), BorrowCollection.class);
        query.setParameter("byCreidtLog", ca.getId());
        query.setParameter("period", period);
    	Object obj = null ;
        try{
        	obj = query.getSingleResult();
        }catch(Exception e){
        	obj = null ;
        }
        BorrowCollectionModel mc = null;
        if (obj != null) {
        	mc = BorrowCollectionModel.instance((BorrowCollection) obj) ;
        }
		return mc;
	}

	@Override
	public double getCapitalTotalByCredit(CreditLog ca) {
		StringBuffer jpql = new StringBuffer("SELECT  SUM(p1.capital) FROM rd_borrow_collection p1  right join t_jsd_collection_credit t ON t.collection_id = p1.id ");
        jpql.append("  WHERE p1.status=0 and t.cl_id= :byCreidt");
        Query query = em.createNativeQuery(jpql.toString());
        query.setParameter("byCreidt", ca.getId());
        Object obj = query.getSingleResult();
        double interest = 0;
        if (obj != null) {
            interest = Double.parseDouble(obj.toString());
        }
		return interest;
	}
	@Override
	public double getHaveInsterestByCredit(CreditLog ca) {
		StringBuffer jpql = new StringBuffer("SELECT  SUM(p1.interest) FROM rd_borrow_collection p1 right join t_jsd_collection_credit t ON t.collection_id = p1.id ");
        jpql.append(" WHERE p1.status=1 and  t.cl_id= :byCreidt");
        Query query = em.createNativeQuery(jpql.toString());
        query.setParameter("byCreidt", ca.getId());
        Object obj = query.getSingleResult();
        double interest = 0;
        if (obj != null) {
            interest = Double.parseDouble(obj.toString());
        }
		return interest;
	}
	
	@Override
	public double getCollectionSum(int status,long userId){
		String sql="select sum(capital) from rd_borrow_collection where status=:status and user_id=:userId";
		Query q = em.createNativeQuery(sql).setParameter("userId", userId);
        q.setParameter("status", status);
        double capitalSum = 0;
        Object obj = q.getSingleResult();
        if (obj != null) {
        	capitalSum = Double.parseDouble(obj.toString());
        }
        return capitalSum;
	}
	@Override
    public List<BorrowCollection> getCollectionListByStatus(int status,int aheadtime){
    	String repaymentTime=System.currentTimeMillis()/1000+aheadtime+"";
    	//JSDBET-835 wcw 2015-3-20 start //摒除collection中type=2的待收记录
    	String sql="SELECT br.* FROM rd_borrow_collection br,rd_borrow b WHERE br.`borrow_id`=b.`id` AND br.`status`=:status AND b.`type`in(113,115) AND UNIX_TIMESTAMP(br.`repayment_time`)<=:repaymentTime and br.type not in (2)";
    	//JSDBET-835 wcw 2015-3-20 end //摒除collection中type=2的待收记录
    	Query query = em.createNativeQuery(sql, BorrowCollection.class);
         query.setParameter("status", status);
         query.setParameter("repaymentTime", repaymentTime);
		List<BorrowCollection> list = query.getResultList();
         return list;
    }

	@Override
	public PageDataList<BorrowCollection> getList(long borrowId,int page,int size,int lastPeriod) {
		QueryParam param = QueryParam.getInstance() ;
		param.addParam("borrow.id", borrowId) ;
		param.addParam("period", lastPeriod) ;
		param.addParam("type",Operators.NOTEQ,2) ;
		return findPageList(param);
	}

	@Override
	public String collectionTotal(BorrowCollectionModel model) {
		
		

        StringBuffer jpql = new StringBuffer("SELECT sum(p5.capital),sum(p5.interest),sum(p5.repaymentAccount) from (SELECT DISTINCT p1.id,p1.user_id,p1.period,p1.capital AS capital, p1.interest AS interest, p1.repayment_account AS repaymentAccount FROM rd_borrow_collection p1,");
        jpql.append("  rd_borrow p3, t_jsd_user p4 WHERE ");
        jpql.append("  p1.borrow_id = p3.id AND p4.user_id = p1.user_id");
        StringBuffer collectionTotalStr = new StringBuffer();
        long userId = 0;
      //JSDP-85 gjh 2015-5-6 start
        long borrowId = 0;
        //JSDP-85 gjh 2015-5-6 end
        String investUserName = "";
        if (model != null) {
        	//JSDP-85 gjh 2015-5-6 start
        	if(model.getBorrowId() != 0){
        		jpql.append(" AND p3.id = :borrowId");
        		borrowId = model.getBorrowId();
        	}
        	//JSDP-85 gjh 2015-5-6 end
            if(model.getUser() != null && model.getUser().getUserId() > 0){
                jpql.append(" AND p1.user_id = :userId");
                userId = model.getUser().getUserId();
            }
            if(model.getInvestUserName() != null && model.getInvestUserName().length() > 0){
                investUserName = model.getInvestUserName();
                jpql.append(" AND p4.user_name LIKE :investUserName");
            }
            Date startTime1 = null;
            Date endTime1 = null;
            String contractNo = null;
            int type = 0;
            if (StringUtil.isNotBlank(model.getStartTime())) {
                //startTime1 = DateUtil.valueOf(model.getStartTime() + " 00:00:00");
                startTime1 = DateUtil.valueOf(model.getStartTime());
                jpql.append(" AND p1.repayment_time >= :startTimeA");
            }
            if (StringUtil.isNotBlank(model.getEndTime())) {
                //endTime1 = DateUtil.valueOf(model.getEndTime() + " 23:59:59");
                endTime1 = DateUtil.valueOf(model.getEndTime());
                jpql.append(" AND p1.repayment_time <= :endTimeA");
            }
            if(!StringUtil.isBlank(model.getContractNo())){
            	contractNo = model.getContractNo();
            	jpql.append(" AND p3.deal_no = :contractNo");
            }
            if(!StringUtil.isBlank(model.getType())){
            	type = model.getType();
            	jpql.append(" AND p3.type = "+type+" ");
            }
            int status = -1;
            Date startTime2 = null;
            Date endTime2 = null;
            if(model.getTime() > 0){
                if(model.getStatus() == 0){// 如果状态为待收，则查询时间为当前时间加上model.getTime()
                    startTime1 = DateUtil.getDayStartTime(System.currentTimeMillis()/1000);
                    jpql.append(" AND p1.status = 0 AND p1.repayment_time >= :startTimeA AND p1.repayment_time <= :endTimeA");
                    if (model.getTime() == 7) {
                        endTime1 = DateUtil.rollDay(startTime1, 7);
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                    } else if (model.getTime() > 0 && model.getTime() < 4){
                        endTime1 = DateUtil.rollMon(startTime1, model.getTime());
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                    }
                }else if(model.getStatus() == 1){// 如果状态为已收，则查询时间为当前时间减去model.getTime()
                    endTime1 = DateUtil.getDayStartTime(System.currentTimeMillis()/1000);
                    jpql.append(" AND p1.status = 1 AND p1.repayment_time >= :startTimeA AND p1.repayment_time <= :endTimeA");
                    if (model.getTime() == 7) {
                        startTime1 = DateUtil.rollDay(endTime1, -7);
                        startTime1 = DateUtil.getDayEndTime(startTime1.getTime() / 1000);
                    } else if (model.getTime() > 0 && model.getTime() < 4){
                        startTime1 = DateUtil.rollMon(endTime1, -model.getTime());
                        startTime1 = DateUtil.getDayEndTime(startTime1.getTime() / 1000);
                    }
                }else if(model.getStatus() == -1){
                    jpql.append(" AND ( (p1.status = 0 AND p1.repayment_time >= :startTimeA AND p1.repayment_time <= :endTimeA)");
                    jpql.append(" OR ( p1.status = 1 AND p1.repayment_time >= :startTimeB AND p1.repayment_time <= :endTimeB ) )");
                    startTime1 = DateUtil.getDayStartTime(System.currentTimeMillis()/1000);
                    endTime2 = startTime1;
                    if (model.getTime() == 7) {
                        // 待收信息时间处理
                        endTime1 = DateUtil.rollDay(startTime1, 7);
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                        // 已收信息时间处理
                        startTime2 = DateUtil.rollDay(endTime2, -7);
                        startTime2 = DateUtil.getDayEndTime(startTime2.getTime() / 1000);
                        
                    } else if (model.getTime() > 0 && model.getTime() < 4){
                        // 待收信息时间处理
                        endTime1 = DateUtil.rollMon(startTime1, model.getTime());
                        endTime1 = DateUtil.getDayEndTime(endTime1.getTime() / 1000);
                        // 已收信息时间处理
                        startTime2 = DateUtil.rollMon(endTime2, -model.getTime());
                        startTime2 = DateUtil.getDayEndTime(startTime2.getTime() / 1000);
                    } 
                }
            }else if(model.getTime() <= 0 && model.getStatus() > -1){
                status = model.getStatus();
                jpql.append(" AND p1.status = :status");
            }
            
            String borrowName = "";
            if(model.getBorrowName() != null && model.getBorrowName().length() > 0 && !"undefined".equals(model.getBorrowName()) ){
                borrowName = model.getBorrowName();
                jpql.append(" AND p3.name LIKE :borrowName");
            }
            jpql.append(" AND p4.islocked != 'FF' ");
            jpql.append(" ORDER BY p1.id ASC ) p5");
            Query query = em.createNativeQuery(jpql.toString());
          //JSDP-85 gjh 2015-5-6 start
            if (borrowId > 0) {
            	query.setParameter("borrowId", borrowId);
            }
            //JSDP-85 gjh 2015-5-6 end
            if (userId > 0) {
                query.setParameter("userId", userId);
            }
            if (status > -1) {
                query.setParameter("status", status);
            }
            if (startTime1 != null) {
                query.setParameter("startTimeA", startTime1);
            }
            if (endTime1 != null) {
                query.setParameter("endTimeA", endTime1);
            }
            if (startTime2 != null) {
                query.setParameter("startTimeB", startTime2);
            }
            if (endTime2 != null) {
                query.setParameter("endTimeB", endTime2);
            }
            if(investUserName.length() > 0){
                query.setParameter("investUserName", "%"+investUserName+"%");
            }
            if(borrowName.length() > 0){
                query.setParameter("borrowName", "%"+borrowName+"%");
            }
            if(contractNo != null){
            	query.setParameter("contractNo", contractNo);
            }
           
            Object obj = query.getSingleResult();
            Object[] objs = new Object[3];
    		objs = (Object[]) obj;
    		for(int i=0;i<objs.length;i++){
    			if(objs[i]==null){
    				return null;
    			}else{
    				collectionTotalStr.append(objs[i].toString()+",");
    			}
    		}
        }
        return collectionTotalStr.toString();
    
		
	}
	
	@Override
	public List<BorrowCollection> excelBorrowCollectionList(BorrowCollectionModel model) {
		//JSDP-116 sxy 2015-05-15 start
		StringBuffer  sql = new StringBuffer();
		sql.append(" SELECT t1.id, t3.user_name, t2.id as borrowId, t2.name, "
				//+ "t2.time_limit, "
				
				+ " CASE  t2.borrow_time_type "
				+ " WHEN  0 THEN CONCAT(t2.time_limit, '月') "
				+ " WHEN  1 THEN CONCAT(t2.time_limit, '天') "
				+ " ELSE '其他' END AS timelimit, "
				
				//+ "t1.period, "
				
				+ " CASE t1.period "
				+ " WHEN  t1.period THEN t1.period "
				+ " ELSE t1.period END AS period1, "
				
				
				+ " CASE t2.type "
				+ " WHEN  103 THEN '车贷宝' "
				+ " WHEN  113 THEN '能源宝' "
				+ " WHEN  105 THEN '分期宝' "
				+ " WHEN  115 THEN '网商贷' "
				+ " ELSE '其他' END AS borrowtype, "
				+ " t1.repayment_account,t1.capital,t1.compensatory_interest,t2.deal_no, "
				
				+ " CASE t1.status "
				+ " WHEN  0 THEN '未还款'  "
				+ " WHEN  1 THEN '已还款'  "
				+ " WHEN  2 THEN '债权转让'  "
				+ " ELSE '其他' END AS repaystatus, "
				
				+ " CASE t1.type "
				+ " WHEN  0 THEN '正常待收'  "
				+ " WHEN  2 THEN '债权转让'  "
				+ " ELSE '其他' END AS repaytype, "
				
				+ " t1.repayment_time, "
				
				+ " CASE t1.repay_contrast_result "
				+ " WHEN  1 THEN '掉单'  "
				+ " WHEN  2 THEN '掉单'  "
				+ " ELSE '正常' END AS repaycontraststatus "
				
				+ " FROM rd_borrow_collection t1,rd_borrow t2, t_jsd_user t3 WHERE t1.borrow_id = t2.id AND t3.user_id = t1.user_id ");
		
		// 借款标名
		if(StringUtil.isNotBlank(model.getBorrowName())){
			sql.append(" AND t2.name like '%"+model.getBorrowName()+"%' ");
		}
		// 借款标编号
		if(0 != model.getBorrowId()){
			sql.append(" AND t2.id = "+model.getBorrowId()+" ");
		}
		// 投资人
		if(StringUtil.isNotBlank(model.getInvestUserName())){
			sql.append(" AND t3.user_name like '%" + model.getInvestUserName() + "%' ");
		}
		// 状态
		if(model.getStatus() > -1){
			sql.append(" AND t1.status = "+model.getStatus()+" ");
		}
		// 类型（0普通待收;1债权转让）
		if(model.getType() > -1){
			if(11 == model.getType()){
				sql.append(" AND t1.type = 0 ");
			}else if(22 == model.getType()){
				sql.append(" AND t1.type = 2 ");
			}
		}
		// 合同号
		if(StringUtil.isNotBlank(model.getContractNo())){
			//sql.append(" AND t2.deal_parent = "+model.getContractNo()+" ");
			sql.append(" AND t2.deal_no = "+model.getContractNo()+" ");
		}
		// 投资人注册时间-开始
		if (StringUtil.isNotBlank(model.getRegisterStartTime())) {
			sql.append(" AND t3.add_time >= '"+model.getRegisterStartTime()+"' ");
		}
		// 投资人注册时间-结束
		if (StringUtil.isNotBlank(model.getRegisterEndTime())) {
			sql.append(" AND t3.add_time <= '"+model.getRegisterEndTime()+"' ");
		}
		// 预计收款时间-开始
		if (StringUtil.isNotBlank(model.getStartTime())) {
			sql.append(" AND t1.repayment_time >= '"+model.getStartTime()+"' ");
		}
		// 预计收款时间-结束
		if (StringUtil.isNotBlank(model.getEndTime())) {
			sql.append(" AND t1.repayment_time <= '"+model.getEndTime()+"' ");
		}
		//--------------------------------------
		Query query = em.createNativeQuery(sql.toString());
		//--------------------------------------
		// 借款标名
		/*if(StringUtil.isNotBlank(model.getBorrowName())){
			query.setParameter("borrowName", model.getBorrowName());
		}
		// 借款标编号
		if (0 != model.getBorrowId()) {
			query.setParameter("borrowId", model.getBorrowId());
		}
		// 投资人
		if (StringUtil.isNotBlank(model.getInvestUserName())) {
			query.setParameter("investUserName", model.getInvestUserName());
		}
		// 状态
		if (model.getStatus() > -1) {
			query.setParameter("status", model.getStatus());
		}
		// 合同号
		if (StringUtil.isNotBlank(model.getContractNo())) {
			query.setParameter("contractNo", model.getContractNo());
		}
		// 预计收款时间-开始
		if (StringUtil.isNotBlank(model.getStartTime())) {
			query.setParameter("startTime", model.getStartTime());
		}
		// 预计收款时间-结束
		if (StringUtil.isNotBlank(model.getEndTime())) {
			query.setParameter("endTime", model.getEndTime());
		}
		// 投资人注册时间-开始
		if (StringUtil.isNotBlank(model.getRegisterStartTime())) {
			query.setParameter("registerStartTime", model.getRegisterStartTime());
		}
		// 投资人注册时间-结束
		if (StringUtil.isNotBlank(model.getRegisterEndTime())) {
			query.setParameter("registerEndTime", model.getRegisterEndTime());
		}
*/
		List scoreList = query.getResultList();
		//JSDP-116 sxy 2015-05-15 start
		return scoreList;
	}
	
	
	public static void main(String[] args) {
		System.out.println(System.currentTimeMillis()/1000);
	}

}
