package com.rongdu.p2psys.core.executer;

import java.util.HashMap;
import java.util.Map;

import org.apache.log4j.Logger;

import com.ddtkj.p2psys.account.domain.Account;
import com.rongdu.common.util.BigDecimalUtil;
import com.rongdu.common.util.NumberUtil;
import com.rongdu.p2psys.core.domain.Operator;
import com.rongdu.p2psys.core.util.BeanUtil;
import com.rongdu.p2psys.user.dao.UserDao;
import com.ddtkj.p2psys.user.domain.User;

public abstract class AbstractExecuter implements Executer {

	Logger logger = Logger.getLogger(AbstractExecuter.class);
	protected double money;
	protected User user;
	protected Operator operator;
	protected User toUser;
	protected String email;
	protected String mobile;
	
    protected Map<String, Object> map=new HashMap<String, Object>();	
    //投资人使用各类操作金额
    protected double rechargeMoney;
    protected double awardMoney;
    protected double interestMoney;
    protected double returnCapitalMoney;
    protected double rpDynamicMoney ;
    protected double petCardMoney;//JSDP-171 xingjia 20150716 start 三次修改
    //JSDP-228  fengguoqin 2015.07.25 start
    protected double rpStaticMoney;//静态红包金额  
    //JSDP-228  fengguoqin 2015.07.25 end
    //借款人使用各类操作金额
    protected double borrowerRechargeMoney;
    protected double borrowerEnterMoney;
    protected double borrowerRepayInterest;
    
    protected String tradeNo;//交易批次号
    protected String outTradeNo;//交易流水号
  //JSDP-184 xingjia 20150618 start
    protected String logType;//日志类型
  //JSDP-184 xingjia 20150618 end
	//---------------因3.0业务逻辑新增如下方法---start----
	@Override
	public void execute(Map<String, Object> map, User user, Operator operator, User toUser) {
		this.map=map;
		this.rechargeMoney=(Double) (map.get("rechargeMoney")==null?0.0:map.get("rechargeMoney"));
		this.awardMoney=(Double) (map.get("awardMoney")==null?0.0:map.get("awardMoney"));
		this.interestMoney=(Double) (map.get("interestMoney")==null?0.0:map.get("interestMoney"));
		this.returnCapitalMoney=(Double) (map.get("returnCapitalMoney")==null?0.0:map.get("returnCapitalMoney"));
		this.rpDynamicMoney = (Double) (map.get("rpDynamicMoney")==null?0.0:map.get("rpDynamicMoney")) ;
		//借款人冻结金额
		this.borrowerRechargeMoney=(Double) (map.get("borrowerRechargeMoney")==null?0.0:map.get("borrowerRechargeMoney"));
		this.borrowerEnterMoney=(Double) (map.get("borrowerEnterMoney")==null?0.0:map.get("borrowerEnterMoney"));
		this.borrowerRepayInterest=(Double) (map.get("borrowerRepayInterest")==null?0.0:map.get("borrowerRepayInterest"));
		this.money=(Double) (map.get("money")==null?0.0:map.get("money")) ;
		//交易相关订单号以及批次号
		this.tradeNo=(String) (map.get("tradeNo")==null?"":map.get("tradeNo"));
		this.outTradeNo=(String) (map.get("outTradeNo")==null?"":map.get("outTradeNo"));
		//JSDP-184 xingjia 20150618 start
		this.logType = (String) (map.get("logType")==null?"":map.get("logType"));
		//JSDP-184 xingjia 20150618 end
		this.operator = operator;
		this.user = user;
		this.toUser = toUser;
		//JSDP-171 xingjia 20150716 start 三次修改
		this.petCardMoney = (Double) (map.get("petCardMoney")==null?0.0:map.get("petCardMoney"));
		//JSDP-171 xingjia 20150716 end 三次修改
		//JSDP-228  fengguoqin 2015.07.25 start
		this.rpStaticMoney = (Double) (map.get("rpStaticMoney")==null?0.0:map.get("rpStaticMoney"));
		 //JSDP-228  fengguoqin 2015.07.25 end
		// 业务预处理
		 prepare();
		// 更新账户
		handleAccount();
		// 添加资金记录
		addAccountLog();
		// 资金统计
		handleAccountSum();
		// 积分处理
		handlePoints();
		// 通知处理
		handleNotice();
		// 第三方接口
		handleInterface();
		// 操作日志记录记录
		addOperateLog();
		//fgqa 回款续投奖励生成 3.30  start
		handleReturnMoney();
		//fgq 回款续投奖励生成 3.30 end
		// 扩展处理
		extend();
		
	}

	@Override
	public void execute(Map<String, Object> map, User user) {
		execute(map, user, null, null);
		
	}

	@Override
	public void execute(Map<String, Object> map, User user, User toUser) {
		execute(map, user, null, toUser);
	}

	@Override
	public void execute(Map<String, Object> map, long userId, Operator operator) {
		UserDao userDao = (UserDao) BeanUtil.getBean("userDao");
		execute(map, userDao.getUserById(userId), operator, null);
	}
	//---------------因3.0业务逻辑新增如下方法---end----
	@Override
	public void execute(double money, User user, Operator operator, User toUser) {
		this.money = BigDecimalUtil.round(money, 2);
		this.user = user;
		this.operator = operator;
		this.toUser = toUser;
		// 业务预处理
		 prepare();
		// 更新账户
		handleAccount();
		// 添加资金记录
		addAccountLog();
		// 资金统计
		handleAccountSum();
		// 积分处理
		handlePoints();
		// 通知处理
		handleNotice();
		// 第三方接口
		handleInterface();
		// 操作日志记录记录
		addOperateLog();
		// 扩展处理
		extend();
	}

	@Override
	public void execute(double money, User user) {
		execute(money, user, null, null);
	}

	@Override
	public void execute(double money, User user, User toUser) {
		execute(money, user, null, toUser);
	}

	@Override
	public void execute(double money, long userId, Operator operator) {
		UserDao userDao = (UserDao) BeanUtil.getBean("userDao");
		execute(money, userDao.getUserById(userId), operator, null);
	}

	@Override
	public abstract void prepare();

	@Override
	public abstract void addAccountLog();

	@Override
	public abstract void handleAccount();

	@Override
	public abstract void handleAccountSum();

	@Override
	public abstract void handlePoints();

	@Override
	public abstract void handleNotice();

	@Override
	public abstract void addOperateLog();

	@Override
	public abstract void handleInterface();

	
	
	
	@Override
	public abstract void handleReturnMoney();

	@Override
	public abstract void extend();

	public void execute(String email, String mobile) {
		// TODO Auto-generated method stub
		setEmail(email);
		setMobile(mobile);
		execute(0,null,null,null);
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getMobile() {
		return mobile;
	}

	public void setMobile(String mobile) {
		this.mobile = mobile;
	}
	
}
