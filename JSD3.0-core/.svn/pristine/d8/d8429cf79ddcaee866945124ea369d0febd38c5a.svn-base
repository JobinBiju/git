package com.ddtkj.p2psys.tpp.ymd.model;

import java.io.UnsupportedEncodingException;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.log4j.Logger;

import com.alibaba.fastjson.JSONObject;
import com.rongdu.common.exception.BussinessException;
import com.rongdu.common.util.ReflectUtil;
import com.rongdu.common.util.StringUtil;
/**
 * @描述：汇潮提现工具类
 * @作者:wangchangwei@ddtkj.com
 * @创建时间: 2014年12月8日
 */
public class YmdCashDetails extends YmdModel{
	private static Logger logger = Logger.getLogger(YmdCashDetails.class);
	private String bankName; //转账信息，银行名称
	private String provice;  //开户省份
	private String city;  //开户市
	private String branchName;  //支行名称
	private String cardNo;  //银行卡号
	private String secureCode;  //签名信息
	private String[] paramNames=new String[]{"outTradeNo","bankName","provice","city","branchName","nickName","cardNo","amount","fee","remark","secureCode"};
	public YmdCashDetails() {
		super();
	}
	
	
	/**
     * 获取充值提交json格式签名明文
     * @return
     */
   public String  SumitSignInfoJsonStr(){
	   JSONObject jsonObject=new JSONObject();
		if(StringUtil.isNotBlank(this.getNumberId())){
			jsonObject.put("number_id", this.getNumberId());
		}
		if(StringUtil.isNotBlank(this.getOutTradeNo())){
			jsonObject.put("out_trade_no", this.getOutTradeNo());
		}
		if(StringUtil.isNotBlank(this.getBankName())){
			jsonObject.put("bank_name", this.getBankName());
		}
		if(StringUtil.isNotBlank(this.getProvice())){
			jsonObject.put("provice", this.getProvice());
		}
		if(StringUtil.isNotBlank(this.getCity())){
			jsonObject.put("city", this.getCity());
		}
		if(StringUtil.isNotBlank(this.getBranchName())){
			jsonObject.put("branchName", this.getBranchName());
		}
		if(StringUtil.isNotBlank(this.getNickName())){
			jsonObject.put("nick_name", this.getNickName());
		}
		if(StringUtil.isNotBlank(this.getCardNo())){
			jsonObject.put("card_no", this.getCardNo());
		}
		if(StringUtil.isNotBlank(this.getAmount())){
			jsonObject.put("amount", this.getAmount());
		}
		if(StringUtil.isNotBlank(this.getFee())){
			jsonObject.put("fee", this.getFee());
		}
		if(StringUtil.isNotBlank(this.getRemark())){
			jsonObject.put("remark", this.getRemark());
		}
		if(StringUtil.isNotBlank(this.getMerchantKey())){
			jsonObject.put("merchantKey", this.getMerchantKey());
		}
       return  jsonObject.toJSONString();
   }
   
   /**
    * 获取充值回调json格式签名明文
    * @return
    */
  public String  returnSignInfoJsonStr(){
	  JSONObject jsonObject=new JSONObject();
	  if (StringUtil.isNotBlank(this.getNumberId())) {
		  jsonObject.put("number_id", this.getNumberId());
      }
      if (StringUtil.isNotBlank(this.getMode())) {
    	  jsonObject.put("mode", this.getMode());
      }
      if (StringUtil.isNotBlank(this.getOutTradeNo())) {
    	  jsonObject.put("out_trade_no", this.getOutTradeNo());
      }
      if (StringUtil.isNotBlank(this.getAmount())) {
    	  jsonObject.put("amount", this.getAmount());
      }
      if (StringUtil.isNotBlank(this.getFee())) {
    	  jsonObject.put("fee", this.getFee());
      }
      if (StringUtil.isNotBlank(this.getNickName())) {
    	  jsonObject.put("nick_name", this.getNickName());
      }
      if (StringUtil.isNotBlank(this.getErrCode())) {
    	  jsonObject.put("status", this.getErrCode());
    	  jsonObject.put("errorMsg", this.getErrMsg(this.getErrCode(), "一麻袋请求失败"));
      }
      if (StringUtil.isNotBlank(this.getMerchantKey())) {
    	  jsonObject.put("merchantKey", this.getMerchantKey());
      }
      return  jsonObject.toJSONString();
  }
    
	
	
	@Override
	public void createSign(){
		StringBuffer str=new StringBuffer();
		if(StringUtil.isNotBlank(this.getNumberId())){
			str.append(this.getNumberId());
		}
		if(StringUtil.isNotBlank(this.getOutTradeNo())){
			str.append(this.getOutTradeNo());
		}
		if(StringUtil.isNotBlank(this.getBankName())){
			str.append(this.getBankName());
		}
		if(StringUtil.isNotBlank(this.getProvice())){
			str.append(this.getProvice());
		}
		if(StringUtil.isNotBlank(this.getCity())){
			str.append(this.getCity());
		}
		if(StringUtil.isNotBlank(this.getBranchName())){
			str.append(this.getBranchName());
		}
		if(StringUtil.isNotBlank(this.getNickName())){
			str.append(this.getNickName());
		}
		if(StringUtil.isNotBlank(this.getCardNo())){
			str.append(this.getCardNo());
		}
		if(StringUtil.isNotBlank(this.getAmount())){
			str.append(this.getAmount());
		}
		if(StringUtil.isNotBlank(this.getFee())){
			str.append(this.getFee());
		}
		if(StringUtil.isNotBlank(this.getRemark())){
			str.append(this.getRemark());
		}
		if(StringUtil.isNotBlank(this.getMerchantKey())){
			str.append(this.getMerchantKey());
		}
		String signInfo=str.toString();
        logger.info("需要加密字符串======="+signInfo);
        try {
            signInfo = DigestUtils.md5Hex(signInfo.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e) {
            logger.info("签名异常信息====" + e.getMessage());
        } 
        logger.info("加密后字符串======="+signInfo);
        this.setSecureCode(signInfo);
	}
	
	public void checkSign(){
    	StringBuffer str = new StringBuffer();
        if (StringUtil.isNotBlank(this.getNumberId())) {
            str.append("number_id=").append(this.getNumberId()).append("&");
        }
        if (StringUtil.isNotBlank(this.getMode())) {
            str.append("mode=").append(this.getMode()).append("&");
        }
        if (StringUtil.isNotBlank(this.getOutTradeNo())) {
            str.append("out_trade_no=").append(this.getOutTradeNo()).append("&");
        }
        if (StringUtil.isNotBlank(this.getAmount())) {
            str.append("amount=").append(this.getAmount()).append("&");
        }
        if (StringUtil.isNotBlank(this.getFee())) {
            str.append("fee=").append(this.getFee()).append("&");
        }
        if (StringUtil.isNotBlank(this.getNickName())) {
            str.append("nick_name=").append(this.getNickName()).append("&");
        }
        if (StringUtil.isNotBlank(this.getErrCode())) {
            str.append("status=").append(this.getErrCode()).append("&");
        }
        if (StringUtil.isNotBlank(this.getMerchantKey())) {
            str.append("merchantKey=").append(this.getMerchantKey());
        }
        String localSign=str.toString();
        logger.info("需要加密字符串======="+localSign);
        try {
            localSign = DigestUtils.md5Hex(localSign.getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e) {
            logger.info("签名异常信息====" + e.getMessage());
        }
        logger.info("加密后字符串======="+localSign);
        if (localSign.equals(this.getSignInfo())) {
            logger.info("MD5验签通过！");
        }else{
            logger.info("验证签名失败：本地签名localSign======" + localSign + "，汇潮签名:pSign======="+this.getSignInfo()+"!!!");
            throw new BussinessException("验证签名失败！");
        }
    }
	
	 /**
     * 对中文参数进行加密
     */
    public void chineseEscape(){
        this.setNickName(urlEncoder(this.getNickName()));
        this.setRemark(urlEncoder(this.getRemark()));
    }
	
	public String getTranXml(String[] paramNames) {
        StringBuffer buf = new StringBuffer();
        if (paramNames.length > 0) {
            for (int i=0; i<paramNames.length; i++) {
                String name = paramNames[i];
                Object result = ReflectUtil.invokeGetMethod(getClass(), this, name);
                String value = (result == null ? "" : result.toString());
                buf.append("<" + name + ">");
                buf.append(value);
                buf.append("</"+name+">");
            }
        }
        return buf.toString();
    }
	public String getBankName() {
		return bankName;
	}
	public void setBankName(String bankName) {
		this.bankName = bankName;
	}
	public String getProvice() {
		return provice;
	}
	public void setProvice(String provice) {
		this.provice = provice;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}
	public String getBranchName() {
		return branchName;
	}
	public void setBranchName(String branchName) {
		this.branchName = branchName;
	}
	public String getCardNo() {
		return cardNo;
	}
	public void setCardNo(String cardNo) {
		this.cardNo = cardNo;
	}
	public String getSecureCode() {
		this.createSign(); 
		return secureCode;
	}
	public void setSecureCode(String secureCode) {
		this.secureCode = secureCode;
	}
	public String[] getParamNames() {
		return paramNames;
	}
	public void setParamNames(String[] paramNames) {
		this.paramNames = paramNames;
	}
	
	
	
	
}
