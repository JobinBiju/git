package com.rongdu.p2psys.user.service.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ddtkj.p2psys.account.dao.AccountDao;
import com.ddtkj.p2psys.user.constant.UserConstant;
import com.ddtkj.p2psys.user.domain.User;
import com.ddtkj.p2psys.user.domain.UserIdentify;
import com.ddtkj.p2psys.user.model.UserIdentifyModel;
import com.ddtkj.p2psys.user.model.UserModel;
import com.rongdu.common.model.jpa.PageDataList;
import com.rongdu.common.model.jpa.QueryParam;
import com.rongdu.common.model.jpa.OrderFilter.OrderType;
import com.rongdu.common.model.jpa.SearchFilter.Operators;
import com.rongdu.common.util.DateUtil;
import com.rongdu.common.util.StringUtil;
import com.rongdu.p2psys.core.Global;
import com.rongdu.p2psys.core.constant.Constant;
import com.rongdu.p2psys.core.dao.VerifyLogDao;
import com.rongdu.p2psys.core.domain.OperationLog;
import com.rongdu.p2psys.core.domain.Operator;
import com.rongdu.p2psys.core.domain.VerifyLog;
import com.rongdu.p2psys.core.executer.AbstractExecuter;
import com.rongdu.p2psys.core.executer.ExecuterHelper;
import com.rongdu.p2psys.core.service.OperationLogService;
import com.rongdu.p2psys.score.model.scorelog.BaseScoreLog;
import com.rongdu.p2psys.score.model.scorelog.tender.TenderScorePhoneLog;
import com.rongdu.p2psys.score.model.scorelog.tender.TenderScoreRealnameLog;
import com.rongdu.p2psys.user.dao.UserCacheDao;
import com.rongdu.p2psys.user.dao.UserDao;
import com.rongdu.p2psys.user.dao.UserIdentifyDao;
import com.rongdu.p2psys.user.dao.UserVipApplyDao;
import com.rongdu.p2psys.user.domain.UserVipApply;
import com.rongdu.p2psys.user.model.UserVipApplyModel;
import com.rongdu.p2psys.user.service.UserIdentifyService;

/**
 * 认证信息
 * 
 * @author sj
 * @version 2.0
 * @since 2014年2月17日17:27:02
 */
@Service("userIdentifyService")
public class UserIdentifyServiceImpl implements UserIdentifyService {

	@SuppressWarnings("unused")
	private Logger logger = Logger.getLogger(UserIdentifyServiceImpl.class);

	@Resource
	private UserIdentifyDao userIdentifyDao;
	@Autowired
	private UserVipApplyDao userVipApplyDao;
	@Autowired
	private AccountDao accountDao;
	@Autowired
	private UserCacheDao userCacheDao;
/*	@Autowired
	private YjfDao yjfDao;*/
	@Autowired
	private UserDao userDao;
	@Resource
	private VerifyLogDao verifyLogDao;
	@Resource
	private OperationLogService operationLogService;
	
	@Override
	public UserIdentify findByUserId(long userId) {
		return userIdentifyDao.findObjByProperty("user.userId", userId);
	}

	@Override
	public void modifyRealnameStatus(long userId, String status, String preStatus) {
		userIdentifyDao.modifyRealnameStatus(userId, status, preStatus);
	}

	@Override
	public void modifyMobilePhoneStatus(long userId, String status, String preStatus) {
		UserIdentify userAttestation = findByUserId(userId);
		if (!userAttestation.getMobilePhoneStatus().equals(status)) {
			userIdentifyDao.modifyMobilePhoneStatus(userId, status, preStatus);
			if("86".equals(status)){ // 手机认证通过
				BaseScoreLog bLog = new TenderScorePhoneLog(userId);
				bLog.doEvent();
			}
		}
	}

	@Override
	public UserIdentify getAttestationStatus(long userId) {
		return userIdentifyDao.findObjByProperty("user.userId", userId);
	}

	public UserIdentifyModel getUserIdentifyByUserId(long userId) {
		return userIdentifyDao.getUserIdentifyByUserId(userId);
	}

	@Override
	public void modifyEmailStatus(long userId, String status, String preStatus) {
		UserIdentify userAttestation = findByUserId(userId);
		if (!userAttestation.getEmailStatus().equals(status)) {
			userIdentifyDao.modifyEmailStatus(userId, status, preStatus);
		}

	}

	@Override
	public void userAttestationEdit(long id, String realNameVerifyRemark, String realNameStatus, Operator operator) {
		// 添加审核日志
		VerifyLog verifyLog = new VerifyLog(operator, "realName", id, 2, realNameStatus, realNameVerifyRemark);
		verifyLogDao.save(verifyLog);
		if ("83".equals(realNameStatus)) {
			UserIdentify identify = userIdentifyDao.find(id);
			BaseScoreLog bLog = new TenderScoreRealnameLog(identify.getUser().getUserId());
			bLog.doEvent();
		}
		userIdentifyDao.userAttestationEdit(id, realNameVerifyRemark, realNameStatus, operator);
	}

	@Override
	public int countByRealName(String status) {
		return userIdentifyDao.countByRealName(status);
	}
	
	@Override
	public int countByVerifyOkMobilePhone(String mobilePhone) {
		return userIdentifyDao.countByMobilePhone(mobilePhone);
	}

	@Override
	public int countByVerifyOkCardNo(String cardId) {
		return userIdentifyDao.countByVerifyOkCardNo(cardId);
	}
	
	/**
	 * 通过ID查询记录
	 * 
	 * @param id
	 * @return
	 */
	@Override
	public UserIdentify findById(long id) {
		return userIdentifyDao.find(id);
	}



	@Override
	public PageDataList<UserIdentifyModel> findUserIdentifylist(int pageNumber, int pageSize, UserIdentify model) {
		QueryParam param = QueryParam.getInstance().addPage(pageNumber, pageSize);
		if (model != null) {
//			if (StringUtils.isNotEmpty(model.getVipStatus())) {
//				param.addParam("vipStatus", model.getVipStatus());
//			}
			if (StringUtils.isNotEmpty(model.getEmailStatus())) {
				param.addParam("emailStatus", model.getEmailStatus());
			}
			if (StringUtils.isNotEmpty(model.getRealNameStatus())) {
				param.addParam("realNameStatus", model.getRealNameStatus());
			}
			if (StringUtils.isNotEmpty(model.getMobilePhoneStatus())) {
				param.addParam("mobilePhoneStatus", model.getMobilePhoneStatus());
			}
			if (null != model.getUser()&& !StringUtil.isBlank(model.getUser().getUserName())) {
				param.addParam("user.userName", Operators.LIKE, model.getUser().getUserName());
			}
		}
		PageDataList<UserIdentify> pageDataList = userIdentifyDao.findPageList(param);
		PageDataList<UserIdentifyModel> pageDateList_ = new PageDataList<UserIdentifyModel>();
		List<UserIdentifyModel> list = new ArrayList<UserIdentifyModel>();
		pageDateList_.setPage(pageDataList.getPage());
		for (int i = 0; i < pageDataList.getList().size(); i++) {
			UserIdentify userIdentify = (UserIdentify) pageDataList.getList().get(i);
			UserIdentifyModel um = UserIdentifyModel.instance(userIdentify);
			try {
				String userName = userIdentify.getUser().getUserName();
				um.setUserName(userName);
				um.setRealName(userIdentify.getUser().getRealName());
				list.add(um);
			} catch (Exception e) {
			    um.setUser(null);
				um.setUserName("<font color='red'>该用户已被删除</font>");
				list.add(um);
			}
		}
		pageDateList_.setList(list);
		return pageDateList_;
	}




	@Override
	public PageDataList<UserModel> userModelList(int pageNumber, int pageSize, UserIdentify model) {
		QueryParam param = QueryParam.getInstance().addPage(pageNumber, pageSize);
		if (model != null) {
			if (StringUtils.isNotEmpty(model.getRealNameStatus())) {
				param.addParam("realNameStatus", model.getRealNameStatus());
			}
		} else {
			param.addParam("realNameStatus", 2);
		}
		if (model != null && model.getUser() != null && !StringUtil.isBlank(model.getUser().getUserName())) {
			param.addParam("user.userName", Operators.LIKE, model.getUser().getUserName());
		}
		if (model != null && model.getUser() != null && !StringUtil.isBlank(model.getUser().getRealName())) {
			param.addParam("user.realName", Operators.LIKE, model.getUser().getRealName());
		}
		PageDataList<UserIdentify> pageDataList = userIdentifyDao.findPageList(param);
		PageDataList<UserModel> pageDataList_ = new PageDataList<UserModel>();
		List<UserModel> list = new ArrayList<UserModel>();
		pageDataList_.setPage(pageDataList.getPage());
		if (pageDataList.getList().size() > 0) {
			for (int i = 0;i < pageDataList.getList().size();i++) {
				UserIdentify userIdentify = (UserIdentify) pageDataList.getList().get(i);
				UserModel userModel = null;
				try {
					User user = userIdentify.getUser();
					if (user == null) {
						userModel = new UserModel();
						userModel.setUserCache(null);
						userModel.setUserIdentify(userIdentify);
						userModel.setUserName("<font color='red'>该用户已被删除</font>");
					} else {
						userModel = UserModel.instance(user);
						userModel.setUserCache(userCacheDao.findByUserId(user.getUserId()));
						userModel.setUserIdentify(userIdentify);
					}
					list.add(userModel);
				} catch ( Exception e ) {
					userModel = new UserModel();
					userIdentify.setUser(null);
					userModel.setUserName("<font color='red'>该用户已被删除</font>");
					list.add(userModel);
				}
			}
		}
		pageDataList_.setList(list);
		return pageDataList_;
	}

	/**
	 * vip申请列表
	 * 
	 * @param pageNumber
	 * @param pageSize
	 * @param userAttestationModel
	 * @return
	 */
	@Override
	public PageDataList<UserVipApplyModel> vipApplyList(int pageNumber, int pageSize, UserVipApplyModel model) {
		QueryParam param = QueryParam.getInstance().addPage(pageNumber, pageSize);
		if (!StringUtil.isBlank(model.getUserName())) {
			param.addParam("user.userName", Operators.LIKE, model.getUserName());
		}
		if (StringUtil.isNotBlank(model.getStartTime())) {
			Date start = DateUtil.valueOf(model.getStartTime() + " 00:00:00");
			param.addParam("addTime", Operators.GTE, start);
		}
		if (StringUtil.isNotBlank(model.getEndTime())) {
			Date end = DateUtil.valueOf(model.getEndTime() + " 23:59:59");
			param.addParam("addTime", Operators.LTE, end);
		}
		if (model.getStatus() < 3) {
			param.addParam("status", model.getStatus());
		}
		PageDataList<UserVipApply> pageDataList = userVipApplyDao.findPageList(param);
		PageDataList<UserVipApplyModel> pageDataList_ = new PageDataList<UserVipApplyModel>();
		List<UserVipApplyModel> list = new ArrayList<UserVipApplyModel>();
		pageDataList_.setPage(pageDataList.getPage());
		if (pageDataList.getList().size() > 0) {
			for (int i = 0; i < pageDataList.getList().size(); i++) {
				UserVipApply user = (UserVipApply) pageDataList.getList().get(i);
				user.getUser().getUserId();
				UserVipApplyModel userModel = UserVipApplyModel.instance(user);
				list.add(userModel);
			}
		}
		pageDataList_.setList(list);
		return pageDataList_;
	}
	
	/*@Override
	public boolean updateRealNameStatusByCallBack(ForwardConIdentify fci) {
		YjfPay yp = yjfDao.findByOrderNo(fci.getOrderNo());
		if (yp != null) {
			long userId = StringUtil.toLong(yp.getUserid());
			User user=userDao.find(userId);
			UserIdentify userIdentify = userIdentifyDao.findByUserId(userId);
			if ("EXECUTE_SUCCESS".equals(fci.getResultCode())) {
				if (userIdentify != null && StringUtils.isNotEmpty(userIdentify.getRealNameStatus())) {
					userIdentifyDao.modifyRealnameStatus(userId, "83", "88");
				} else if (userIdentify != null && "82".equals(userIdentify.getRealNameStatus())){
					userIdentifyDao.modifyRealnameStatus(userId, "83", "82");
				} else {
					userIdentifyDao.modifyRealnameStatus(userId, "83", "88");
				}
				String apiUserCustId=Global.getValue("webid") + user.getUserName();
				userCacheDao.modify(userId, fci.getUserId(), "1", apiUserCustId);
				userCacheDao.modify(userId, fci.getCertNo());
				userDao.modifyRealname(userId, fci.getRealName());
				
			} else {
				if (userIdentify != null && "88".equals(userIdentify.getRealNameStatus())) {
					userIdentifyDao.modifyRealnameStatus(userId, "84","88");
				} else if (userIdentify != null && "82".equals(userIdentify.getRealNameStatus())) {
					userIdentifyDao.modifyRealnameStatus(userId, "84", "82");
				} 
			}
		}
		return true;
	}*/

	/**
	 * 搜索并分页（实名认证人工审核）
	 * 
	 * @author sunxiaoyong
	 * 2014年12月20日
	 */
	@Override
	public PageDataList<UserIdentifyModel> getPageDataList(
			Map<String, Object> map, int currentPage, int pageSize) {
		
		QueryParam param = QueryParam.getInstance().addPage(currentPage, pageSize);
		
		/*if (StringUtils.isNotEmpty((String) map.get("vipStatus"))) {
			param.addParam("vipStatus", map.get("vipStatus"));
		}
		if (StringUtils.isNotEmpty((String) map.get("realNameStatus"))) {
			param.addParam("realNameStatus", map.get("realNameStatus"));
		}
		
		*/
		if (StringUtils.isNotEmpty((String) map.get("emailStatus"))) {
			param.addParam("emailStatus", map.get("emailStatus"));
		}
		
		if (StringUtils.isNotEmpty((String) map.get("mobilePhoneStatus"))) {
			param.addParam("mobilePhoneStatus", map.get("mobilePhoneStatus"));
		}
		if (null != map.get("userName") && !StringUtil.isBlank(map.get("userName"))) {
			param.addParam("user.userName", Operators.LIKE, map.get("userName"));
		}
		
		if (null != map.get("mobilePhone") && !StringUtil.isBlank(map.get("mobilePhone"))) {
			param.addParam("user.mobilePhone", Operators.LIKE, map.get("mobilePhone"));
		}
		
		if (StringUtils.isNotEmpty((String) map.get("realNameStatus"))) {
			param.addParam("realNameStatus", map.get("realNameStatus"));	
		}else{
			// 除未实名认证
			param.addParam("realNameStatus", Operators.NOTEQ, "82");
		}
		
		// 未销户
		param.addParam("user.isLocked", Operators.NOTEQ, UserConstant.USER_LOCK_LOGOUT);
		
		PageDataList<UserIdentify> pageDataList = userIdentifyDao.findPageList(param);
		PageDataList<UserIdentifyModel> pageDateList_ = new PageDataList<UserIdentifyModel>();
		List<UserIdentifyModel> list = new ArrayList<UserIdentifyModel>();
		pageDateList_.setPage(pageDataList.getPage());
		for (int i = 0; i < pageDataList.getList().size(); i++) {
			UserIdentify userIdentify = (UserIdentify) pageDataList.getList().get(i);
			UserIdentifyModel um = UserIdentifyModel.instance(userIdentify);
			try {
				um.setUserName(userIdentify.getUser().getUserName());
				um.setRealName(userIdentify.getUser().getRealName());
				um.setCardId(userIdentify.getUser().getCardNO());
				um.setCardOpposite(userIdentify.getUser().getUserCache().getCardOpposite());
				um.setCardPositive(userIdentify.getUser().getUserCache().getCardPositive());
				um.setRealName(userIdentify.getUser().getRealName());
				list.add(um);
			} catch (Exception e) {
			    um.setUser(null);
				um.setUserName("<font color='red'>该用户已被删除</font>");
				list.add(um);
			}
		}
		pageDateList_.setList(list);
		
		return pageDateList_;
	}
	
	/**
	 * 搜索并分页（用户认证信息查询）
	 * 
	 * @author sunxiaoyong
	 * 2015年1月23日
	 */
	@Override
	public PageDataList<UserIdentifyModel> getPageDataListForIdentify(
			Map<String, Object> map, int currentPage, int pageSize) {
		
		QueryParam param = QueryParam.getInstance().addPage(currentPage, pageSize);
		
		if (StringUtils.isNotEmpty((String) map.get("vipStatus"))) {
			param.addParam("vipStatus", map.get("vipStatus"));
		}
		if (StringUtils.isNotEmpty((String) map.get("realNameStatus"))) {
			param.addParam("realNameStatus", map.get("realNameStatus"));
		}
		if (StringUtils.isNotEmpty((String) map.get("emailStatus"))) {
			param.addParam("emailStatus", map.get("emailStatus"));
		}
		
		if (StringUtils.isNotEmpty((String) map.get("mobilePhoneStatus"))) {
			param.addParam("mobilePhoneStatus", map.get("mobilePhoneStatus"));
		}
		if (null != map.get("userName") && !StringUtil.isBlank(map.get("userName"))) {
			param.addParam("user.userName", Operators.LIKE, map.get("userName"));
		}
		if(null != map.get("realName") && !"".equals(map.get("realName"))){
			param.addParam("user.realName", map.get("realName"));
		}
		if (null != map.get("mobilePhone") && !StringUtil.isBlank(map.get("mobilePhone"))) {
			param.addParam("user.mobilePhone", Operators.LIKE, map.get("mobilePhone"));
		}
		if(StringUtil.isNotBlank((String)map.get("startTime"))){ 	
			param.addParam("user.addTime", Operators.GTE, DateUtil.getDate10ByStr((String)map.get("startTime"), "yyyy-MM-dd HH:mm:ss"));
		}
		if(StringUtil.isNotBlank((String)map.get("endTime"))){
			param.addParam("user.addTime", Operators.LT, DateUtil.getDate10ByStr((String)map.get("endTime"), "yyyy-MM-dd HH:mm:ss"));
		}
		
		
		// 未销户
		param.addParam("user.isLocked", Operators.NOTEQ, UserConstant.USER_LOCK_LOGOUT);
		param.addOrder(OrderType.DESC, "userId");
		PageDataList<UserIdentify> pageDataList = userIdentifyDao.findPageList(param);
		PageDataList<UserIdentifyModel> pageDateList_ = new PageDataList<UserIdentifyModel>();
		List<UserIdentifyModel> list = new ArrayList<UserIdentifyModel>();
		pageDateList_.setPage(pageDataList.getPage());
		for (int i = 0; i < pageDataList.getList().size(); i++) {
			UserIdentify userIdentify = (UserIdentify) pageDataList.getList().get(i);
			UserIdentifyModel um = UserIdentifyModel.instance(userIdentify);
			try {
				um.setUserName(userIdentify.getUser().getUserName());
				um.setRealName(userIdentify.getUser().getRealName());
				um.setCardId(userIdentify.getUser().getCardNO());
				um.setCardOpposite(userIdentify.getUser().getUserCache().getCardOpposite());
				um.setCardPositive(userIdentify.getUser().getUserCache().getCardPositive());
				um.setRealName(userIdentify.getUser().getRealName());
				list.add(um);
			} catch (Exception e) {
			    um.setUser(null);
				um.setUserName("<font color='red'>该用户已被删除</font>");
				list.add(um);
			}
		}
		pageDateList_.setList(list);
		
		return pageDateList_;
	}


	@Override
	public UserIdentify updateUserIdentify(UserIdentify userIdentify,long operatorId) {
		// TODO Auto-generated method stub
		userIdentify.setRealNameVerifyTime(Calendar.getInstance().getTime());
		
		OperationLog log = new OperationLog();
		log.setAddTime(Calendar.getInstance().getTime());
		log.setOperationResult(operatorId+"审核用户"+userIdentify.getUserId()+"的实名认证状态为"+userIdentify.getRealNameStatus());
		UserIdentify userIdentifyNew = userIdentifyDao.update(userIdentify);
		if(null != userIdentifyNew){
			operationLogService.save(log);
		}
		return userIdentifyNew;
	}


	/**
	 * 通过实名认证用户数 —— 投资人
	 * @author 孙晓勇
	 */
	@Override
	public int countTenderByRealName(String status) {
		
		return userIdentifyDao.countTenderByRealName(status);
	}
	//JSDP-116 fengguoqin 2015-05-19 start
	@Override
	public List<UserIdentifyModel> excelListUserIdentifyInfo(UserIdentifyModel model) {
		return userIdentifyDao.excelListUserIdentifyInfo(model);
	}
	//JSDP-116 fengguoqin 2015-05-19 end
	

}
