package com.rongdu.p2psys.score.service.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.ddtkj.p2psys.user.constant.UserConstant;
import com.ddtkj.p2psys.user.domain.User;
import com.ddtkj.p2psys.user.model.UserModel;
import com.rongdu.common.model.jpa.OrderFilter.OrderType;
import com.rongdu.common.model.jpa.PageDataList;
import com.rongdu.common.model.jpa.QueryParam;
import com.rongdu.common.model.jpa.SearchFilter.Operators;
import com.rongdu.common.util.DateUtil;
import com.rongdu.common.util.StringUtil;
import com.rongdu.p2psys.score.dao.ScoreDao;
import com.rongdu.p2psys.score.dao.ScoreLogDao;
import com.rongdu.p2psys.score.domain.Score;
import com.rongdu.p2psys.score.domain.ScoreLog;
import com.rongdu.p2psys.score.model.ScoreLogModel;
import com.rongdu.p2psys.score.model.ScoreModel;
import com.rongdu.p2psys.score.service.ScoreLogService;

@Service("scoreLogService")
public class ScoreLogServiceImpl implements ScoreLogService {

	@Resource
	private ScoreLogDao scoreLogDao;
	@Resource
	private ScoreDao scoreDao;
	
	@Override
	public PageDataList<ScoreLogModel> getWebScoreLogPage(ScoreLogModel model) {
		QueryParam param = QueryParam.getInstance();
		if(model.getUser() != null && model.getUser().getUserId() > 0){
			param.addParam("user.userId",model.getUser().getUserId());
			if (StringUtil.isNotBlank(model.getStartTime())) {
				Date start = DateUtil.valueOf(model.getStartTime());
				param.addParam("addTime", Operators.GTE, start);
			}
			if (StringUtil.isNotBlank(model.getEndTime())) {
				Date end = DateUtil.valueOf(model.getEndTime());
				param.addParam("addTime", Operators.LTE, end);
			}
			if (StringUtil.isNotBlank(model.getScoreTypeNid()) && !("").equals(model.getScoreTypeNid())) {
				param.addParam("scoreTypeNid", model.getScoreTypeNid());
			}
			param.addOrder(OrderType.DESC, "id");
		}
		
		Date d = DateUtil.getDayEndTime(System.currentTimeMillis()/1000);
		Date start = null;
		if (model.getTime() == 7) {
		    start = DateUtil.getDayStartTime(DateUtil.rollDay(d, -7).getTime() / 1000);
			param.addParam("addTime", Operators.GTE, start);
			param.addParam("addTime", Operators.LTE, d);
		} else if (model.getTime()>0 && model.getTime()<4){
		    start = DateUtil.getDayStartTime(DateUtil.rollMon(d, -model.getTime()).getTime() / 1000);
			param.addParam("addTime", Operators.GTE, start);
			param.addParam("addTime", Operators.LTE, d);
		}
		if (StringUtil.isNotBlank(model.getStartTime())) {
			//start = DateUtil.valueOf(model.getStartTime() + " 00:00:00");
			start = DateUtil.valueOf(model.getStartTime());
			param.addParam("addTime", Operators.GTE, start);
		}
		if (StringUtil.isNotBlank(model.getEndTime())) {
			//Date end = DateUtil.valueOf(model.getEndTime() + " 23:59:59");
			Date end = DateUtil.valueOf(model.getEndTime());
			param.addParam("addTime", Operators.LTE, end);
		}
		if(model.getRows() == 0){
			param.addPage(model.getPage());
		}else {
			param.addPage(model.getPage(), model.getRows());
		}
		
		PageDataList<ScoreLogModel> modelPage = new PageDataList<ScoreLogModel>();
		PageDataList<ScoreLog> list = scoreLogDao.findAllPageList(param);
		List<ScoreLogModel> addList = new ArrayList<ScoreLogModel>();
		for(int i = 0 ; i < list.getList().size();i++){
			ScoreLogModel scoreLogModel = ScoreLogModel.instance(list.getList().get(i));
			
			addList.add(scoreLogModel);
		}
		modelPage.setList(addList);
		if(model.getUser() != null && model.getUser().getUserId() > 0){
			
			PageDataList<ScoreLog> itemPage = scoreLogDao.findPageList(param);
			List<ScoreLogModel> modelList = new ArrayList<ScoreLogModel>();
			if(itemPage != null && itemPage.getList() != null && itemPage.getList().size() > 0){
				modelPage.setPage(itemPage.getPage());
				for (int i = 0 ; i < itemPage.getList().size(); i++) {
					ScoreLog item = itemPage.getList().get(i);
					ScoreLogModel model_ = ScoreLogModel.instance(item);
					model_.setUserName(item.getUser().getUserName());
					modelList.add(model_);
				}
			}
			modelPage.setPage(itemPage.getPage());
			modelPage.setList(modelList);
		}
		return modelPage;
	}
	
	/**
	 * 查询用户积分信息
	 * 
	 * @author sunxiaoyong
	 */
	public PageDataList<ScoreLogModel> getScoreLogPage(ScoreLogModel model) {
		QueryParam param = QueryParam.getInstance();
		if(model.getUserName() != null && model.getUserName().length() > 0){
			param.addParam("user.userName",Operators.LIKE , model.getUserName());
		}
		if (StringUtil.isNotBlank(model.getStartTime())) {
			//Date start = DateUtil.valueOf(model.getStartTime() + " 00:00:00");
			Date start = DateUtil.valueOf(model.getStartTime());
			param.addParam("addTime", Operators.GTE, start);
		}
		if (StringUtil.isNotBlank(model.getEndTime())) {
			//Date end = DateUtil.valueOf(model.getEndTime() + " 23:59:59");
			Date end = DateUtil.valueOf(model.getEndTime());
			param.addParam("addTime", Operators.LTE, end);
		}
		if(null != model.getScoreTypeName() && !"".equals(model.getScoreTypeName())){
			param.addParam("scoreTypeName", Operators.LIKE, model.getScoreTypeName());
		}
		
		param.addParam("user.isLocked", Operators.NOTEQ, UserConstant.USER_LOCK_LOGOUT);
		param.addOrder(OrderType.DESC, "id");
		param.addPage(model.getPage(), model.getRows());
		PageDataList<ScoreLog> itemPage = scoreLogDao.findPageList(param);

		
		List<ScoreLogModel> modelList = new ArrayList<ScoreLogModel>();
		PageDataList<ScoreLogModel> modelPage = new PageDataList<ScoreLogModel>();
		if(itemPage != null && itemPage.getList() != null && itemPage.getList().size() > 0){
			modelPage.setPage(itemPage.getPage());
			for (int i = 0 ; i < itemPage.getList().size(); i++) {
				ScoreLog item = itemPage.getList().get(i);
				ScoreLogModel model_ = ScoreLogModel.instance(item);
				if(item.getUser() != null){
					model_.setUserName(item.getUser().getUserName());
				}
				modelList.add(model_);
			}
		}
		modelPage.setList(modelList);
		return modelPage;
	}
	
	/**
	 * 查询用户积分信息（不使用）
	 * 
	 * @author sunxiaoyong
	 */
	@Override
	public PageDataList<ScoreLogModel> getUserScoreLogPage(int pageNumber, int pageSize, ScoreLogModel model) {
		QueryParam param = QueryParam.getInstance();
		
		if(null != model.getUserName() && !"".equals(model.getUserName())){
			param.addParam("user.userName", Operators.LIKE, model.getUserName());
		}
		if (StringUtil.isNotBlank(model.getStartTime())) {
			Date start = DateUtil.valueOf(model.getStartTime());
			param.addParam("addTime", Operators.GTE, start);
		}
		if (StringUtil.isNotBlank(model.getEndTime())) {
			Date end = DateUtil.valueOf(model.getEndTime());
			param.addParam("addTime", Operators.LTE, end);
		}
		
		if(null != model.getScoreTypeName() && !"".equals(model.getScoreTypeName())){
			param.addParam("scoreTypeName", Operators.LIKE, model.getScoreTypeName());
		}
		
		param.addParam("user.isLocked", Operators.NOTEQ, UserConstant.USER_LOCK_LOGOUT);
		PageDataList<ScoreLog> pageDataList = scoreLogDao.findPageList(param);
		PageDataList<ScoreLogModel> pageDataList_ = new PageDataList<ScoreLogModel>();
		List<ScoreLogModel> list = new ArrayList<ScoreLogModel>();
		pageDataList_.setPage(pageDataList.getPage());
		if (pageDataList.getList().size() > 0) {
			for (int i = 0; i < pageDataList.getList().size(); i++) {
				ScoreLog scoreLog = (ScoreLog) pageDataList.getList().get(i);
				
				ScoreLogModel scoreLogModel = ScoreLogModel.instance(scoreLog);
				scoreLogModel.setUserName(scoreLog.getUser().getUserName());
				list.add(scoreLogModel);
			}
		}
		pageDataList_.setList(list);
		return pageDataList_;
	}
	
	public List<ScoreLog> getScoreLogList(long userId, String typeNid) {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see com.rongdu.p2psys.score.service.ScoreLogService#save(com.rongdu.p2psys.score.domain.ScoreLog)
	 */
	@Override
	public ScoreLog save(ScoreLog sl) {
		// TODO Auto-generated method stub
		return this.scoreLogDao.save(sl);
	}

	@Override
	public List<ScoreLog> getLastTimeSign(long userId) {
		return scoreLogDao.getLastTimeSign(userId);
		 
	}
	
	

	@Override
	public PageDataList<ScoreLogModel> findRepeatScorePage(ScoreLogModel model) {
		PageDataList<ScoreLog> itemPage = scoreLogDao.findRepeatScorePage(model.getPage(), model.getRows(), model);
		List<ScoreLogModel> modelList = new ArrayList<ScoreLogModel>();
		PageDataList<ScoreLogModel> modelPage = new PageDataList<ScoreLogModel>();
		if(itemPage != null && itemPage.getList() != null && itemPage.getList().size() > 0){
			modelPage.setPage(itemPage.getPage());
			for (int i = 0 ; i < itemPage.getList().size(); i++) {
				ScoreLog item = itemPage.getList().get(i);
				ScoreLogModel model_ = ScoreLogModel.instance(item);
				if(item.getUser() != null){
					model_.setUserName(item.getUser().getUserName());
				}
				modelList.add(model_);
			}
		}
		modelPage.setList(modelList);
		return modelPage;
	}

	@Override
	public ScoreLog findScoreLogById(long id) {
		ScoreLog scoreLog = scoreLogDao.find(id);
		if(null != scoreLog){
			return scoreLog;
		}
		return null;
	}

	@Override
	public ScoreLog updateScoreLog(Collection<ScoreLog> logUList,Score score,Collection<ScoreLog> sl) {
		
		try {
			scoreLogDao.save(sl);
			
			if(0 != logUList.size()){
				scoreLogDao.update(logUList);
			}
			if(null != score){
				scoreDao.update(score);
			}
			ScoreLog log = new ScoreLog();
			
			return log;
		} catch (Exception e) {
			
			return null;
		}
	}

	@Override
	public List<ScoreLog> getScoreList(long userId,String scoreType) {
		QueryParam param = QueryParam.getInstance();
		param.addParam("scoreTypeNid", scoreType);
		param.addParam("user.userId", userId);
		param.addOrder(OrderType.ASC, "id");
		List<ScoreLog> scoreLogList = scoreLogDao.findByCriteria(param);
		if(scoreLogList.size()!=0){
			return scoreLogList;
		}
		return null;
	}

}
