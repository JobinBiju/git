package com.rongdu.common.util.watermark;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Properties;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * 图片水印工具类
 * 
 * @author sunxiaoyong
 * @version jsd v3.0 2014年12月17日
 * 
 */
public class ImageWaterMark {

	// 默认值
	// 水印透明度
	private static float alpha = 0.5f;
	// 水印横向位置
	private static int positionWidth = 150;
	// 水印纵向位置
	private static int positionHeight = 300;
	// 水印文字字体
	private static Font font = new Font("宋体", Font.BOLD, 150);
	// 水印文字颜色
	private static Color color = Color.BLACK;
//	private static 	Properties pro;
//	
//	static{
//		pro= new Properties();
//	    InputStream inStream = 	ImageWaterMark.class.getResourceAsStream("watermark.properties");
//	    try {
//			pro.load(inStream);
//		} catch (IOException e) {
//		    throw new RuntimeException("水印工具配置文件watermark.properties找不到!");
//		}
//		
//	}

	/**
	 * 文字水印参数类型转换
	 * 
	 * @param srcImgPath
	 *            源图片路径
	 * @param targerTextPath2
	 *            生成图片路径
	 * @param fontContent
	 *            文字内容
	 * @param font
	 *            字体
	 * @param fontStyle
	 *            样式
	 * @param fontSize
	 *            字体大小
	 * @param fontColor
	 *            字体颜色
	 * @param positionWidth
	 *            坐标X(取消)
	 * @param positionHeight
	 *            坐标Y(取消)
	 * @param fontPlace
	 *            文字位置
	 * @param fontDegree
	 *            旋转度数
	 * @param fontAlpha
	 *            文字透明
	 */
	public static void setFontMarkTypeChange(String srcImgPath,
			String targerTextPath2, String fontContent, String font,
			String fontStyle, String fontSize, String fontColor,
			// String positionWidth,
			// String positionHeight,
			String fontPlace, String fontDegree, String fontAlpha) {

		// 文字透明
		float fontalpha = Float.parseFloat(fontAlpha);
		// 工具类
		FontList fontList = new FontList();
		// 字体样式
		int fontstyle = fontList.selectFontStyle(fontStyle);
		// 字体大小
		int fontsize = Integer.parseInt(fontSize);
		// 字体、字体样式、字体大小
		Font fontSet = new Font(font, fontstyle, fontsize);
		// 设置字体颜色
		ColorList colorList = new ColorList();
		Color colorSet = colorList.selectColor(fontColor);
		// 坐标
		// int fontPlaceX = Integer.parseInt(positionWidth);
		// int fontPlaceY = Integer.parseInt(positionHeight);

		// 文字位置
		int toward = Integer.parseInt(fontPlace);

		// 图片缩放(默认不缩放)
		float scale = 1.0f;

		File file = new File(srcImgPath);

		BufferedImage buffImg = ImageTool.getMyBufferedImage(file, scale);
		// 创建Graphics2D对象，用在BufferedImage对象上绘图
		Graphics2D g2d = buffImg.createGraphics();
		g2d.setRenderingHints(ImageTool.getMyRenderingHints());

		double imgWidth = buffImg.getWidth();
		double imgHeight = buffImg.getHeight();

		// 绘画字符串所需的宽和高
		Point p = ImageTool.getStringWidthAndHeight(fontContent, g2d);

		Point pp = ImageTool
				.calculate(p, toward, imgWidth, imgHeight, fontsize);
		// 文字旋转
		int fontdegree = Integer.parseInt(fontDegree);

		ImageWaterMark.setImageMarkOptions(fontalpha, pp.x, pp.y, fontSet,
				colorSet);
		// 设置水印
		ImageWaterMark.markImageByText(fontContent, srcImgPath,
				targerTextPath2, fontdegree);

	}

	/**
	 * 图片水印参数类型转换
	 * 
	 * @param imageAlpha
	 *            透明度
	 * @param positionWidth
	 * 
	 * @param positionHeight
	 * 
	 * @param targerIconPath
	 *            源文件路径
	 * @param iconPath
	 *            水印图片路径
	 * @param targerIconPath2
	 *            生成图片路径
	 * @param toward
	 *            位置
	 * @param imageDegree
	 *            图片旋转
	 */
	public static void setImageMarkTypeChange(

			String imageAlpha,
			// String positionWidth,
			// String positionHeight,
			String toward, String targerIconPath, String iconPath,
			String targerIconPath2, String imageDegree

	) {

		// 图片透明
		float imagealpha = Float.parseFloat(imageAlpha);
		// 坐标
		// int imagePlaceX = Integer.parseInt(positionWidth);
		// int imagePlaceY = Integer.parseInt(positionHeight);
		// 图片旋转
		int imagedegree = Integer.parseInt(imageDegree);
		// 图片位置
		int imagetoward = Integer.parseInt(toward);

		// 图片缩放(默认不缩放)
		float scale = 1.0f;

		File file = new File(targerIconPath);
		File file2 = new File(iconPath);

		BufferedImage buffImg = ImageTool.getMyBufferedImage(file, scale);

		int imgWidth = buffImg.getWidth();
		int imgHeight = buffImg.getHeight();

		BufferedImage buffImg2 = ImageTool.getMyBufferedImage(file2, scale);

		int imgWidth2 = buffImg2.getWidth();
		int imgHeight2 = buffImg2.getHeight();

		Point pp = ImageTool.calculateImage(imagetoward, imgWidth, imgHeight,
				imgWidth2, imgHeight2);

		// 添加图片水印效果
		ImageWaterMark.setImageMarkOptions(imagealpha, pp.x, pp.y, null, null);
		// 给图片添加水印图片,水印图片旋转
		ImageWaterMark.markImageByIcon(iconPath, targerIconPath,
				targerIconPath2, imagedegree);

	}

	/**
	 * 
	 * @param alpha
	 *            水印透明度
	 * @param positionWidth
	 *            水印横向位置
	 * @param positionHeight
	 *            水印纵向位置
	 * @param font
	 *            水印文字字体
	 * @param color
	 *            水印文字颜色
	 */
	private static void setImageMarkOptions(float alpha, int positionWidth,
			int positionHeight, Font font, Color color) {
		if (alpha != 0.0f)
			ImageWaterMark.alpha = alpha;
		if (positionWidth != 0)
			ImageWaterMark.positionWidth = positionWidth;
		if (positionHeight != 0)
			ImageWaterMark.positionHeight = positionHeight;
		if (null != font)
			ImageWaterMark.font = font;
		if (null != color)
			ImageWaterMark.color = color;
	}

	/**
	 * 给图片添加水印图片
	 * 
	 * @param iconPath
	 *            水印图片路径
	 * @param srcImgPath
	 *            源图片路径
	 * @param targerPath
	 *            目标图片路径
	 */
	private static void markImageByIcon(String iconPath, String srcImgPath,
			String targerPath) {
		markImageByIcon(iconPath, srcImgPath, targerPath, null);
	}

	/**
	 * 给图片添加水印图片、可设置水印图片旋转角度
	 * 
	 * @param iconPath
	 *            水印图片路径
	 * @param srcImgPath
	 *            源图片路径
	 * @param targerPath
	 *            目标图片路径
	 * @param degree
	 *            水印图片旋转角度
	 */
	public static void markImageByIcon(String iconPath, String srcImgPath,
			String targerPath, Integer degree) {
		OutputStream os = null;
		try {

			Image srcImg = ImageIO.read(new File(srcImgPath));

			BufferedImage buffImg = new BufferedImage(srcImg.getWidth(null),
					srcImg.getHeight(null), BufferedImage.TYPE_INT_RGB);

			// 1、得到画笔对象
			Graphics2D g = buffImg.createGraphics();

			// 2、设置对线段的锯齿状边缘处理
			g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
					RenderingHints.VALUE_INTERPOLATION_BILINEAR);
			g.drawImage(
					srcImg.getScaledInstance(srcImg.getWidth(null),
							srcImg.getHeight(null), Image.SCALE_SMOOTH), 0, 0,
					null);

			// 3、设置水印旋转
			if (null != degree) {
				g.rotate(Math.toRadians(degree),
						(double) buffImg.getWidth() / 2,
						(double) buffImg.getHeight() / 2);
			}

			// 4、水印图片的路径 水印图片一般为gif或者png的，这样可设置透明度
			ImageIcon imgIcon = new ImageIcon(iconPath);

			// 5、得到Image对象。
			Image img = imgIcon.getImage();

			g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,
					alpha));

			// 6、水印图片的位置
			g.drawImage(img, positionWidth, positionHeight, null);
			g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));

			// 7、释放资源
			g.dispose();

			// 8、生成图片
			os = new FileOutputStream(targerPath);
			ImageIO.write(buffImg, "JPG", os);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (null != os)
					os.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 给图片添加水印文字
	 * 
	 * @param logoText
	 *            水印文字
	 * @param srcImgPath
	 *            源图片路径
	 * @param targerPath
	 *            目标图片路径
	 */
	private static void markImageByText(String logoText, String srcImgPath,
			String targerPath) {
		markImageByText(logoText, srcImgPath, targerPath, null);
	}

	/**
	 * 给图片添加水印文字、可设置水印文字的旋转角度
	 * 
	 * @param logoText
	 * @param srcImgPath
	 * @param targerPath
	 * @param degree
	 */
	private static void markImageByText(String logoText, String srcImgPath,
			String targerPath, Integer degree) {

		InputStream is = null;
		OutputStream os = null;
		try {
			// 1、源图片
			Image srcImg = ImageIO.read(new File(srcImgPath));
			BufferedImage buffImg = new BufferedImage(srcImg.getWidth(null),
					srcImg.getHeight(null), BufferedImage.TYPE_INT_RGB);

			// 2、得到画笔对象
			Graphics2D g = buffImg.createGraphics();
			// 3、设置对线段的锯齿状边缘处理
			g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
					RenderingHints.VALUE_INTERPOLATION_BILINEAR);
			g.drawImage(
					srcImg.getScaledInstance(srcImg.getWidth(null),
							srcImg.getHeight(null), Image.SCALE_SMOOTH), 0, 0,
					null);
			// 4、设置水印旋转
			if (null != degree) {
				g.rotate(Math.toRadians(degree),
						(double) buffImg.getWidth() / 2,
						(double) buffImg.getHeight() / 2);
			}
			// 5、设置水印文字颜色
			g.setColor(color);
			// 6、设置水印文字Font
			g.setFont(font);
			// 7、设置水印文字透明度
			g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,
					alpha));
			// 8、第一参数->设置的内容，后面两个参数->文字在图片上的坐标位置(x,y)
			g.drawString(logoText, positionWidth, positionHeight);
			// 9、释放资源
			g.dispose();
			// 10、生成图片
			os = new FileOutputStream(targerPath);
			ImageIO.write(buffImg, "JPG", os);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (null != is)
					is.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
			try {
				if (null != os)
					os.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

}