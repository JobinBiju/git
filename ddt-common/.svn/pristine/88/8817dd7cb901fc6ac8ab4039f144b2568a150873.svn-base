package com.rongdu.common.util;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGImageEncoder;
public class CodeUtil{
		private static final char[] chars ={ '1', '2', '3', '4', '5', '6',
			'7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'a','v','y'};
	private static final int SIZE = 4;
	private static final int LINES = 5;
	private static final int WIDTH = 122;
	private static final int HEIGHT = 45;
	private static final int FONT_SIZE = 25;
	private static Random ran = new Random(); 

	public static Map<String, BufferedImage> createImage() {
		StringBuffer sb = new StringBuffer();
		BufferedImage image = new BufferedImage(WIDTH, HEIGHT,
				BufferedImage.TYPE_INT_RGB);
		Graphics graphic = image.getGraphics();
		graphic.fillRect(0, 0, WIDTH, HEIGHT);
		// 画随机字符
		for (int i = 1; i <= SIZE; i++) {
			int r = ran.nextInt(chars.length);
			graphic.setColor(getRandomColor());
			graphic.setFont(new Font(null, Font.BOLD + Font.ITALIC, FONT_SIZE));
			graphic.drawString(chars[r] + "", (i - 1) * WIDTH / SIZE,
					HEIGHT-13 );
			sb.append(chars[r]);
			//shear(graphic, image.getWidth(),image.getHeight(), Color.white); 
		}

		Map<String, BufferedImage> map = new HashMap<String, BufferedImage>();
		map.put(sb.toString(), image);
		return map;
	}

	public static Color getRandomColor() {
		Random ran = new Random();
		Color color = new Color(ran.nextInt(31), ran.nextInt(75),
				ran.nextInt(218));
		return color;
	}

	private static void shear(Graphics g, int w1, int h1, Color color) {

		  shearX(g, w1, h1, color);
		  shearY(g, w1, h1, color);
		}

		public static void shearX(Graphics g, int w1, int h1, Color color) {

		  int period = ran.nextInt(2);

		  boolean borderGap = true;
		  int frames = 1;
		  int phase = ran.nextInt(2);

		  for (int i = 0; i < h1; i++) {
		   double d = (double) (period >> 1)
		     * Math.sin((double) i / (double) period
		       + (6.2831853071795862D * (double) phase)
		       / (double) frames);
		   g.copyArea(0, i, w1, 1, (int) d, 0);
		   if (borderGap) {
		    g.setColor(color);
		    g.drawLine((int) d, i, 0, i);
		    g.drawLine((int) d + w1, i, w1, i);
		   }
		  }

		}

		public static void shearY(Graphics g, int w1, int h1, Color color) {

		  int period = ran.nextInt(40) + 10; // 50;

		  boolean borderGap = true;
		  int frames = 20;
		  int phase = 7;
		  for (int i = 0; i < w1; i++) {
		   double d = (double) (period >> 1)
		     * Math.sin((double) i / (double) period
		       + (6.2831853071795862D * (double) phase)
		       / (double) frames);
		   g.copyArea(i, 0, 1, h1, 0, (int) d);
		   if (borderGap) {
		    g.setColor(color);
		    g.drawLine(i, (int) d, i, 0);
		    g.drawLine(i, (int) d + h1, i, h1);
		   }

		  } 
		}
	
	public static InputStream getInputStream(BufferedImage image)
			throws IOException {
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(bos);
		encoder.encode(image);
		byte[] imageBts = bos.toByteArray();
		InputStream in = new ByteArrayInputStream(imageBts);
		return in;
	}

	public static void main(String[] args)throws Exception {
		Map<String, BufferedImage> map=createImage();
		
		Set<Map.Entry<String,BufferedImage>> entries	=map.entrySet();
		BufferedImage  image = null;
		String code = null;
		for(Map.Entry<String,BufferedImage> entry:entries){
			 code = entry.getKey();
			image = entry.getValue();
		
		}
		
		Image yourImg   =    Toolkit.getDefaultToolkit().createImage("test.png");  // ri.data就是个byte数组

	
	  Graphics2D   g2d=image.createGraphics();  
	  g2d.drawImage(yourImg,0,0,null);  
	  System.out.print(code);
	  
	  FileOutputStream   fos   =   new   FileOutputStream("e:/img.jpg");    
	   
	  JPEGImageEncoder   encoder   =   JPEGCodec.createJPEGEncoder(fos);    
	  encoder.encode(image); 
	  fos.close();
	
	}
	}
