package com.ddtkj.common.util.security;

import java.security.MessageDigest;
import java.security.SecureRandom;

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.codec.digest.DigestUtils;

/**
 * 单向加密工具类
 * @author ZDF
 * @date 2015年3月17日
 *
 */
public class Encodes{
	
	/** 随机字符集合 */
	private static String NONCE_STRING = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
	
	/** 安全的随机数生成器 */
	private static SecureRandom random = new SecureRandom();
	
	/** 密码salt字节数组长度 */
	private static int SALT_SIZE = 8;
	
	/** 密码加密类型 */
	public static final String PASSWORD_ALGORITHM = "SHA-1";
	
	/** 密码散列次数 */
	public static int PASSWORD_INTERATIONS = 1024;
	
	/**
	 * 对字符串进行MD5加密
	 * @author ZDF
	 * @date 2015年3月17日
	 * @param message
	 * @return
	 */
	public static String md5(String message){
		return DigestUtils.md5Hex(message);
	}
	
	/**
	 * 对字符串进行简单的SHA1加密
	 * @author ZDF
	 * @date 2015年3月17日
	 * @param message
	 * @return
	 */
	public static String sha(String message){
		return DigestUtils.sha1Hex(message);
	}
	
	/**
	 * Hex编码
	 * @author ZDF
	 * @date 2015年3月17日
	 * @param data
	 * @return
	 */
	public static String hexEncode(byte[] data) {
		return Hex.encodeHexString(data);
	}
	
	/**
	 * Hex解码
	 * @author ZDF
	 * @date 2015年3月17日
	 * @param message
	 * @return
	 */
	public static byte[] hexDecode(String message) {
		byte[] result = null;
		try {
			result = Hex.decodeHex(message.toCharArray());
		} catch (DecoderException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	/**
	 * 生成随机salt
	 * @author ZDF
	 * @date 2015年3月17日
	 * @param saltSize
	 * @return
	 */
	public static String salt() {
		byte[] bytes = new byte[SALT_SIZE];
		random.nextBytes(bytes);
		return hexEncode(bytes);
	}
	
	/**
	 * 生成安全密码
	 * @author ZDF
	 * @date 2015年3月17日
	  * @param message
	 * 			源数据
	 * @param salt
	 * 			加盐
	 * @return
	 */
	public static String password(String password, String salt){
		MessageDigest digest = DigestUtils.getSha1Digest();
		digest.update(hexDecode(salt));

		byte[] result = digest.digest(password.getBytes());

		for (int i = 1; i < PASSWORD_INTERATIONS; i++) {
			digest.reset();
			result = digest.digest(result);
		}
		
		return Hex.encodeHexString(result);
	}

	/**
	 * 获取随机字符串
	 * @author ZDF
	 * @date 2015年3月17日
	 * @param length
	 * 			字符串长度
	 * @return
	 */
	public static String nonceString(Integer length) {
		int index;
		StringBuilder sb = new StringBuilder(length);
		for (int i = 0; i < length; i++) {
			index = random.nextInt(62);
			sb.append(NONCE_STRING.charAt(index));
		}
		return sb.toString();
	}
	
	/**
	 * 生成验证码：6位整数
	 * @author ZDF
	 * @date 2015年4月8日
	 * @return
	 */
	public static String verifyCode() {
		StringBuilder sb = new StringBuilder();
		for(int i = 0; i <6; i++)
			sb.append(random.nextInt(10));
		
		return sb.toString();
	}
}
