package com.rongdu.manage.action.user;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.struts2.convention.annotation.Action;

import com.opensymphony.xwork2.ModelDriven;
import com.rongdu.common.model.jpa.PageDataList;
import com.rongdu.common.util.MessageUtil;
import com.rongdu.p2psys.core.Global;
import com.rongdu.p2psys.core.domain.Operator;
import com.rongdu.p2psys.core.rule.MemberVIPRuleCheck;
import com.rongdu.p2psys.core.rule.RegisterRuleCheck;
import com.rongdu.p2psys.core.service.OperatorService;
import com.rongdu.p2psys.core.util.excel.ExcelUtils;
import com.rongdu.p2psys.core.util.excel.JsGridReportBase;
import com.rongdu.p2psys.core.util.excel.TableData;
import com.rongdu.p2psys.core.web.BaseAction;
import com.rongdu.p2psys.user.domain.KefuRecord;
import com.ddtkj.p2psys.user.domain.User;
import com.ddtkj.p2psys.user.domain.UserIdentify;
import com.ddtkj.p2psys.user.model.UserCacheModel;
import com.ddtkj.p2psys.user.model.UserIdentifyModel;
import com.ddtkj.p2psys.user.model.UserModel;
import com.rongdu.p2psys.user.model.KefuModel;
import com.rongdu.p2psys.user.service.KefuChangeService;
import com.rongdu.p2psys.user.service.UserIdentifyService;
import com.rongdu.p2psys.user.service.UserService;

public class ManageSiteUserVerifyAction extends BaseAction<UserIdentifyModel> implements ModelDriven<UserIdentifyModel>{

	@Resource
	private UserIdentifyService userIdentifyService;
	@Resource
	private UserService userService;
	
	@Resource
	private OperatorService operatorService;
	
	

	
	private Map<String, Object> data;
	private Map<String, Object> map = new HashMap<String, Object>();
	
	/**
	 * 投资人申请更换客服
	 * @return
	 * @throws Exception
	 */
	@Action(value = "/modules/user/siteVerifyUser/userVerifyManager")
	public String userVerifyManager() throws Exception{
		
		return "userVerifyManager";
	}
	
	
	
	/**
	 * 查询全部实名认证审核记录
	 * @return
	 * @throws Exception
	 */
	@Action(value = "/modules/user/siteVerifyUser/userVerifyList")
	public void kefuVerifyList() throws Exception{
		data = new HashMap<String, Object>();
		
		String userName = paramString("userName");
		map.put("userName", userName);
		
		String mobilePhone = paramString("user.mobilePhone");
		map.put("mobilePhone", mobilePhone);
		
		String realNameStatus = paramString("realNameStatus");
		map.put("realNameStatus", realNameStatus);
		
		int pageNumber = paramInt("page");// 当前页数
		int pageSize = paramInt("rows");// 每页总数
		PageDataList<UserIdentifyModel> getPageDataList = userIdentifyService.getPageDataList(map,pageNumber, pageSize);
		
		int totalPage = getPageDataList.getPage().getTotal();// 总页数
		data.put("total", totalPage);
		data.put("rows", getPageDataList.getList());
		printJson(getStringOfJpaObj(data));
	}
	
	
	/**
     * 实名认证人工审核导出excel
     * @throws Exception
     */
    @Action("/modules/user/siteVerifyUser/userVerifyExport")
    public void userVouchExport() throws Exception {
    	
    	String userName = paramString("userName");
		map.put("userName", userName);
		
		String mobilePhone = paramString("user.mobilePhone");
		map.put("mobilePhone", mobilePhone);
		
		String realNameStatus = paramString("realNameStatus");
		map.put("realNameStatus", realNameStatus);
		
    	PageDataList<UserIdentifyModel> pageDataList = userIdentifyService.getPageDataList(map,1, 99999999);
    	
    	List<UserIdentifyModel> newList = pageDataList.getList();
    	String title = "实名认证人工审核Excel表";
    	 
    	for(int i=0;i<newList.size();i++){
    		UserIdentifyModel ucm = newList.get(i);
    	}
 		String[] hearders = new String[] {"编号","用户名","真实姓名","身份证号","审核进度"};// 表头数组
 		String[] fields = new String[] {"userId","userName","realName","cardId","status"};// 对象属性数组
 		
 		int sheetRows = 50000;
		int sheetPage = newList.size()/sheetRows;
		if(newList.size()%sheetRows > 0){
			sheetPage += 1;
		}
		List<TableData> tableDatas = new ArrayList<TableData>();
		for(int i = 0; i < sheetPage; i++){
			List<UserIdentifyModel> tdList = new ArrayList<UserIdentifyModel>();
			for(int j = i * sheetRows ; j < (i+1)*sheetRows && j <newList.size(); j++ ){
				UserIdentifyModel sm = newList.get(j);
				tdList.add(sm);
			}
			TableData td = ExcelUtils.createTableData(tdList, ExcelUtils.createTableHeader(hearders), fields);
			td.setSheetTitle(title + "--第" + (i+1) + "页");
			tableDatas.add(td);
		}
		JsGridReportBase report = new JsGridReportBase(request, response);
		report.exportToExcel(title, getOperator().getUserName(), tableDatas);
 		
 		
    }
	
	
	/**
	 * 根据id待审核记录
	 * @return
	 * @throws Exception
	 */
	@Action(value = "/modules/user/siteVerifyUser/userVerifyEditPage")
	public String kefuVerifyEditPage() throws Exception{
		initRSAME();
		saveToken("userVerifyEditToken");
		long id = paramLong("id");
		
		UserIdentify userIdentify = userIdentifyService.findByUserId(id);
		User user = userService.find(id);
		request.setAttribute("user", user);
		request.setAttribute("userCache", user.getUserCache());
		request.setAttribute("userIdentify", userIdentify);
		return "userVerifyEditPage";
	}
	
	
	/**
	 * 实名认证申请审核
	 * @return
	 * @throws Exception
	 */
	@Action(value = "/modules/user/siteVerifyUser/userVerifyEdit")
	public void  userVerifyEdit() throws Exception{
//		Long id = paramLong("id");
//		String remark = paramString("remark");
//		KefuRecord kefuRecord = kefuChangeService.getKefuRecordById(id);
//		kefuRecord.setVerifyId(getOperatorId());
//		kefuRecord.setVerifyTime(new Date());
//		kefuRecord.setRemark(remark);	// 设置备注
//		//审核结果(5待审核 1审核通过2审核不通过4关系取消 3正常)
//		if(null != model){
//			if(2 == model.getVerifyResult()){
//				kefuRecord.setVerifyResult(2);
//				
//			}else{
//				kefuRecord.setVerifyResult(1);
//			}
//			
//		}
//		
//		kefuChangeService.updateKefuRecord(kefuRecord);
		
		
		
		
		Long userId= model.getUserId();
		UserIdentify userIdentify = userIdentifyService.findById(userId);
		if(null !=userIdentify&& null != model.getRealNameStatus()&& !"".equals(model.getRealNameStatus())){
			userIdentify.setRealNameStatus(model.getRealNameStatus());
			userIdentify.setRealNameVerifyTime(Calendar.getInstance().getTime());
		}
		checkToken("userVerifyEditToken");
		userIdentifyService.updateUserIdentify(userIdentify,this.getOperatorId());
		printResult(MessageUtil.getMessage("I10002"), true);
	}
	
	
	
	
	
	
	
	
}
