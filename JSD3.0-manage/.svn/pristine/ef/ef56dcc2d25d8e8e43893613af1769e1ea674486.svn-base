package com.rongdu.manage.action.user;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Action;

import com.opensymphony.xwork2.ModelDriven;
import com.rongdu.common.model.jpa.PageDataList;
import com.rongdu.common.model.jpa.SearchFilter.Operators;
import com.rongdu.common.util.StringUtil;
import com.rongdu.p2psys.account.model.AccountBankModel;
import com.rongdu.p2psys.core.Global;
import com.rongdu.p2psys.core.domain.Operator;
import com.rongdu.p2psys.core.rule.RealNameAttestationRuleCheck;
import com.rongdu.p2psys.core.service.VerifyLogService;
import com.rongdu.p2psys.core.util.excel.ExcelUtils;
import com.rongdu.p2psys.core.util.excel.JsGridReportBase;
import com.rongdu.p2psys.core.util.excel.TableData;
import com.rongdu.p2psys.core.web.BaseAction;
import com.ddtkj.manage.ExcelHelper;
import com.ddtkj.p2psys.user.domain.UserCache;
import com.ddtkj.p2psys.user.domain.UserIdentify;
import com.ddtkj.p2psys.user.model.UserCacheModel;
import com.ddtkj.p2psys.user.model.UserIdentifyModel;
import com.ddtkj.p2psys.user.model.UserModel;
import com.rongdu.p2psys.user.service.UserCacheService;
import com.rongdu.p2psys.user.service.UserIdentifyService;

/**
 * 认证用户管理
 * 
 * @author zf
 * @version 2.0
 * @since 2014年5月16日
 */
public class ManageUserIdentifyAction extends BaseAction<UserIdentifyModel> implements ModelDriven<UserIdentifyModel> {

	@Resource
	private UserIdentifyService userIdentifyService;
	@Resource
	private VerifyLogService verifyLogService;
	@Resource
	private UserCacheService userCacheService;

	private Operator operator;
	private Map<String, Object> map = new HashMap<String, Object>();
	private Map<String, Object> data;

	/**
	 * 认证查询
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action(value = "/modules/user/user/userIdentify/userIdentifyManager")
	public String userIdentifyManager() throws Exception {
		return "userIdentifyManager";
	}

	/**
	 * 认证查询
	 * @author sunxiaoyong 2014年12月20日
	 * @throws Exception
	 */
	@Action(value = "/modules/user/user/userIdentify/userIdentifyList")
	public void userIdentifyList() throws Exception {
		data = new HashMap<String, Object>();
		int pageNumber = paramInt("page");// 当前页数
		int pageSize = paramInt("rows");// 每页总数
		
		String vipStatus = paramString("vipStatus");
		
		String emailStatus = paramString("emailStatus");
		String realNameStatus = paramString("realNameStatus");
		String mobilePhoneStatus = paramString("mobilePhoneStatus");
		String userName = paramString("userName");
		
		if(null !=vipStatus && !"".equals(vipStatus)){
			map.put("vipStatus", vipStatus);
		}
		if(null !=emailStatus && !"".equals(emailStatus)){
			map.put("emailStatus", emailStatus);
		}
		if(null !=realNameStatus && !"".equals(realNameStatus)){
			map.put("realNameStatus", realNameStatus);
		}
		if(null !=mobilePhoneStatus && !"".equals(mobilePhoneStatus)){
			map.put("mobilePhoneStatus", mobilePhoneStatus);
		}
		if(null !=userName && !"".equals(userName)){
			map.put("userName", userName);
		}
		if(null != model.getRealName() && !"".equals(model.getRealName())){
			map.put("realName", model.getRealName());
		}
		if(null != model.getStartTime() && "" != model.getStartTime()){
			map.put("startTime", model.getStartTime());
		}
		if(null != model.getEndTime() && "" != model.getEndTime()){
			map.put("endTime", model.getEndTime());
		}
		PageDataList<UserIdentifyModel> pagaDataList = userIdentifyService.getPageDataListForIdentify(map, pageNumber, pageSize);
		
		int totalPage = pagaDataList.getPage().getTotal();// 总页数
		data.put("total", totalPage);
		data.put("rows", pagaDataList.getList());
		printJson(getStringOfJpaObj(data));
	}
	
	/**
	 * 用户认证信息导出
	 * @throws Exception
	 */
	@Action("/modules/user/user/userIdentify/userIdentifyExcel")
	public void userIdentifyExcel() throws Exception {
		response.setContentType("application/msexcel;charset=UTF-8");
/*		int pageNumber = 1;// 当前页数
		int pageSize = 99999999;// 每页总数
		
		String vipStatus = paramString("vipStatus");
		String emailStatus = paramString("emailStatus");
		String realNameStatus = paramString("realNameStatus");
		String mobilePhoneStatus = paramString("mobilePhoneStatus");
		String userName = paramString("userName");
		
		if(null !=vipStatus && !"".equals(vipStatus)){
			map.put("vipStatus", vipStatus);
		}
		if(null !=emailStatus && !"".equals(emailStatus)){
			map.put("emailStatus", emailStatus);
		}
		if(null !=realNameStatus && !"".equals(realNameStatus)){
			map.put("realNameStatus", realNameStatus);
		}
		if(null !=mobilePhoneStatus && !"".equals(mobilePhoneStatus)){
			map.put("mobilePhoneStatus", mobilePhoneStatus);
		}
		if(null !=userName && !"".equals(userName)){
			map.put("userName", userName);
		}
		model.getBirthday();*/
		/*PageDataList<UserIdentifyModel> pagaDataList = userIdentifyService.getPageDataListForIdentify(map, pageNumber, pageSize);
		List<UserIdentifyModel> list = pagaDataList.getList();
		List<UserIdentifyModel> newList = new ArrayList<UserIdentifyModel>();		
		for(int i=0;i<list.size();i++){
			UserIdentifyModel uim = list.get(i);
			if("80".equals(uim.getEmailStatus())){
				uim.setEmailStatusNew("未认证");
			}else if("81".equals(uim.getEmailStatus())){
				uim.setEmailStatusNew("认证成功");
			}
			if("85".equals(uim.getMobilePhoneStatus())){
				uim.setMobilePhoneStatusNew("未认证");
			}else if("86".equals(uim.getMobilePhoneStatus())){
				uim.setMobilePhoneStatusNew("认证成功");
			}else if("87".equals(uim.getMobilePhoneStatus())){
				uim.setMobilePhoneStatusNew("未认证通过");
			}
			if("82".equals(uim.getRealNameStatus())){
				uim.setRealNameStatusNew("未认证");
			}else if("83".equals(uim.getRealNameStatus())){
				uim.setRealNameStatusNew("认证成功");
			}else if("88".equals(uim.getRealNameStatus())){
				uim.setRealNameStatusNew("认证成功");
			}else if("84".equals(uim.getRealNameStatus())){
				uim.setRealNameStatusNew("认证未通过");
			}
			newList.add(uim);
		}*/
		List<UserIdentifyModel> list = userIdentifyService.excelListUserIdentifyInfo(model);
		String title = "用户认证信息Excel表";
		
		String[] hearders = new String[] {"编号","用户名","真实姓名","邮箱认证状态","手机认证状态","手机认证审核时间","实名认证状态","实名认证审核时间"};// 表头数组
		String[] fields = new String[] { "userId","userName","realName","emailStatusNew","mobilePhoneStatusNew","mobilePhoneVerifyTime","realNameStatusNew","realNameVerifyTime"};// 对象属性数组
		/*int sheetRows = 50000;	//导出一页的条数
 		int sheetPage = newList.size()/sheetRows;
		if(newList.size()%sheetRows > 0){
			sheetPage += 1;
		}
		List<TableData> tableDatas = new ArrayList<TableData>();
		for(int i = 0; i < sheetPage; i++){
			List<UserIdentifyModel> tdList = new ArrayList<UserIdentifyModel>();
			for(int j = i * sheetRows ; j < (i+1)*sheetRows && j <newList.size(); j++ ){
				UserIdentifyModel sm = newList.get(j);
				tdList.add(sm);
			}
			TableData td = ExcelUtils.createTableData(tdList, ExcelUtils.createTableHeader(hearders), fields);
			td.setSheetTitle(title + "--第" + (i+1) + "页");
			tableDatas.add(td);
		}
		JsGridReportBase report = new JsGridReportBase(request, response);
		report.exportToExcel(title, getOperator().getUserName(), tableDatas);*/
		String contextPath = ServletActionContext.getServletContext().getRealPath("/");
		String downloadFile = "";
		downloadFile = "weekReport" + System.currentTimeMillis() + ".xls";
		String infile = contextPath + "/data/export/" + downloadFile;

		ExcelHelper.writeExcel(infile, list, fields, hearders);
		this.export(infile, downloadFile);
	}

	/**
	 * 获得用户认证信息页面
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action(value = "/modules/user/user/userIdentify/userRealNameManager")
	public String userRealNameManager() throws Exception {
		return "userRealNameManager";
	}

	/**
	 * 获得用户认证信息列表
	 * 
	 * @throws Exception
	 */
	@Action(value = "/modules/user/user/userIdentify/userRealNameList")
	public void userRealNameList() throws Exception {
		try {
			UserIdentify model = (UserIdentify) paramModel(UserIdentify.class, "userIdentify");
			data = new HashMap<String, Object>();
			int pageNumber = paramInt("page");// 当前页数
			int pageSize = paramInt("rows");// 每页总数
			PageDataList<UserModel> pagaDataList = userIdentifyService.userModelList(pageNumber, pageSize, model);
			int totalPage = pagaDataList.getPage().getTotal();// 总页数
			data.put("total", totalPage);
			data.put("rows", pagaDataList.getList());
			printJson(getStringOfJpaObj(data));
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	/**
	 * 审核用户认证信息页面
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action(value = "/modules/user/user/userIdentify/userRealNameEditPage")
	public String userRealNameEditPage() throws Exception {
		initRSAME();
		saveToken("userRealNameEditToken");
		UserIdentify userAttestation = userIdentifyService.findById(model.getUserId());
		UserCache userCache = userCacheService.findByUserId(userAttestation.getUser().getUserId());
		// 实名(身份证)校验
		RealNameAttestationRuleCheck realCardCheck = (RealNameAttestationRuleCheck) Global
				.getRuleCheck("realNameAttestation");
		if (!realCardCheck.style().equals("ID5")) {
			request.setAttribute("showPic", "showPic");
		}
		request.setAttribute("userAttestation", userAttestation);
		request.setAttribute("userCache", userCache);
		return "userRealNameEditPage";
	}

	/**
	 * 审核用户认证信息
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action(value = "/modules/user/user/userIdentify/userRealNameEdit")
	public void userRealNameEdit() throws Exception {
		operator = getOperator();
		data = new HashMap<String, Object>();
		long id = paramLong("id");
		String realNameVerifyRemark = paramString("realNameVerifyRemark");
		int realNameStatus = paramInt("realNameStatus");
		checkToken("userRealNameEditToken");
		userIdentifyService.userAttestationEdit(id, realNameVerifyRemark, realNameStatus+"", operator);  // TODO 于俊斐 这儿状态可能不对
		data.put("result", true);
		data.put("msg", "操作成功！");
		printJson(getStringOfJpaObj(data));
	}
	
	/**
	 * 更换客服审核及更换的记录
	 * @return
	 */
	@Action(value = "/modules/user/user/userChange/userChangeManage")
	public String userChangeManage(){
		
		return "userChangeManage";
	}
	
	
	/**
	 * 更换客服需要审核的查询
	 * @return
	 * @throws Exception 
	 */
	@Action(value = "/modules/user/user/userChange/userChangeList")
	public void userChangeList() throws Exception{
		data = new HashMap<String, Object>();
		int pageNumber = paramInt("page");// 当前页数
		int pageSize = paramInt("rows");// 每页总数
		if (paramString("emailStatus").equals("")) {
			model = null;
		}
		PageDataList<UserIdentifyModel> pagaDataList = userIdentifyService.findUserIdentifylist(pageNumber, pageSize,
				model);
		int totalPage = pagaDataList.getPage().getTotal();// 总页数
		data.put("total", totalPage);
		data.put("rows", pagaDataList.getList());
		printJson(getStringOfJpaObj(data));
	}

}
