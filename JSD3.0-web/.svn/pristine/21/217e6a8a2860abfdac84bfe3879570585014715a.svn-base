package com.rongdu.p2psys.web.borrow;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Action;

import com.opensymphony.xwork2.ActionContext;
import com.rongdu.p2psys.borrow.service.BorrowProtocolService;
import com.rongdu.p2psys.borrow.service.BorrowService;
import com.rongdu.p2psys.core.protocol.AbstractProtocolBean;
import com.rongdu.p2psys.core.web.BaseAction;
import com.ddtkj.p2psys.user.domain.User;

/**
 * 协议下载
 * 
 * @author qj
 * @version 2.0
 * @since 2014年3月17日
 */
public class BorrowProtocolAction extends BaseAction {
	private static Logger logger = Logger.getLogger(BorrowProtocolAction.class);
	@Resource
	private BorrowProtocolService borrowProtocolService;
	@Resource
	private BorrowService borrowService;

	/**
	 * 下载协议
	 * 
	 * @return
	 */
	@Action("/member/borrow/borrowerProtocol")
	public String borrowerProtocol() throws Exception {
		User user = getSessionUser();
		long borrowId = paramLong("borrowId");
		AbstractProtocolBean protocolBean = borrowProtocolService.buildBorrowerProtocol(borrowId, user.getUserId());
		try {
			generateDownloadFile(protocolBean.getInPdfName(), protocolBean.getDownloadFileName());
		} catch (FileNotFoundException e) {
			logger.error("协议pdf文件" + protocolBean.getDownloadFileName() + "未找到！");
		} catch (IOException e) {
			logger.error(e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	/**
	 * 下载协议  转出者协议
	 * 
	 * @return
	 */
	@Action("/member/credit/caProtocol")
	public String caProtocol() throws Exception {
		User user = getSessionUser();
		long borrowId = paramLong("caId");
		AbstractProtocolBean protocolBean = borrowProtocolService.buildCaProtocol(borrowId, user.getUserId());
		try {
			generateDownloadFile(protocolBean.getInPdfName(), protocolBean.getDownloadFileName());
		} catch (FileNotFoundException e) {
			logger.error("协议pdf文件" + protocolBean.getDownloadFileName() + "未找到！");
		} catch (IOException e) {
			logger.error(e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	/**
	 * 下载协议  购入者协议
	 * 
	 * @return
	 */
	@Action("/member/credit/clProtocol")
	public String clProtocol() throws Exception {
		User user = getSessionUser();
		long caId = paramLong("caId");
		AbstractProtocolBean protocolBean = borrowProtocolService.buildClProtocol(caId,paramLong("clId"),user.getUserId());
		try {
			generateDownloadFile(protocolBean.getInPdfName(), protocolBean.getDownloadFileName());
		} catch (FileNotFoundException e) {
			logger.error("协议pdf文件" + protocolBean.getDownloadFileName() + "未找到！");
		} catch (IOException e) {
			logger.error(e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	/**
	 * 下载协议
	 * 
	 * @return
	 */
	@Action("/member/invest/tenderProtocol")
	public String tenderProtocol() throws Exception {
		User user = getSessionUser();
		long tenderId = paramLong("tenderId");
		AbstractProtocolBean protocolBean = borrowProtocolService.buildTenderProtocol(tenderId);
		try {
			generateDownloadFile(protocolBean.getInPdfName(), protocolBean.getDownloadFileName());
		} catch (FileNotFoundException e) {
			logger.error("协议pdf文件" + protocolBean.getDownloadFileName() + "未找到！");
		} catch (IOException e) {
			logger.error(e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	private void generateDownloadFile(String inFile, String downloadFile) throws IOException {
		InputStream ins = new BufferedInputStream(new FileInputStream(inFile));
		byte[] buffer = new byte[ins.available()];
		ins.read(buffer);
		ins.close();
		HttpServletResponse response = (HttpServletResponse) ActionContext.getContext().get(
				ServletActionContext.HTTP_RESPONSE);
		response.reset();
		response.addHeader("Content-Disposition", "attachment;filename=" + new String(downloadFile.getBytes()));
		response.addHeader("Content-Length", "" + new File(inFile).length());
		OutputStream ous = new BufferedOutputStream(response.getOutputStream());
		response.setContentType("application/octet-stream");
		ous.write(buffer);
		ous.flush();
		ous.close();
	}
}
