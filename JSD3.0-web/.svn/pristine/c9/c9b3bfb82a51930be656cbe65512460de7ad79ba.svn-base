package com.rongdu.p2psys.web.user;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.Cookie;

import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Logger;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.InterceptorRef;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.TypeReference;
import com.ddtkj.p2psys.core.usercenter.AES;
import com.ddtkj.p2psys.core.usercenter.Encodes;
import com.ddtkj.p2psys.core.usercenter.HttpResult;
import com.ddtkj.p2psys.core.usercenter.HttpUtils;
import com.ddtkj.p2psys.core.usercenter.SignUtils;
import com.ddtkj.p2psys.errorlog.constant.ErrorLogConstant;
import com.ddtkj.p2psys.errorlog.exception.HandleException;
import com.ddtkj.p2psys.transfer.service.AccountTransferService;
import com.ddtkj.p2psys.user.constant.UserConstant;
import com.ddtkj.p2psys.user.domain.User;
import com.ddtkj.p2psys.user.domain.UserCache;
import com.ddtkj.p2psys.user.domain.UserIdentify;
import com.ddtkj.p2psys.user.domain.UserLoginHisotry;
import com.ddtkj.p2psys.user.exception.UserException;
import com.ddtkj.p2psys.user.model.UserModel;
import com.opensymphony.xwork2.ModelDriven;
import com.rongdu.common.util.DateUtil;
import com.rongdu.common.util.StringUtil;
import com.rongdu.p2psys.account.model.accountlog.BaseAccountLog;
import com.rongdu.p2psys.account.model.accountlog.noac.GetCodeLog;
import com.rongdu.p2psys.borrow.service.BorrowService;
import com.rongdu.p2psys.cooperation.domain.CooperationLogin;
import com.rongdu.p2psys.cooperation.service.CooperationLoginService;
import com.rongdu.p2psys.core.Global;
import com.rongdu.p2psys.core.constant.Constant;
import com.rongdu.p2psys.core.constant.NoticeConstant;
import com.rongdu.p2psys.core.rule.LoginRuleCheck;
import com.rongdu.p2psys.core.rule.RedPacketProduceRuleCheck;
import com.rongdu.p2psys.core.rule.RegisterRuleCheck;
import com.rongdu.p2psys.core.rule.SafetyRuleCheck;
import com.rongdu.p2psys.core.rule.ScoreProduceRuleCheck;
import com.rongdu.p2psys.core.rule.UserCenterRuleCheck;
import com.rongdu.p2psys.core.service.NoticeService;
import com.rongdu.p2psys.core.sms.sendMsg.BaseMsg;
import com.rongdu.p2psys.core.util.mail.Mail;
import com.rongdu.p2psys.core.web.BaseAction;
import com.rongdu.p2psys.region.service.RegionService;
import com.rongdu.p2psys.score.service.ScoreLogService;
import com.rongdu.p2psys.score.service.ScoreService;
import com.rongdu.p2psys.user.dao.UserIdentifyDao;
import com.rongdu.p2psys.user.model.getpwd.BaseGetPwd;
import com.rongdu.p2psys.user.model.getpwd.GetPwdEmail;
import com.rongdu.p2psys.user.model.getpwd.GetPwdPhone;
import com.rongdu.p2psys.user.service.UserCacheService;
import com.rongdu.p2psys.user.service.UserIdentifyService;
import com.rongdu.p2psys.user.service.UserLoginHisotryService;
import com.rongdu.p2psys.user.service.UserService;

/**
 * 用户账户
 * 
 * @author xx
 * @version 2.0
 * @since 2014年2月27日
 */
public class UserAction extends BaseAction<User> implements ModelDriven<User> {
	Logger logger = Logger.getLogger(UserAction.class);
	@Resource
	private UserService userService;
	@Resource
	private UserCacheService userCacheService;
	@Resource
	private UserIdentifyService userIdentifyService;
	@Resource
	private UserLoginHisotryService userLoginHisotryService;
	@Resource
	private CooperationLoginService cooperationLoginService;
	@Resource
	private NoticeService noticeService;
	@Resource
	private ScoreService scoreService;
	@Resource
	private ScoreLogService scoreLogService;
	@Resource
	private RegionService regionService;

	@Resource
	private UserIdentifyDao userIdentifyDao;
	@Resource
	private BorrowService borrowService;

	@Resource
	private AccountTransferService accountTransferService;

	// 用户登录日志
	UserLoginHisotry userLoginHisotry = new UserLoginHisotry();

	/** 平台安全性规则 **/
	private SafetyRuleCheck safetyRuleCheck = (SafetyRuleCheck) Global
			.getRuleCheck("safety");
	/** 注册规则 **/
	private RegisterRuleCheck registerRuleCheck = (RegisterRuleCheck) Global
			.getRuleCheck("register");
	/** 登录规则 **/
	private LoginRuleCheck loginRuleCheck = (LoginRuleCheck) Global
			.getRuleCheck("login");
	/** 积分规则 */
	private ScoreProduceRuleCheck spRuleCheck = (ScoreProduceRuleCheck) Global
			.getRuleCheck("scoreProduce");

	private Map<String, Object> data;
	/**
	 * 返回json格式的提示内容
	 * 
	 * @author xinggenwang@ddtkj.com
	 * */
	private Map<String, Object> jsonMsgData = new HashMap<String, Object>();

	/**
	 * 判断用户名是否已存在
	 * 
	 * @return
	 * @throws Exception
	 *             modify by xinggenwang@ddtkj.com
	 */
	@Action(value = "/user/checkUsername", interceptorRefs = {
			@InterceptorRef("ajaxSafe"), @InterceptorRef("globalStack") })
	public void checkUsername() throws Exception {
		model.setUserName(StringUtil.isNull(model.getUserName()));
		if (StringUtil.isBlank(model.getUserName())) {
			jsonMsgData.put("return", false);
			jsonMsgData.put("code", "10");
			jsonMsgData.put("msg", "请填写用户名!");
			printJson(getStringOfJpaObj(jsonMsgData));
			return;
		}
		try {
			safetyRuleCheck.hasFontUnallowedUsername(model);// 安全规则-禁止使用敏感用户名
		} catch (UserException e) {
			jsonMsgData.put("return", false);
			jsonMsgData.put("code", "11");
			jsonMsgData.put("msg", "请勿使用含有敏感词汇的用户名:" + model.getUserIdentify());
			printJson(getStringOfJpaObj(jsonMsgData));
			return;
		}
		int count = userService.countByUserName(model.getUserName());
		boolean result = count > 0 ? false : true;
		if (!result) {
			// jsonMsgData.put("return", false);
			// jsonMsgData.put("code", "12");
			// jsonMsgData.put("msg", model.getUserName()+":已被注册!");
			printJson(getStringOfJpaObj(result));
			return;
		} else {
			// jsonMsgData.put("return", true);
			// jsonMsgData.put("code", "00");
			// jsonMsgData.put("msg", model.getUserName()+":可以注册");
			printJson(getStringOfJpaObj(result));
			return;
		}

	}

	/**
	 * 判断昵称是否已存在
	 * 
	 * @return
	 * @throws Exception
	 *             modify by wcw 2014-01-27
	 */
	@Action(value = "/user/checkNickname", interceptorRefs = {
			@InterceptorRef("ajaxSafe"), @InterceptorRef("globalStack") })
	public void checkNickname() throws Exception {
		model.setNickname(StringUtil.isNull(model.getNickname()));
		try {
			safetyRuleCheck.hasFontUnallowedUsername(model);// 安全规则-禁止使用敏感用户名
		} catch (UserException e) {

			printJson(getStringOfJpaObj(false));
			return;
		}
		int count = userService.countByNickName(model.getNickname());
		boolean result = count > 0 ? false : true;
		printJson(getStringOfJpaObj(result));
	}

	/**
	 * 判断邮箱是否已被使用
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action(value = "/user/checkEmail", interceptorRefs = {
			@InterceptorRef("ajaxSafe"), @InterceptorRef("globalStack") })
	public String checkEmail() throws Exception {
		int count = userService.countByEmail(model.getEmail());
		boolean result = count > 0 ? false : true;
		printJson(getStringOfJpaObj(result));
		return null;
	}

	/**
	 * 判断身份证号码是否已被使用
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action(value = "/user/checkCardId", interceptorRefs = {
			@InterceptorRef("ajaxSafe"), @InterceptorRef("globalStack") })
	public String checkCardId() throws Exception {
		int count = userService.countByCardId(model.getCardNO());
		boolean result = count > 0 ? false : true;
		printJson(getStringOfJpaObj(result));
		return null;
	}

	/**
	 * 判断手机号码是否已被使用
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action(value = "/user/checkMobilePhone", interceptorRefs = {
			@InterceptorRef("ajaxSafe"), @InterceptorRef("globalStack") })
	public String checkMobilePhone() throws Exception {
		int count = userService.countByMobilePhone(model.getMobilePhone());
		boolean result = count > 0 ? false : true;
		printJson(getStringOfJpaObj(result));
		return null;
	}

	/**
	 * 用户注册页面 /user/register.html?id=MTY2ODIsMTQxNzA3MjgyNiw1aDh+PTdjenl4
	 * 
	 * 链接生成 String ss =
	 * "/user/register.html?id="+ReferrerUtils.getInstance().getdecodeIdStr(u) ;
	 * System.out.println(ss);
	 * 
	 * 新加 推荐人
	 */
	@Action("/user/register")
	public String register() throws Exception {
		// 获取加密字符串
		String inviterUsername = paramString("invite_username");
		request.setAttribute("enable_codeCheck",
				registerRuleCheck.enable_codeCheck);// 是否需要验证码
		request.setAttribute("invite_username", inviterUsername);
		initRSAME();// RSA初始化
		// 判段推介人是否存在
		request.setAttribute("reuserid", paramString("id"));
		// 注册活动页跳转使用 start
		request.setAttribute("activity", paramString("activity"));
		request.setAttribute("mobile", paramString("mobile"));
		// 注册活动页跳转使用 end
		// 李建云 加QQ绑定
		String openId = this.paramString("openId");
		String openType = this.paramString("openType");
		request.setAttribute("openId", openId);
		// JSDP-31 fengguoqin 5.21 start
		request.setAttribute("otype", 1);
		// JSDP-31 fengguoqin 5.21 end
		
		SafetyRuleCheck ruleCheck = (SafetyRuleCheck) Global.getRuleCheck("safety");
		session.put("safety", ruleCheck);
		// JSDP-123 gjh 2015-6-1 start
		UserCenterRuleCheck userCenterRule = (UserCenterRuleCheck) Global
				.getRuleCheck("userCenter");
		if (userCenterRule != null && userCenterRule.getStatus() == 1) {
			redirect(userCenterRule.getUrl() + "/uc/auth/register");
			return null;
		} else {
			return "register";
		}
		// JSDP-123 gjh 2015-6-1 end

	}

	/**
	 * @author 郭俊辉 处理推荐人
	 * 
	 * @throws Exception
	 */
	@Action("/user/referrer")
	public void referrer() throws Exception {
		if (!"".equals(paramString("id"))) {// 链接方式
			User inviteUser = userService.activationReferrer(paramString("id"));
			if (inviteUser != null) {
				data = new HashMap<String, Object>();
				data.put("referrer", inviteUser.getUserName());
				printJson(getStringOfJpaObj(data));
			}
		} else {
			data = new HashMap<String, Object>();
			data.put("referrer", "");
		}
		// JSDP-86 wcw 2015-05-05 start
		data = null;
		// JSDP-86 wcw 2015-05-05 end
	}

	/**
	 * 根据用户输入的账户判断是 邮箱、手机
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action(value = "/user/checkUserNameType", interceptorRefs = {
			@InterceptorRef("ajaxSafe"), @InterceptorRef("globalStack") })
	public String checkUserNameType() throws Exception {
		String param = checkMobileOrEmail(paramString("emom"));
		if ("mobile".equals(param)) {
			int count = userService.countByMobilePhone(paramString("emom"));
			if (count > 0) {
				printJson(getStringOfJpaObj("手机已经被使用."));
			}
		} else if ("email".equals(param)) {
			int count = userService.countByEmail(paramString("emom"));
			if (count > 0) {
				printJson(getStringOfJpaObj("邮箱已经被使用."));
			}
		} else {
			printJson(getStringOfJpaObj("手机号不正确"));
		}
		printJson(getStringOfJpaObj(true));
		return null;
	}

	/**
	 * 验证字符串是手机号还是邮箱
	 * 
	 * @param param
	 * @return
	 */
	private String checkMobileOrEmail(String param) {
		System.out.println(param);
		String mobile = "((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1})|(14[0-9]{1})|(17[0-9]{1}))+\\d{8}";
		String email = "\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+";
		if (param.matches(mobile)) {
			return "mobile";
		} else if (param.matches(email)) {
			return "email";
		} else {
			return "other";
		}
	}

	// 旧站链接疯狂刷新 暂时处理 wcw start
	@Action(value = "/borrow/rongBorrowList")
	public String rongBorrowList() throws Exception {
		return null;
	}

	@Action("/user/checkPhone")
	public void checkPhone() throws Exception {

	}

	@Action("/user/phoneCode")
	public void phoneCode() throws Exception {

	}

	// 旧站链接疯狂刷新 暂时处理 wcw end
	/**
	 * 进行用户注册
	 * 
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/user/doRegister")
	public String doRegister() throws Exception {

		data = new HashMap<String, Object>();
		Cookie[] cookies = request.getCookies();
		if (cookies == null || cookies.length < 1) {// 先判断cookie是否开启
			data.put("result", false);
			data.put("msg", "cookie未开启,请开启cookie");
			data.put("code", "00");
		} else {
			// 判断账户号类型
			String retype = checkMobileOrEmail(paramString("emom"));
			if ("mobile".equals(retype)) {
				model.setMobilePhone(paramString("emom"));
			}
			if ("email".equals(retype)) {
				model.setEmail(paramString("emom"));
			}
			UserModel userModel = UserModel.instance(model);
			userModel.setValidCode(paramString("validCode"));
			userModel.setConfirmNewPwd(paramString("confirmPassword"));
			userModel.validRegRule();
			userModel.setAddIp(getRequestIp());
			userModel.validRegModel();
			userModel.validRegPwdModel();

			// 增加用户注册方式 2015年5月8日 孙晓勇 start
			userModel.setRegisterWay("P");
			// 增加用户注册方式 2015年5月8日 孙晓勇 end

			// User u = userService.doRegisterNew(userModel.prototype());
			User u = userModel.prototype();
			if (u != null) {
				data.put("result", true);
				data.put("msg", "填写成功！");
				data.put("code", "001");
				data.put("retype", retype);
				data.put("userId", u.getUserId());
				data.put("userName", u.getUserName());
				data.put("email", u.getEmail());
				data.put("mobile", u.getMobilePhone());
				String openId = this.paramString("openId");
				int type = this.paramInt("openType");
				if (StringUtil.isNotBlank(openId) && type > 0) {
					userModel.setOpenId(openId);
					userModel.setOpenType(type);
				}
				session.put("userModel", userModel);
				// userService.sendActivateOrCode(email,mobile);
				//sendActivateOrCode();
			} else {
				data.put("result", false);
				data.put("msg", "填写失败！");
				data.put("code", "11");

				// throw new UserException("填写失败！", 1);
			}
		}
		printJson(getStringOfJpaObj(data));
		// JSDP-86 wcw 2015-05-05 start
		data = null;
		// JSDP-86 wcw 2015-05-05 end
		return null;
	}

	/**
	 * @author 郭俊辉 发送验证码或激活链接（邮箱、手机）
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/user/sendActivateOrCode")
	public void sendActivateOrCode() throws Exception {

		// BaseMsg msg = new BaseMsg(NoticeConstant.NOTICE_BIND_PHONE) ;
		// msg.sendMsg();

		// String userName = "gjh132";
		// User user = userService.getUserByInfo(userName);
		data = new HashMap<String, Object>();
		String email = null;
		// JSDBET-822 gjh 2015-3-19 start
		String mobile = paramString("mobile");
		// JSDBET-822 gjh 2015-3-19 end
		String param = checkMobileOrEmail(paramString("emom"));
		//JSDP-223 gjh 2015-7-15 start
		UserModel userModel = UserModel.instance(model);
		userModel.setValidCode(paramString("validCode"));
		try {
			userModel.validRegRule();
		} catch (Exception e) {
			e.printStackTrace();
			data.put("result", false);
			data.put("code", "011");
			data.put("msg", e.getMessage());
			printJson(getStringOfJpaObj(data));
			return;
		}
		//JSDP-223 gjh 2015-7-15 start
		if ("mobile".equals(param)) {
			int count = userService.countByMobilePhone(paramString("emom"));
			mobile = paramString("emom");
			if (count > 0) {
				data.put("result", false);
				data.put("code", "001");
				data.put("msg", "手机已经被使用.");
			} else {
				//JSDP-217 gjh 2015-7-9 start
				long date = DateUtil.getTime(new Date());
				if (null != session.get("phoneNowDate" + mobile)) {
					long preDate = Long.parseLong(session.get("phoneNowDate" + mobile).toString());
					if (session.get("phoneNowDate" + mobile) != null && (date - preDate) < Global.getInt("verify_code_time")) {
						data.put("result", false);
						data.put("code", "006");
						data.put("msg", "本次短信验证码已发出，请"+Global.getInt("verify_code_time")+"秒后重试。如果超过"+Global.getInt("verify_code_time")+"秒还没有输该验证码，请重新获取");
						printJson(getStringOfJpaObj(data));
						return;
					}
				}
				userService.sendActivateOrCode(email, mobile);
				data.put("result", true);
				data.put("code", "003");
				data.put("msg", "发送成功！");
				session.put("phoneNowDate" + mobile, DateUtil.getTime(new Date()));
				printJson(getStringOfJpaObj(data));
				return;
				//JSDP-217 gjh 2015-7-9 end
			}
		} else if ("email".equals(param)) {
			email = paramString("emom");
			session.put("email", email);
			int count = userService.countByEmail(paramString("emom"));
			if (count > 0) {
				data.put("result", false);
				data.put("code", "002");
				data.put("msg", "邮箱已经被使用.");
			} else {
				//JSDP-217 gjh 2015-7-9 start
				long date = DateUtil.getTime(new Date());
				if (null != session.get("emailNowDate" + email)) {
					long preDate = Long.parseLong(session.get("emailNowDate" + email).toString());
					if (session.get("emailNowDate" + email) != null && (date - preDate) < Global.getInt("verify_code_time")) {
						data.put("result", false);
						data.put("code", "007");
						data.put("msg", "本次邮箱验证码已发出，请"+Global.getInt("verify_code_time")+"秒后重试。如果超过"+Global.getInt("verify_code_time")+"秒还没有输该验证码，请重新获取");
						printJson(getStringOfJpaObj(data));
						return;
					}
				}
				// JSDBET-822 gjh 2015-3-19 start
				User user = (User) request.getSession().getAttribute("user");
				if (user == null) {
					user = userService.getUserByMobilePhone(mobile);
				}
				if (user == null) {
					userService.sendActivateOrCode(email, mobile);
				} else {
					String nid = NoticeConstant.GET_REG_EMAIL;
					GetCodeLog blog = new GetCodeLog(user, user.getUserName(),
							email, null, nid);
					blog.initCode(nid);
					blog.doEvent();
				}
				// JSDBET-822 gjh 2015-3-19 end
				data.put("result", true);
				data.put("code", "003");
				data.put("msg", "发送成功！");
				session.put("emailNowDate" + email, DateUtil.getTime(new Date()));
				printJson(getStringOfJpaObj(data));
				return;
				//JSDP-217 gjh 2015-7-9 end
			}
		} else {
			data.put("result", false);
			data.put("code", "004");
			data.put("msg", "邮箱或手机格式错误！");
			//printJson(getStringOfJpaObj("手机号或邮箱不正确"));
		}
		printJson(getStringOfJpaObj(data));
		return;
	}

	/**
	 * @author 郭俊辉 校验短信验证码
	 * 
	 * @throws Exception
	 */
	@Action("/user/checkMobileCode")
	public void checkMobileCode() throws Exception {
		String validCode = paramString("validCode");
		String mobile = paramString("emom");

		/*
		 * String mapMobile = (String)
		 * request.getSession().getAttribute("get_reg_phone_mobile");//获取手机号码
		 * String mobileCode = (String)
		 * request.getSession().getAttribute("get_reg_phone_code");//获取验证码
		 */
		// String mapMobile = (String)
		// Global.SESSION_MAP.get("get_reg_phone_mobile");//获取手机号码
		UserModel userModel = (UserModel) session.get("userModel");
		if (userModel == null) {
			data.put("result", false);
			data.put("code", "111");
			data.put("msg", "校验验证码异常！");
			printJson(getStringOfJpaObj(data));
			return;
		}
		String mapMobile = userModel.getMobilePhone();
		// String mobileCode = (String) Global.SESSION_MAP.get(mapMobile +
		// "_get_reg_phone_code");//获取验证码
		String mobileCode = (String) request.getSession().getAttribute(
				mapMobile + "_get_reg_phone_code");
		long verifyTime = noticeService.getNoticeAddTime("get_reg_phone",
				mobile);// 获取发送时间
		long vtime = StringUtil.toLong(Global.getValue("verify_code_time"));// 获取系统时间

		data = new HashMap<String, Object>();
		data.put("retype", "mobile");
		data.put("userName", userModel.getUserName());
		if (mobile.equals(mapMobile)) {
			if (validCode.equals(mobileCode)
					&& (System.currentTimeMillis() - verifyTime < vtime * 1000)) {// 验证码是否超时有效

				// User inviteUser =
				// (User)request.getSession().getAttribute("inviteUser");
				User inviteUser = userService
						.getUserByInfo(paramString("referrer"));// 获取推荐人
				userModel.validRegModel();
				userModel.validRegPwdModel();
				User u = userService.doRegisterNew(userModel.prototype(),
						inviteUser);
				if (u != null) {
					if (StringUtil.isNotBlank(userModel.getOpenId())
							&& userModel.getOpenType() > 0) {
						CooperationLogin cooperation = new CooperationLogin();
						cooperation.setOpenId(userModel.getOpenId());
						cooperation.setType(userModel.getOpenType());
						cooperation.setUserId(u.getUserId());
						cooperation.setAddTime(new Date());
						// JSDP-31 fengguoqin 5.21 start
						/*
						 * cooperationLoginService.addCooperationLogin(cooperation
						 * );
						 */
						cooperationLoginService
								.updateCooperationLogin(cooperation);
						// JSDP-31 fengguoqin 5.21 end
					}
					request.getSession().removeAttribute("userModel");
					request.getSession().setAttribute("user", u);
					//fengguoqin 20150718   start  注册完成直接跳转到登录页面
					session.put(Constant.SESSION_USER, u);
					UserIdentify userIdentify = userIdentifyService.findById(u.getUserId());
					session.put(Constant.SESSION_USER_IDENTIFY, userIdentify);
					//fengguoqin 20150718   end
					data.put("result", true);
					data.put("code", "002");
					data.put("mobile", mobile);
					data.put("msg", "验证码正确！");
				}
			} else {
				if (!(System.currentTimeMillis() - verifyTime < vtime * 1000)) {
					// Global.SESSION_MAP.remove(mapMobile +
					// "_get_reg_phone_code");
					request.getSession().removeAttribute(
							mapMobile + "_get_reg_phone_code");
				}
				data.put("result", false);
				data.put("code", "110");
				data.put("msg", "验证码有误,或已失效！");
			}
		} else {
			data.put("result", false);
			data.put("code", "111");
			data.put("msg", "当前手机号与提交手机号不同请重新输入！");// TODO
													// 手机号与提交时的手机号不同时具体提示信息不明？郭俊辉
		}
		printJson(getStringOfJpaObj(data));
		// JSDP-86 wcw 2015-05-05 start
		data = null;
		// JSDP-86 wcw 2015-05-05 end
	}

	/**
	 * @author 郭俊辉 校验邮箱验证码
	 * 
	 * @throws Exception
	 */
	@Action("/user/checkEmailCode")
	public void checkEmailCode() throws Exception {
		User user = (User) request.getSession().getAttribute("user");
		try {
			String validCode = paramString("validCode");
			String email = paramString("emom");
			String mapEmail = (String) session.get("email");
			String emailCode = (String) request.getSession().getAttribute(
					mapEmail + "_get_reg_email_code");// 获取验证码
			if (!StringUtil.isNotBlank(emailCode)) {
				Map<String, Object> map = (Map<String, Object>) request
						.getSession().getAttribute("get_reg_email_code");
				if (map != null && map.size() > 0) {
					emailCode = (String) map.get("code");
				} else {
					// session中邮箱验证码为空
				}
			}
			long verifyTime = noticeService.getNoticeAddTime("get_reg_email",
					email);// 获取发送时间
			long vtime = StringUtil.toLong(Global.getValue("verify_code_time"));// 获取系统当前时间
			data = new HashMap<String, Object>();
			data.put("retype", "email");
			if (email.equals(mapEmail)) {
				if (validCode.equals(emailCode)
						&& (System.currentTimeMillis() - verifyTime < vtime * 1000)) {// 验证码是否超时有效
					if (user != null) {
						userService.activateEmailByCode(user.getUserName(),
								email);
						UserIdentify userIdentify = user.getUserIdentify();
						session.put(Constant.SESSION_USER, user);// 添加登录状态
						session.put(Constant.SESSION_USER_IDENTIFY,
								userIdentify);
						session.put("logintime", System.currentTimeMillis());
						userLoginHisotry = new UserLoginHisotry(user,
								user.getUserName(), new Date(), "P",
								getRequestIp(), "Y", null);
						userLoginHisotryService.save(userLoginHisotry);// 添加用户登录日志
						data.put("result", true);
						data.put("code", "003");
						data.put("msg", "验证成功！");
					} else {
						data.put("result", false);
						data.put("code", "122");
						data.put("msg", "绑定邮箱失败！");
					}
				} else {
					if (!(System.currentTimeMillis() - verifyTime < vtime * 1000)) {
						request.getSession().removeAttribute(
								mapEmail + "_get_reg_email_code");
					}
					data.put("result", false);
					data.put("code", "120");
					data.put("msg", "验证码有误,或已失效！");
				}
			} else {
				data.put("result", false);
				data.put("code", "121");
				data.put("msg", "当前邮箱与提交邮箱不同，请重新输入！");
			}
			// 验证邮箱错误抛出
		} catch (Exception e) {
			if(user!=null){
				logger.error("用户名为" + user.getUserName() + "的用户邮箱认证异常-------start");
				e.printStackTrace();
				logger.error("用户名为" + user.getUserName() + "的用户邮箱认证异常-------end");
				HandleException exception = new HandleException(e.getMessage(),
						"用户验证邮箱出错", ErrorLogConstant.LEVEL_SERIOUS, "O", "O0001",
						getSessionUser(), "User", getSessionUserId(), 1);
				exception.saveExceptionActionLog(exception);
				data.put("result", false);
				data.put("code", "123");
				data.put("msg", "邮箱认证异常" + e.getMessage());
			}
		}
		// 验证邮箱错误抛出
		printJson(getStringOfJpaObj(data));
		// JSDP-86 wcw 2015-05-05 start
		data = null;
		// JSDP-86 wcw 2015-05-05 end
	}

	/**
	 * @author 郭俊辉 认证邮箱页面
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/user/activeEmail")
	public String activeEmail() throws Exception {

		request.getSession().setAttribute("user",
				session.get(Constant.SESSION_USER));
		// JSDBET-822 gjh 2015-3-19 start
		if (getSessionUser() != null) {
			request.setAttribute("mobile", getSessionUser().getMobilePhone());
		} else {
			redirect("/user/login.html");
		}
		// JSDBET-822 gjh 2015-3-19 end
		return "activeEmail";
	}

	/**
	 * 第二步进行邮箱认证
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/user/doRegisterStep1")
	public String doRegisterStep1() throws Exception {
		User user = userService.activationEmail(paramString("id"));
		if (user != null) {
			request.setAttribute("msg", "邮箱激活成功，注册成功！");
			request.setAttribute("pwd", user.getPassword());
			request.setAttribute("uId", user.getUserId());
			request.setAttribute("userName", user.getUserName());
			return "initLoginPwd";
		}
		return "login";
	}

	/**
	 * 第二步手机认证通过认证
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/user/doRegisterStep2")
	public String doRegisterStep2() throws Exception {
		model = userService.activationPhone(paramString("mobilePhone"),
				paramString("code"));
		request.setAttribute("msg", "手机绑定成功，注册成功！");
		request.setAttribute("pwd", model.getPassword());
		request.setAttribute("uId", model.getUserId());
		return "regresult";
	}

	/**
	 * 第二步进行手机认证
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/user/getRegisterCode")
	public String getPwdCode() throws Exception {
		User u;
		String todo = "phone_code";
		u = userService.getUserByMobilePhone(model.getMobilePhone());
		//JSDP-223 gjh 2015-7-15 start
		data = new HashMap<String, Object>();
		UserModel userModel = new UserModel();
		userModel.setValidCode(paramString("validCode"));
		try {
			userModel.validRegRule();
		} catch (Exception e) {
			e.printStackTrace();
			data.put("result", false);
			data.put("code", "011");
			data.put("msg", e.getMessage());
			printJson(getStringOfJpaObj(data));
			return null;
		}
		//JSDP-223 gjh 2015-7-15 start
		BaseAccountLog blog = new GetCodeLog(u, u.getUserName(), todo);
		blog.initCode(todo);
		blog.doEvent();
		printSuccess();
		return null;
	}

	/**
	 * 初始化密码页面
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/user/initLoginPwd")
	public String initLoginPwd() throws Exception {
		User user = userService.find(model.getUserId());
		String referer = request.getHeader("Referer");
		if (referer == null) {
			throw new UserException("为了确保信息安全，请通过发送给您的邮箱点击访问", 1);
		}
		if (user.getPassword() != null && !"".equals(user.getPassword())) {
			throw new UserException("已经初始化过密码", 1);
		}
		request.setAttribute("companyName", user.getUserCache()
				.getCompanyName());
		request.setAttribute("uId", model.getUserId());
		return "initLoginPwd";
	}

	/**
	 * 初始化密码
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/user/initPwd")
	public void initPwd() throws Exception {

		if (!model.getPassword().equals(paramString("confirmPassword"))) {
			throw new UserException("两次输入的密码不一致！", 1);
		}
		User user = userService.find(model.getUserId());
		if (user.getPassword() != null && !"".equals(user.getPassword())) {
			throw new UserException("您已经初始化过密码！", 1);
		}
		user.setPassword(model.getPassword());
		userIdentifyService.modifyEmailStatus(user.getUserId(),
				UserConstant.USER_IDENTIFY_EMAIL_SUCCESS,
				UserConstant.USER_IDENTIFY_EMAIL_NO);
		userService.modifyPwd(user);
		printSuccess();
	}

	/**
	 * 用户登录页面
	 * 
	 * @return String
	 * @throws Exception
	 *             if has error
	 */
	@Action("/user/login")
	public String login() throws Exception {
		initRSAME();
		String openType = this.paramString("openType");
		String openId = this.paramString("openId");
		String redirectURL = paramString("redirectURL");
		String timeout = paramString("timeout");
		request.setAttribute("openType", openType);
		request.setAttribute("openId", openId);
		String redirectURL_ = (String) session.get("redirectURL");
		String timeout_ = (String) session.get("timeout");
		if (StringUtil.isNotBlank(redirectURL_)
				&& StringUtil.isNotBlank(timeout_)) {
			session.remove("redirectURL");
			session.remove("timeout");
		}
		session.put("redirectURL", redirectURL);
		session.put("timeout", timeout);
		// JSDP-123 gjh 2015-5-20 start
		UserCenterRuleCheck userCenterRule = (UserCenterRuleCheck) Global
				.getRuleCheck("userCenter");
		if (userCenterRule != null && userCenterRule.getStatus() == 1) {
			redirect("/user/loginPage.html");
			return null;
		} else {
			return "login";
		}
		// JSDP-123 gjh 2015-5-20 end
	}

	/**
	 * @author guojunhui@ddtkj.com 登录
	 * 
	 * @throws Exception
	 *             if has error
	 */
	@Action("/user/doLogin")
	public void doLogin() throws Exception {

		data = new HashMap<String, Object>();
		User loginUser = null;
		// 联合登录用户
		User openUser = (User) request.getAttribute("openUser");
		Cookie[] cookies = request.getCookies();
		String jsessionid = null;
		if (cookies != null) {
			for (Cookie c : cookies) {
				if (c.getName().equalsIgnoreCase("JSESSIONID")) {
					jsessionid = c.getValue();
				}
			}
		}
		if ((cookies == null || cookies.length < 1) && jsessionid == null) {// 先判断cookie是否开启
			data.put("result", false);
			data.put("msg", "cookie未开启,请开启cookie");
			data.put("code", "00");
		} else {
			if (openUser != null && openUser.getUserName() != null) {
				loginUser = openUser;
			} else {
				// 新登录
				model.setUserName(model.getUserName().trim());
				UserModel userModel = UserModel.instance(model);// ?
				String validCode = request.getParameter("validCode");
				userModel.setValidCode(validCode);
				// 验证码验证
				userModel.validRegRule();
				// 用户名或密码为空验证
				userModel.validLoginModel();

				String openType = this.paramString("openType");
				String openId = this.paramString("openId");
				// 联合登录
				if (openType != null && openType.length() > 0 && openId != null
						&& openId.length() > 0) {// 判断数据类型是否正确
					loginUser = cooperationLoginService.doQQLogin(
							userModel.prototype(), paramInt("encrypt"),
							openType, openId);
				} else {
					loginUser = userService.doLogin(userModel.prototype(),
							paramInt("encrypt"));
				}
			}
			if (loginUser == null) {
				data = loginFailHandle(model.getUserName());// 用户登录错误次数
				User user = userService.getUserByInfo(model.getUserName());
				// JSDP-129 wcw 2015-05-20 end
				if (user != null
						&& UserConstant.USER_LOCK_NO.equals(user.getIsLocked())) {// 判断登录方式,是否账户已锁定
					if (user.getUserId() != 0) {
						userLoginHisotry = new UserLoginHisotry(user,
								model.getUserName(), new Date(), "P",
								getRequestIp(), "N", "密码错误！");
						userLoginHisotryService.save(userLoginHisotry);// 添加用户登录日志
						// 加入登录通知
						Global.setTransfer("user", user);
						Global.setTransfer("status", "失败");
						BaseMsg msg = new BaseMsg(NoticeConstant.LOGIN_SUC_FAIL);
						msg.doEvent();
					}
				}
			} else {
				userCorrectOperation(loginUser);// 用户名密码正确操作
				// JSDBET-836 sxy 2015-3-19 start
				String response_type = paramString("response_type");
				String client_id = paramString("client_id");
				if (StringUtil.isNotBlank(response_type)
						&& StringUtil.isNotBlank(client_id)) {
					data.put("response_type", response_type);
					data.put("client_id", client_id);
					data.put("callback", paramString("callback"));
				}
				// JSDBET-836 sxy 2015-3-19 end
			}
		}
		printJson(getStringOfJpaObj(data));
		// JSDP-86 wcw 2015-05-05 start
		data = null;
		// JSDP-86 wcw 2015-05-05 end
	}

	/**
	 * @author 郭俊辉 当天登录失败处理
	 * 
	 * @param username
	 *            用户名
	 * @throws Exception
	 */
	private Map<String, Object> loginFailHandle(String username)
			throws Exception {
		Map<String, Object> data = null;// 存放锁定用户提示信息
		User user = userService.getUserByInfo(username);
		LoginRuleCheck loginRule = (LoginRuleCheck) Global
				.getRuleCheck("login");// 用户登录规则
		data = new HashMap<String, Object>();
		if (user != null) {
			if (!UserConstant.USER_LOCK_LOGOUT.equals(user.getIsLocked())) {
				UserCache userCache = user.getUserCache();
				// 用户当日连续错误次数
				// long userFindCount =
				// userLoginHisotryService.getLoginFindCount(user);
				long userFindCount = user.getLoginCount();
				if (userFindCount >= loginRule.today_max_login_fail_times) {// 判断用户登录错误次数是否超过最大错误次数
					user.setIsLocked(UserConstant.USER_LOCK_LOGIN);
					user.setLockRemark("密码错误次数过多账户已锁定");
					user.setLockTime(new Date());

					user.setLoginIp(getRequestIp());// 修改登录ip
					user.setLoginTime(new Date());// 修改登录时间
					userService.updateUser(user);// 修改用户锁定状态
					data.put("result", false);
					data.put("code", "12");
					data.put("msg", "密码错误次数过多账户已锁定,请明天再试或点击忘记密码");
					data.put("findCount", "" + userFindCount);
				} else {
					user.setLoginCount(user.getLoginCount() + 1);// 修改登录次数
					user.setLoginIp(getRequestIp());
					user.setLoginTime(new Date());
					data.put("result", false);
					data.put("code", "11");
					data.put("sumCount", loginRule.today_max_login_fail_times);
					data.put("msg", "密码错误,错误次数过多将锁定账户");
					data.put("findCount", user.getLoginCount());
				}
			} else {
				data.put("result", false);
				data.put("code", "10");
				data.put("msg", "用户名不存在");
			}
		} else if (user == null) {
			data.put("result", false);
			data.put("code", "10");
			data.put("msg", "该用户不存在！");
		}
		return data;
	}

	/**
	 * @author 郭俊辉 用户名密码正确操作，判断用户锁定状态，未锁定添加用户登录状态
	 * 
	 * @param u
	 *            User对象
	 * @throws Exception
	 */
	private void userCorrectOperation(User u) throws Exception {

		UserCache userCache = u.getUserCache();
		UserIdentify userIdentify = userIdentifyService.findByUserId(u
				.getUserId());
		LoginRuleCheck loginRule = new LoginRuleCheck();
		if (UserConstant.USER_LOCK_ADMIN.equals(u.getIsLocked())) {// 用户被后台管理员锁定不能登录
			data.put("result", false);
			data.put("code", "13");
			data.put("msg", "该账户" + u.getUserName() + "已经被后台管理员锁定！请联系客服！");
		} else if (UserConstant.USER_LOCK_LOGIN.equals(u.getIsLocked())) {// 用户登录错误次数过多锁定
			// long userLoginNowDayCount =
			// userLoginHisotryService.getLoginNowDayCount(u);
			long userLoginNowDayCount = userLoginHisotryService
					.getLoginNowDayCount(u);
			if (loginRule.getNext_day_auto_unlock_status() == 1) {// 是否开启第二天清除用户锁定
				// if(userLoginNowDayCount ==
				// 0){//判断当天是否有登录记录，没有的话说明是当天第一次登录那么为用户解锁
				int lastLoginDate = DateUtil.getTimeDay(u.getLoginTime());
				int lastLoginMonth = DateUtil.getTimeMonth(u.getLoginTime());
				int lastLoginYear = DateUtil.getTimeYear(u.getLoginTime());
				Date date = new Date();// 当前日期
				int currentDate = DateUtil.getTimeDay(date);
				int currentMonth = DateUtil.getTimeMonth(date);
				int currentYear = DateUtil.getTimeYear(date);
				if (currentYear >= lastLoginYear
						&& currentMonth >= lastLoginMonth
						&& currentDate > lastLoginDate) {// 判断当天是否有登录记录，没有的话说明是当天第一次登录那么为用户解锁
					u.setIsLocked(UserConstant.USER_LOCK_NO);
					u.setLoginCount(0);
					u.setLockRemark(null);
					u.setLockTime(null);
					userService.updateUser(u);
					data.put("result", false);
					data.put("code", "14");
					data.put("msg", "该账户" + u.getUserName() + "已经解锁！请重新登录！");
				} else {
					data.put("result", false);
					data.put("code", "12");
					data.put("msg", "该账户" + u.getUserName()
							+ "已经被锁定！请点击忘记密码激活用户,或明天再试！");
				}
			} else {// 为开启第二天清除用户锁定
				data.put("result", false);
				data.put("code", "15");
				data.put("msg", "该账户" + u.getUserName()
						+ "已经被锁定！请点击忘记密码激活用户,或联系客服！");
			}
		} else {// 未锁定
			User oldUser = (User) session.get(Constant.SESSION_USER);
			if (oldUser != null) {
				session.remove(Constant.SESSION_USER);
			}
			session.put(Constant.SESSION_USER, u);// 添加登录状态
			session.put(Constant.SESSION_USER_IDENTIFY, userIdentify);
			session.put("logintime", System.currentTimeMillis());

			u.setLoginCount(0);// 修改登录次数
			u.setLoginIp(getRequestIp());
			u.setLoginTime(new Date());
			UserLoginHisotry userLh = userLoginHisotryService
					.getLastTimeLogin(u.getUserId());

			/*
			 * if(userLh!=null){ String userlhdate =
			 * DateUtil.dateStr2(userLh.getLoginTime()) ; String today =
			 * DateUtil.dateStr2(new Date()) ; // 判断今天是否登录过
			 * if(!userlhdate.equals(today)){ // 添加用户登录 积分奖励
			 * if(spRuleCheck!=null){ Score score =
			 * scoreService.getScoreByUserId(u.getUserId()) ; int scoreCount =
			 * (int) spRuleCheck.signScore() ; // 添加积分 if(scoreCount!=-1){
			 * score.setTotalScore(score.getTotalScore()+scoreCount);
			 * score.setValidScore(score.getValidScore()+scoreCount);
			 * scoreService.update(score) ; // 添加积分日志记录 ScoreLog sl = new
			 * ScoreLog(score) ; sl.setUser(u); sl.setAddTime(new Date());
			 * sl.setScore(scoreCount); sl.setScoreTypeName("用户登录");
			 * sl.setScoreTypeNid(ScoreTypeConstant.SCORE_USER_LOGIN);
			 * sl.setType(ScoreTypeConstant.SCORE_USER_LOGIN);
			 * sl.setRemark("用户登录成功，获得"+scoreCount+"个积分。");
			 * scoreLogService.save(sl) ; } } } }
			 */
			userLoginHisotry = new UserLoginHisotry(u, model.getUserName(),
					new Date(), "P", getRequestIp(), "Y", null);
			userLoginHisotryService.save(userLoginHisotry);// 添加用户登录日志

			// 加入登录通知
			Global.setTransfer("user", u);
			Global.setTransfer("status", "成功");
			BaseMsg msg = new BaseMsg(NoticeConstant.LOGIN_SUC_FAIL);
			msg.doEvent();
			data.put("timeout", session.get("timeout"));
			data.put("redirectURL", session.get("redirectURL"));
			data.put("result", true);
			data.put("code", "01");
			data.put("msg", "登录成功！");
			data.put("userName", u.getUserName());
			data.put("userType", u.getUserCache().getUserType());// 返回用户类型（借款人，投资人，担保公司）
			data.put("imgurl", "/imgurl.html?userId=" + u.getUserId()
					+ "&size=middle");// 头部图片？
		}
	}

	/**
	 * 退出
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/user/logout")
	public String logout() throws Exception {
		// JSDP-123 gjh 2015-5-20 start
		User user = (User) session.get(Constant.SESSION_USER);
		String openId = null;
		session.put(Constant.SESSION_USER, null);
		session.put("logintime", null);
		//将qq协同登录session中信息移除   fengguoqin@ddtkj.com   JSDP-31 20150702 start
		if (session.get("CooperationLogin") != null) {
			session.remove("CooperationLogin");
		}
		if (session.get("nickname") != null) {
			session.remove("nickname");
		}
		if (session.get("figureUrl") != null) {
			session.remove("figureUrl");
		}
		//将qq协同登录session中信息移除   fengguoqin@ddtkj.com   JSDP-31 20150703 end
		// 获取用户中心参数规则
		UserCenterRuleCheck userCenterRule = (UserCenterRuleCheck) Global
				.getRuleCheck("userCenter");
		if (userCenterRule != null && userCenterRule.getStatus() == 1) {

			if (user != null) {
				openId = user.getOpenId();
			}
			// TODO 用户中心退出处理
			String url = userCenterRule.getUrl()
					+ userCenterRule.getLogoutUrl();

			String appId = userCenterRule.getAppId();
			String signKey = userCenterRule.getSignKey();
			// openId = "dwoe5c43675baf7554e";

			Map<String, Object> parameterMap = new HashMap<String, Object>();
			parameterMap.put("appId", appId);
			parameterMap.put("openId", openId);
			parameterMap.put("signKey", signKey);
			System.out.println(SignUtils.getUrl(url, parameterMap, signKey));
			HttpResult result = HttpUtils.sendGet(
					SignUtils.getUrl(url, parameterMap, signKey), null);// HttpClientUtils.doGet(SignUtils.getUrl(url,
																		// parameterMap,
																		// signKey));
			if (result != null) {
				String resultString = result.getContent();
				System.out.println("返回信息：" + resultString);
				Map<String, Object> inforesult = JSON.parseObject(resultString,
						new TypeReference<Map<String, Object>>() {
						});
				int errcode = (Integer) inforesult.get("errcode");
			}
			redirect("/");
			// redirect(SignUtils.getUrl(url, parameterMap, signKey));
		} else {
			redirect("/user/login.html");
		}
		// JSDP-123 gjh 2015-5-20 end
		return null;
	}

	/**
	 * 邮箱激活 重新发送激活邮件
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/user/sentActivationEmail")
	public String sentActivationEmail() throws Exception {
		if (model == null || model.getUserId() == 0) {
			throw new UserException("用户不存在，激活邮件发送失败！", 1);
		}
		model = userService.find(model.getUserId());

		Global.setTransfer("user", model);
		Global.setTransfer("activeUrl", "/user/doRegisterStep1.html?id="
				+ Mail.getInstance().getdecodeIdStr(model));

		BaseMsg msg = new BaseMsg(NoticeConstant.NOTICE_EMAIL_ACTIVE);
		msg.doEvent();

		printSuccess();
		return null;
	}

	/**
	 * @author 郭俊辉 找回密码页面
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/user/findpwd")
	public String getPwd() throws Exception {

		return "findpwd";
	}

	/**
	 * @author 郭俊辉 找回密码
	 * @throws Exception
	 */
	@Action("/user/dofindpwd")
	public void doFindPwd() throws Exception {
		String userName = paramString("userName");// 获取输入的登录名
		int step = paramInt("step");// 获取当前步数
		String retype = checkMobileOrEmail(userName);// 判断使用的是邮箱、手机
		User user = userService.getUserByInfo(userName);// 通过用户名获取用户
		data = new HashMap<String, Object>();

		Cookie[] cookies = request.getCookies();
		String jsessionid = null;
		if (cookies != null) {
			for (Cookie c : cookies) {
				if (c.getName().equalsIgnoreCase("JSESSIONID")) {
					jsessionid = c.getValue();
				}
			}
		}
		if ((cookies == null || cookies.length < 1) && jsessionid == null) {// 先判断cookie是否开启
			data.put("result", false);
			data.put("msg", "cookie未开启,请开启cookie");
			data.put("code", "00");
		} else {
			if (user != null) { // 判断用户是否为空
				BaseGetPwd getpwd = null;
				if ("mobile".equals(retype)) {
					getpwd = new GetPwdPhone();
					switch (step) {
					case 1:
						try {// 步骤一
							getpwd.getPwdStep1(request, user,
									paramString("validCode"));
							data.put("result", true);
							data.put("code", "010");
							data.put("msg", "成功");
							printJson(getStringOfJpaObj(data));
							return;
						} catch (UserException e) {
							String msg = e.getMessage();
							if ("111".equals(msg)) {
								data.put("result", false);
								data.put("code", "111");
								data.put("msg", "手机号不能为空");
								printJson(getStringOfJpaObj(data));
							} else if ("112".equals(msg)) {
								data.put("result", false);
								data.put("code", "112");
								data.put("msg", "手机号格式错误");
								printJson(getStringOfJpaObj(data));
							} else if ("102".equals(msg)) {
								data.put("result", false);
								data.put("code", "102");
								data.put("msg", "用户名不能为空");
								printJson(getStringOfJpaObj(data));
							} else if ("101".equals(msg)) {
								data.put("result", false);
								data.put("code", "101");
								data.put("msg", "用户名有误");
								printJson(getStringOfJpaObj(data));
							} else {
								throw new UserException(e.getMessage(), 1);
							}
							return;
						} catch (Exception e) {
							throw new UserException("操作异常，请联系管理员", 1);
						}
					case 2:
						try {// 步骤二
							User userAll = userService
									.getUserByMobilePhone(paramString("userName"));
							session.put("userName", paramString("userName"));
							String code = paramString("validCode");
							getpwd.getPwdStep2(userAll, code);
							request.setAttribute("userName",
									userAll.getUserName());
							request.setAttribute("mobilePhone",
									userAll.getMobilePhone());
							data.put("result", true);
							data.put("code", "020");
							data.put("msg", "成功");
							printJson(getStringOfJpaObj(data));

							return;
						} catch (Exception e) {
							throw new UserException(e.getMessage(), 1);
						}
					case 3:
						try {// 密码重置
							if(paramString("userName").equals(session.get("userName"))){
								user.setPassword(paramString("password"));
								getpwd.getPwdReset(session, user,
										paramString("confirmNewPwd"));
								data.put("result", true);
								data.put("code", "030");
								data.put("msg", "成功");
								printJson(getStringOfJpaObj(data));
								// 找回密码通知日志加入
								Global.setTransfer("user", user);
								BaseMsg msg = new BaseMsg(NoticeConstant.GET_PWD);
								msg.doEvent();
								
								return;
							}else{
								data.put("result", false);
								data.put("code", "031");
								data.put("msg", "手机号与之前提交的手机号不一致");
								printJson(getStringOfJpaObj(data));
								data = null;
								return;
							}
						} catch (Exception e) {
							throw new UserException(e.getMessage());
						}
					default:
						break;
					}
				} else if ("email".equals(retype)) {
					getpwd = new GetPwdEmail();
					switch (step) {
					case 1:
						try {// 步骤一
							getpwd.getPwdStep1(request, user,
									paramString("validCode"));
							data.put("result", true);
							data.put("code", "011");
							data.put("msg", "成功");
							printJson(getStringOfJpaObj(data));
							return;
						} catch (UserException e) {
							String msg = e.getMessage();
							if ("121".equals(msg)) {
								data.put("result", false);
								data.put("code", "121");
								data.put("msg", "邮箱不能为空");
								printJson(getStringOfJpaObj(data));
							} else if ("122".equals(msg)) {
								data.put("result", false);
								data.put("code", "122");
								data.put("msg", "邮箱格式错误");
								printJson(getStringOfJpaObj(data));
							} else if ("102".equals(msg)) {
								data.put("result", false);
								data.put("code", "102");
								data.put("msg", "用户名不能为空");
								printJson(getStringOfJpaObj(data));
							} else if ("101".equals(msg)) {
								data.put("result", false);
								data.put("code", "101");
								data.put("msg", "用户名有误");
								printJson(getStringOfJpaObj(data));
							} else {
								throw new UserException(e.getMessage(), 1);
							}
						} catch (Exception e) {
							throw new UserException("操作异常，请联系管理员", 1);
						}
						;
					case 2:
						try {// 步骤二
							User userAll = userService
									.getUserByEmail(paramString("userName"));
							session.put("userName", paramString("userName"));
							getpwd.getPwdStep2(userAll,
									paramString("validCode"));
							request.setAttribute("userName",
									userAll.getUserName());
							request.setAttribute("email", userAll.getEmail());
							data.put("result", true);
							data.put("code", "020");
							data.put("msg", "成功");
							printJson(getStringOfJpaObj(data));
							return;
						} catch (Exception e) {
							throw new UserException(e.getMessage(), 1);
						}
					case 3:
						try {// 密码重置
							if(paramString("userName").equals(session.get("userName"))){
								user.setPassword(paramString("password"));
								getpwd.getPwdReset(session, user,
										paramString("confirmNewPwd"));
								data.put("result", true);
								data.put("code", "030");
								data.put("msg", "成功");
								printJson(getStringOfJpaObj(data));
								// 找回密码通知日志加入
								Global.setTransfer("user", user);
								BaseMsg msg = new BaseMsg(NoticeConstant.GET_PWD);
								msg.doEvent();
								return;
							}else{
								data.put("result", false);
								data.put("code", "031");
								data.put("msg", "邮箱与之前提交的邮箱不一致");
								printJson(getStringOfJpaObj(data));
								data = null;
								return;
							}
						} catch (Exception e) {
							throw new UserException(e.getMessage());
						}
					default:
						break;
					}
				} else {
					data.put("result", false);
					data.put("code", "101");
					data.put("msg", "登录名有误");
				}
			} else { // 为空输出错误信息
				data.put("result", false);
				data.put("code", "100");
				data.put("msg", "用户不存在");
			}
		}
		printJson(getStringOfJpaObj(data));
		// JSDP-86 wcw 2015-05-05 start
		data = null;
		// JSDP-86 wcw 2015-05-05 end
	}

	/**
	 * @author 郭俊辉 获取通过手机找回密码的验证码
	 * 
	 * @throws Exception
	 */
	@Action("/user/getFindPwdByMobileCode")
	public void getFindPwdByMobileCode() throws Exception {
		String mobile = paramString("mobile");
		User user = userService.getUserByMobilePhone(mobile);
		data = new HashMap<String, Object>();
		//JSDP-223 gjh 2015-7-15 start
		UserModel userModel = new UserModel();
		userModel.setValidCode(paramString("validCode"));
		try {
			userModel.validRegRule();
		} catch (Exception e) {
			e.printStackTrace();
			data.put("result", false);
			data.put("code", "011");
			data.put("msg", e.getMessage());
			printJson(getStringOfJpaObj(data));
			data = null;
			return;
		}
		//JSDP-223 gjh 2015-7-15 start
		if (user != null) {
			userService.getPwdByPhoneStep1(request, user.getUserName(), mobile);
			data.put("result", true);
			data.put("msg", "发送成功");
			data.put("code", "01");
		} else {
			data.put("result", false);
			data.put("msg", "用户不存在");
			data.put("code", "02");
		}
		printJson(getStringOfJpaObj(data));
		// JSDP-86 wcw 2015-05-05 start
		data = null;
		// JSDP-86 wcw 2015-05-05 end
	}

	/**
	 * @author 郭俊辉 获取通过邮箱找回密码的验证码
	 * 
	 * @throws Exception
	 */
	@Action("/user/getFindPwdByEmailCode")
	public void getFindPwdByEmailCode() throws Exception {
		String email = paramString("email");
		User user = userService.getUserByEmail(email);
		data = new HashMap<String, Object>();
		//JSDP-223 gjh 2015-7-15 start
		UserModel userModel = new UserModel();
		userModel.setValidCode(paramString("validCode"));
		try {
			userModel.validRegRule();
		} catch (Exception e) {
			e.printStackTrace();
			data.put("result", false);
			data.put("code", "011");
			data.put("msg", e.getMessage());
			printJson(getStringOfJpaObj(data));
			data = null;
			return;
		}
		//JSDP-223 gjh 2015-7-15 start
		if (user != null) {
			userService.getPwdByEmailStep1(request, user.getUserName(), email);
			data.put("result", true);
			data.put("msg", "发送成功");
			data.put("code", "01");
		} else {
			data.put("result", false);
			data.put("msg", "用户不存在");
			data.put("code", "02");
		}
		printJson(getStringOfJpaObj(data));
		// JSDP-86 wcw 2015-05-05 start
		data = null;
		// JSDP-86 wcw 2015-05-05 end
	}

	/**
	 * @author guojunhui@ddtkj.com 获取红包产生规则
	 * @throws Exception
	 */
	@Action("/user/getRedPacketProduceRule")
	public void getRedPacketProduceRule() throws Exception {
		// 各种认证过了送红包
		RedPacketProduceRuleCheck rpRuleCheck = (RedPacketProduceRuleCheck) Global
				.getRuleCheck("redPacketProduce");

		Map<String, Object> registerdata = rpRuleCheck.registerRP();
		// Map<String, Object> InviteUserdata = rpRuleCheck.recommendRP() ;
		printJson(getStringOfJpaObj(registerdata));
		// JSDP-86 wcw 2015-05-05 start
		// InviteUserdata=null;
		registerdata = null;
		// JSDP-86 wcw 2015-05-05 end
	}

	@Action("/testException")
	public void testException() throws Exception {
		Object obj = null;
		if(obj.equals(null)){
			System.out.println(obj);
		}
		/*
		 * UserCenterRuleCheck userCenterRule= (UserCenterRuleCheck)
		 * Global.getRuleCheck("userCenter"); if(userCenterRule!=null &&
		 * userCenterRule.getStatus() == 1){//判断规则是否存在和开启 String accessToken;
		 * try { accessToken = getAccessToken(); String url =
		 * userCenterRule.getUrl() + userCenterRule.getRegisterUrl();
		 * 
		 * Map<String, Object> parameterMap = new HashMap<String, Object>();
		 * parameterMap.put("accessToken", accessToken);
		 * parameterMap.put("userName", "test002"); parameterMap.put("nickName",
		 * "test002"); parameterMap.put("email", "512718609@qq.com");
		 * parameterMap.put("mobile", "13643464310");
		 * parameterMap.put("password", "asd123456");//TODO 需确定默认密码格式
		 * 
		 * HttpResult httpResult = HttpUtils.sendGet(url, parameterMap); String
		 * resultString = httpResult.getContent(); System.out.println("返回信息：" +
		 * resultString); } catch (Exception e) { throw new
		 * UserException("获取参数失败，请联系管理员",1); } }
		 */
	}

	/**
	 * @author fengguoqin@ddtkj.com 注册转化数-统计
	 * @throws Exception
	 */
	@Action("/user/registertoOnly")
	public String registertoOnly() throws Exception {
		return "registertoOnly";
	}

	/**
	 * 邀请好友 发送短信
	 * 
	 * @author fengguoqin@ddtkj.com
	 */
	@Action("/member/inviteGift/sendMobileMsg")
	public void sendMobileMsg() throws Exception {
		User user = getSessionUser();
		// BUG JSDP-107
		// JSDP-10 2015年5月4日 孙晓勇 start 对用户为null做处理
		if (null != user) {

			model = UserModel.instance(user);
			UserModel userModel = UserModel.instance(model);
			data = new HashMap<String, Object>();
			String invitemobile = paramString("mobile");
			String yanzm = paramString("yanzm");
			userModel.setValidCode(yanzm);
			try {
				// 验证码验证
				userModel.validRegRule();
				BaseAccountLog blog = new GetCodeLog(user, user.getUserName(),
						null, invitemobile, NoticeConstant.INVITE_FRIENDS);
				blog.initCode("invite_friends");
				blog.doEvent();
				data.put("result", true);
				printJson(getStringOfJpaObj(data));
			} catch (Exception e) {
				data.put("result", false);
				data.put("msg", e.getMessage());
				printJson(getStringOfJpaObj(data));
			}

		} else {

			data.put("result", false);
			data.put("msg", "用户未登录");
			printJson(getStringOfJpaObj(data));

		}
		// JSDP-10 2015年5月4日 孙晓勇 end
		// BUG JSDP-107

		// JSDP-86 wcw 2015-05-05 start
		data = null;
		// JSDP-86 wcw 2015-05-05 end

	}

	// JSDP-123 gjh 2015-5-19 start

	/**
	 * 通过账号中心登录页面
	 * 
	 * @throws Exception
	 */
	@Action("/user/loginPage")
	public void userCenterLoginPage() throws Exception {
		UserCenterRuleCheck userCenterRule = (UserCenterRuleCheck) Global
				.getRuleCheck("userCenter");
		if (userCenterRule != null) {
			String url = userCenterRule.getUrl() + userCenterRule.getLoginUrl();

			String appId = userCenterRule.getAppId();
			String signKey = userCenterRule.getSignKey();
			String state = Encodes.nonceString(16);

			Map<String, Object> parameterMap = new HashMap<String, Object>();
			parameterMap.put("appId", appId);
			parameterMap.put("state", state);

			String loginUrl = SignUtils.getUrl(url, parameterMap, signKey);
			redirect(loginUrl);
			return;
		} else {
			throw new UserException("系统异常请联系管理员", "/");
		}
	}

	/**
	 * 通过账号中心登录 JSDP-123 gjh 2015-5-19
	 * 
	 * @throws Exception
	 */
	@Action("/user/loginByUserCenter")
	public void userCenterDoLogin() throws Exception {
		String openId = paramString("openId");
		String state = paramString("state");
		String sign = paramString("sign");
		// String appId = paramString("openId");

		// 获取用户中心参数规则
		UserCenterRuleCheck userCenterRule = (UserCenterRuleCheck) Global
				.getRuleCheck("userCenter");
		if (userCenterRule != null) {// 判断用户中心参数规则是否为空
			if (userCenterRule.getStatus() == 1) {

				// 进行密钥比较
				String signKey = userCenterRule.getSignKey();
				Map<String, Object> parameter = new HashMap<String, Object>();
				// parameter.put("appId", appId);
				parameter.put("openId", openId);
				parameter.put("state", state);
				parameter = SignUtils.signMap(parameter, signKey);
				if (parameter.get("sign").equals(sign)) {// 如果密钥匹配成功
					String appSecret = userCenterRule.getAppSecret();
					String accessToken = getAccessToken();
					if (accessToken != null) {
						// 根据openId查询是否存在用户
						List<User> userListByOpenId = userService
								.findByProperty("openId", openId);
						if (userListByOpenId.size() > 0) {// 已绑定openId 直接登录
							User u = userListByOpenId.get(0);
							// 获取用户中心用户信息（更新本地用户信息）
							String getInfoUrl = userCenterRule.getUrl()
									+ userCenterRule.getUserInfo();

							Map<String, Object> parameterMap = new HashMap<String, Object>();
							parameterMap.put("accessToken", accessToken);
							parameterMap.put("openId", openId);

							HttpResult httpResult = HttpUtils.sendGet(
									getInfoUrl, parameterMap);
							if (httpResult == null) {
								throw new UserException("",
										"user/loginPage.html");
							} else {
								String resultString = httpResult.getContent();
								System.out.println("返回信息：" + resultString);

								Map<String, Object> result = JSON
										.parseObject(
												resultString,
												new TypeReference<Map<String, Object>>() {
												});
								Integer errcode = (Integer) result
										.get("errcode");
								if (errcode == 0) {
									String memberInfo = (String) result
											.get("data");
									System.out.println("获取密文消息：" + memberInfo);

									memberInfo = AES.decrypt(
											Base64.decodeBase64(memberInfo),
											appSecret);
									System.out.println("获取解密消息：" + memberInfo);
									Map<String, Object> memberInfoMap = JSON
											.parseObject(
													memberInfo,
													new TypeReference<Map<String, Object>>() {
													});
									u.setMobilePhone(memberInfoMap
											.get("mobile").toString());// 更新用户手机号码
									if (memberInfoMap.get("email") != null) {
										u.setEmail(memberInfoMap.get("email")
												.toString());
									}
									userService.updateUser(u);
									session.put(Constant.SESSION_USER, u);// 添加登录状态
									UserIdentify userIdentify = userIdentifyService
											.findByUserId(u.getUserId());
									session.put(Constant.SESSION_USER_IDENTIFY,
											userIdentify);
									session.put("logintime",
											System.currentTimeMillis());
									redirect("/member/main.html");
									return;
								} else {
									throw new UserException(
											"用户中心授权登录超时或失败，请重试",
											"/user/loginPage.html");
								}

							}
						} else {// 未绑定openId 进行绑定或注册
								// 获取晋商贷用户id，用于判断用户是否已注册
							String checkJsdUserUrl = userCenterRule.getUrl()
									+ userCenterRule.getJsdUser();
							Map<String, Object> parameterMap = new HashMap<String, Object>();
							parameterMap.put("accessToken", accessToken);
							parameterMap.put("openId", openId);
							HttpResult httpResult = HttpUtils.sendGet(
									checkJsdUserUrl, parameterMap);
							if (httpResult == null) {
								throw new UserException("请求超时，请重新操作",
										"user/loginPage.html");
							} else {// 获取userid
								String resultString = httpResult.getContent();
								System.out.println("返回信息：" + resultString);

								Map<String, Object> result = JSON
										.parseObject(
												resultString,
												new TypeReference<Map<String, Object>>() {
												});
								Integer errcode = (Integer) result
										.get("errcode");
								if (errcode == 0) {// 返回正常
									String JsdData = (String) result
											.get("data");
									System.out.println("获取密文消息：" + JsdData);
									JsdData = AES.decrypt(
											Base64.decodeBase64(JsdData),
											appSecret);
									Map<String, Object> JsdDataMap = JSON
											.parseObject(
													JsdData,
													new TypeReference<Map<String, Object>>() {
													});
									if (JsdDataMap.get("uid") != null) {// 如果用户存在
										long userId = Long.parseLong(JsdDataMap
												.get("uid").toString());
										User u = userService.find(userId);
										if (u != null) {
											u.setOpenId(openId);
											// 获取用户中心用户信息（更新本地用户信息）
											String getInfoUrl = userCenterRule
													.getUrl()
													+ userCenterRule
															.getUserInfo();

											HttpResult infoResult = HttpUtils
													.sendGet(getInfoUrl,
															parameterMap);
											if (infoResult == null) {
												throw new UserException(
														"请求超时，请重新操作",
														"/user/loginPage.html");
											} else {
												String inforesultString = httpResult
														.getContent();
												System.out.println("返回信息："
														+ inforesultString);

												Map<String, Object> inforesult = JSON
														.parseObject(
																inforesultString,
																new TypeReference<Map<String, Object>>() {
																});
												errcode = (Integer) inforesult
														.get("errcode");
												if (errcode == 0) {
													String memberInfo = (String) inforesult
															.get("data");
													System.out
															.println("获取密文消息："
																	+ memberInfo);

													memberInfo = AES
															.decrypt(
																	Base64.decodeBase64(memberInfo),
																	appSecret);
													System.out
															.println("获取解密消息："
																	+ memberInfo);
													Map<String, Object> memberInfoMap = JSON
															.parseObject(
																	memberInfo,
																	new TypeReference<Map<String, Object>>() {
																	});
													u.setMobilePhone(memberInfoMap
															.get("mobile")
															.toString());// 更新用户手机号码
													if (memberInfoMap
															.get("email") != null) {
														u.setMobilePhone(memberInfoMap
																.get("email")
																.toString());
													}
													userService.updateUser(u);
													session.put(
															Constant.SESSION_USER,
															u);// 添加登录状态
													UserIdentify userIdentify = userIdentifyService
															.findByUserId(u
																	.getUserId());
													session.put(
															Constant.SESSION_USER_IDENTIFY,
															userIdentify);
													session.put(
															"logintime",
															System.currentTimeMillis());
													redirect("/member/main.html");
													return;
												} else {
													throw new UserException(
															"请求超时，请重新操作",
															"/user/loginPage.html");
												}
											}
										} else {
											// TODO 取到uid但是找不到
										}
									} else {// 取不到用户id 注册新用户
										User u = new User();
										// 获取用户中心用户信息（更新本地用户信息）
										String getInfoUrl = userCenterRule
												.getUrl()
												+ userCenterRule.getUserInfo();

										HttpResult infoResult = HttpUtils
												.sendGet(getInfoUrl,
														parameterMap);
										if (infoResult == null) {
											throw new UserException(
													"请求超时，请重新操作",
													"/user/login.html");
										} else {
											String inforesultString = infoResult
													.getContent();
											System.out.println("返回信息："
													+ inforesultString);

											Map<String, Object> inforesult = JSON
													.parseObject(
															inforesultString,
															new TypeReference<Map<String, Object>>() {
															});
											errcode = (Integer) inforesult
													.get("errcode");
											if (errcode == 0) {
												String memberInfo = (String) inforesult
														.get("data");
												System.out.println("获取密文消息："
														+ memberInfo);

												memberInfo = AES
														.decrypt(
																Base64.decodeBase64(memberInfo),
																appSecret);
												System.out.println("获取解密消息："
														+ memberInfo);
												Map<String, Object> memberInfoMap = JSON
														.parseObject(
																memberInfo,
																new TypeReference<Map<String, Object>>() {
																});
												u.setMobilePhone(memberInfoMap
														.get("mobile")
														.toString());// 更新用户手机号码
												u.setUserName(memberInfoMap
														.get("userName")
														.toString());
												u.setPassword(memberInfoMap
														.get("mobile")
														.toString());// 默认本地保存密码为用户手机号便于切换使用
												u.setOpenId(openId);
												u.setAddIp(Global.getIP());
												u.setRegisterWay("P");
												userService.doRegisterNew(u,
														null);// 注册操作
												session.put(
														Constant.SESSION_USER,
														u);// 添加登录状态
												UserIdentify userIdentify = userIdentifyService
														.findByUserId(u
																.getUserId());
												session.put(
														Constant.SESSION_USER_IDENTIFY,
														userIdentify);
												session.put("logintime", System
														.currentTimeMillis());
												redirect("/member/main.html");
												return;
											} else {
												throw new UserException(
														"请求超时，请重新操作",
														"/user/login.html");
											}
										}
									}
								} else {
									throw new UserException("请求超时，请重新操作",
											"/user/login.html");
								}
							}
						}
					} else {// 获取令牌失败
						throw new UserException("请求超时，请重新操作",
								"/user/login.html");
					}
				} else {// 密钥匹配不成功
					throw new UserException("您输入非法参数，请从新登陆", "/user/login.html");
				}
			} else {// 用户中心状态为未开启
				throw new UserException("用户中心未开启", "/user/login.html");
			}
		} else {
			throw new UserException("系统异常请联系管理员", "/");
		}
	}

	/**
	 * 获取安全令牌
	 * 
	 * @return
	 * @throws Exception
	 */
	public String getAccessToken() throws Exception {
		// 获取用户中心参数规则
		UserCenterRuleCheck userCenterRule = (UserCenterRuleCheck) Global
				.getRuleCheck("userCenter");
		if (userCenterRule != null) {
			String appId = userCenterRule.getAppId();
			String appSecret = userCenterRule.getAppSecret();
			appSecret = AES.encryptToBase64(appSecret, appSecret);

			String url = userCenterRule.getUrl()
					+ userCenterRule.getAccessToken();

			Map<String, Object> parameterMap = new HashMap<String, Object>();
			parameterMap.put("appId", appId);
			parameterMap.put("appSecret", appSecret);

			HttpResult httpResult = HttpUtils.sendGet(url, parameterMap);
			String resultString = httpResult.getContent();

			Map<String, Object> result = JSON.parseObject(resultString,
					new TypeReference<Map<String, Object>>() {
					});
			Integer errcode = (Integer) result.get("errcode");
			if (errcode == 0) {
				System.out.println("AccessToken：" + result.get("access_token"));
				System.out.println("ExpiresIn：" + result.get("expires_in"));
				return (String) result.get("access_token");
			} else {
				System.out.println("获取失败：" + result.get("message"));
				return null;
			}
		} else {
			return null;
		}
	}

	// JSDP-123 gjh 2015-5-19 end

	public RegisterRuleCheck getRegisterRuleCheck() {
		return registerRuleCheck;
	}

	public void setRegisterRuleCheck(RegisterRuleCheck registerRuleCheck) {
		this.registerRuleCheck = registerRuleCheck;
	}

	public LoginRuleCheck getLoginRuleCheck() {
		return loginRuleCheck;
	}

	public void setLoginRuleCheck(LoginRuleCheck loginRuleCheck) {
		this.loginRuleCheck = loginRuleCheck;
	}

	public SafetyRuleCheck getSafetyRuleCheck() {
		return safetyRuleCheck;
	}

	public void setSafetyRuleCheck(SafetyRuleCheck safetyRuleCheck) {
		this.safetyRuleCheck = safetyRuleCheck;
	}

	public User getUser() {
		return model;
	}

	public void setUser(User user) {
		this.model = user;
	}
}
