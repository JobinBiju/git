package com.ddtkj.mobile.cn.jpush.newapi;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.SocketTimeoutException;
import java.net.URL;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;





import com.ddtkj.mobile.MobileException;
import com.ddtkj.mobile.cn.jpush.api.SimpleHostnameVerifier;
import com.ddtkj.mobile.cn.jpush.api.SimpleTrustManager;

public class HttpPostClient {

	private static final Logger LOG = LoggerFactory
			.getLogger(HttpPostClient.class);

	// 设置连接超时时间
	public static final int DEFAULT_CONNECTION_TIMEOUT = (5 * 1000); // milliseconds

	// 设置读取超时时间
	public static final int DEFAULT_READ_TIMEOUT = (30 * 1000); // milliseconds

	public static final int DEFAULT_MAX_RETRY_TIMES = 3;

	public static final String CHARSET = "UTF-8";
	public static final String CONTENT_TYPE_JSON = "application/json";
	public static final String CONTENT_TYPE_FORM = "application/x-www-form-urlencoded";

	public static final String RATE_LIMIT_QUOTA = "X-Rate-Limit-Limit";
	public static final String RATE_LIMIT_Remaining = "X-Rate-Limit-Remaining";
	public static final String RATE_LIMIT_Reset = "X-Rate-Limit-Reset";
	public static final String JPUSH_USER_AGENT = "JPush-API-Java-Client";
	private static final String KEYWORDS_CONNECT_TIMED_OUT = "connect timed out";
	private static final String KEYWORDS_READ_TIMED_OUT = "Read timed out";
	public static final String IO_ERROR_MESSAGE = "Connection IO error. \n"
			+ "Can not connect to JPush Server. "
			+ "Please ensure your internet connection is ok. \n"
			+ "If the problem persists, please let us know at support@jpush.cn.";

	public static final String CONNECT_TIMED_OUT_MESSAGE = "connect timed out. \n"
			+ "Connect to JPush Server timed out, and already retried some times. \n"
			+ "Please ensure your internet connection is ok. \n"
			+ "If the problem persists, please let us know at support@jpush.cn.";

	public static final String READ_TIMED_OUT_MESSAGE = "Read timed out. \n"
			+ "Read response from JPush Server timed out. \n"
			+ "If this is a Push action, you may not want to retry. \n"
			+ "It may be due to slowly response from JPush server, or unstable connection. \n"
			+ "If the problem persists, please let us know at support@jpush.cn.";
	public static final int RESPONSE_OK = 200;

	

	protected String sendPost(final String url,
			RequestWarper requestWarper) {
        initSSL();
		HttpURLConnection conn = null;
		OutputStream out = null;
		StringBuffer sb = new StringBuffer();
		String responseContent = "";

		try {
			URL aUrl = new URL(url);
			conn = (HttpURLConnection) aUrl.openConnection();
			conn.setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT);
			conn.setReadTimeout(DEFAULT_READ_TIMEOUT);
			conn.setUseCaches(false);
			conn.setRequestMethod(requestWarper.getMethod());
			conn.setRequestProperty("User-Agent", JPUSH_USER_AGENT);
			conn.setRequestProperty("Connection", "Keep-Alive");
			conn.setRequestProperty("Accept-Charset", CHARSET);
			conn.setRequestProperty("Charset", CHARSET);
			conn.setRequestProperty("Authorization",
					requestWarper.getAuthCode());

			if ("POST".equals(requestWarper.getMethod())) {
				conn.setDoOutput(true); // POST Request
				conn.setRequestProperty("Content-Type", CONTENT_TYPE_JSON);
				byte[] data = requestWarper.getContent().getBytes(CHARSET);
				conn.setRequestProperty("Content-Length",
						String.valueOf(data.length));
				out = conn.getOutputStream();
				out.write(data);
				out.flush();
			} else {
				conn.setDoOutput(false);
			}

			int status = conn.getResponseCode();
			InputStream in = null;
			if (status == 200) {
				in = conn.getInputStream();
			} else {
				in = conn.getErrorStream();
			}
			InputStreamReader reader = new InputStreamReader(in, CHARSET);
			char[] buff = new char[1024];
			int len;
			while ((len = reader.read(buff)) > 0) {
				sb.append(buff, 0, len);
			}

			responseContent = sb.toString();

			String quota = conn.getHeaderField(RATE_LIMIT_QUOTA);
			String remaining = conn.getHeaderField(RATE_LIMIT_Remaining);
			String reset = conn.getHeaderField(RATE_LIMIT_Reset);

			if (status == 200) {
				LOG.debug("Succeed to get response - 200 OK");
				LOG.debug("Response Content - " + responseContent);

			} else if (status > 200 && status < 400) {
				LOG.warn("Normal response but unexpected - responseCode:"
						+ status + ", responseContent:" + responseContent);

			} else {
				LOG.warn("Got error response - responseCode:" + status
						+ ", responseContent:" + responseContent);

				switch (status) {
				case 400:
					LOG.error("Your request params is invalid. Please check them according to error message.");
					break;
				case 401:
					LOG.error("Authentication failed! Please check authentication params according to docs.");
					break;
				case 403:
					LOG.error("Request is forbidden! Maybe your appkey is listed in blacklist?");
					break;
				case 410:
					LOG.error("Request resource is no longer in service. Please according to notice on official website.");
				case 429:
					LOG.error("Too many requests! Please review your appkey's request quota.");
					break;
				case 500:
				case 502:
				case 503:
				case 504:
					LOG.error("Seems encountered server error. Maybe JPush is in maintenance? Please retry later.");
					break;
				default:
					LOG.error("Unexpected response.");
				}

			}

		} catch (SocketTimeoutException e) {
			if (e.getMessage().contains(KEYWORDS_CONNECT_TIMED_OUT)) {
				throw new MobileException(KEYWORDS_CONNECT_TIMED_OUT);
			} else if (e.getMessage().contains(KEYWORDS_READ_TIMED_OUT)) {
				throw new MobileException(KEYWORDS_READ_TIMED_OUT);
			}
			LOG.debug(IO_ERROR_MESSAGE, e);

		} catch (IOException e) {
			LOG.debug(IO_ERROR_MESSAGE, e);

		} finally {
			if (null != out) {
				try {
					out.close();
				} catch (IOException e) {
					LOG.error("Failed to close stream.", e);
	
				}
			}
			if (null != conn) {
				conn.disconnect();
			}
		}
		return responseContent;
	}

	protected void initSSL() {
		try {
			TrustManager[] tmCerts = new javax.net.ssl.TrustManager[1];
			tmCerts[0] = new SimpleTrustManager();
			javax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext
					.getInstance("SSL");
			sc.init(null, tmCerts, null);
			javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc
					.getSocketFactory());
			HostnameVerifier hv = new SimpleHostnameVerifier();
			HttpsURLConnection.setDefaultHostnameVerifier(hv);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}



}
