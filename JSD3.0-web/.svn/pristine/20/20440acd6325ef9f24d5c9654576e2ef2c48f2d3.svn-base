package com.rongdu.p2psys.web.user;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Result;

import com.ddtkj.p2psys.user.constant.UserConstant;
import com.ddtkj.p2psys.user.domain.User;
import com.opensymphony.xwork2.ModelDriven;
import com.rongdu.common.model.jpa.PageDataList;
import com.rongdu.common.util.Page;
import com.rongdu.common.util.StringUtil;
import com.rongdu.p2psys.core.domain.Message;
import com.rongdu.p2psys.core.domain.NoticeType;
import com.rongdu.p2psys.core.model.MessageModel;
import com.rongdu.p2psys.core.service.MessageService;
import com.rongdu.p2psys.core.service.NoticeTypeService;
import com.rongdu.p2psys.core.util.ValidateUtil;
import com.rongdu.p2psys.core.web.BaseAction;
import com.rongdu.p2psys.user.domain.UserNoticeConfig;
import com.rongdu.p2psys.user.service.UserNoticeConfigService;
import com.rongdu.p2psys.user.service.UserService;

/**
 * 站内信
 * 
 * @author xx
 * @version 2.0
 * @since 2014年3月28日
 */
public class MessageAction extends BaseAction implements ModelDriven<MessageModel> {

	private MessageModel model = new MessageModel();

	private List<UserNoticeConfig> userNoticeConfigs;
	@Override
	public MessageModel getModel() {
		return model;
	}

	@Resource
	private MessageService messageService;
	@Resource
	private UserService userService;
	@Resource
	private NoticeTypeService noticeTypeService;
	@Resource
	private UserNoticeConfigService userNoticeConfigService;

	private User user;
	private Map<String, Object> data;

	/**
	 * 站内信箱页面
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action(value="/member/message/detail",results = { @Result(name = "log", type = "ftl", location = "/member/message/detail.html"),
			@Result(name = "detail_firm", type = "ftl", location = "/member_borrow/message/detail.html"),
			@Result(name = "detail_assure", type = "ftl", location = "/member_guarantee/message/detail.html")
			})
	public String detail() throws Exception {
		user = getSessionUser();
		if (UserConstant.USER_SORT_BORROW.equals(user.getUserCache().getUserType())) {
			//借款人
			return "detail_firm";
		}else if(UserConstant.USER_SORT_ASSURE.equals(user.getUserCache().getUserType())){
			//担保公司
			return "detail_assure";
		}
		return "detail";
	}
	
	@Action("/member/message/msgConfig")
	public String msgConfig() throws Exception {
		
		//noticeTypeService.list(page, rows, noticeType);
		return "msgConfig";
	}
	//JSDP-209 gjh 2015-7-4 start
	/**
	 * 获取用户通知配置
	 * @throws Exception
	 */
	@Action("/member/message/userNoticeTypeList")
	public void userNoticeTypeList() throws Exception {
		int page = paramInt("page");
		int rows = Page.ROWS;
		if(page == 0){
			page = 1;
		}
		data = new HashMap<String, Object>();
		NoticeType noticeType = (NoticeType) paramModel(NoticeType.class);
		user = getSessionUser();
		if(user != null){
			if(user.getUserCache().getUserType() == UserConstant.USER_SORT_INVESTOR){
				noticeType.setUserType(1);
			}else if(user.getUserCache().getUserType() == UserConstant.USER_SORT_BORROW){
				noticeType.setUserType(2);
			}
			if(StringUtil.isBlank(user.getEmail())){
				data.put("isEmail", 0);
			}else{
				data.put("isEmail", 1);
			}
		}
		PageDataList<Map<String,Object>> pageDataList = noticeTypeService.getNoticeTypeList(page, rows, noticeType);
		List<UserNoticeConfig> userNoticeConfigs = userNoticeConfigService.getAllUNConfigs(getSessionUserId());
		if(userNoticeConfigs.size() > 0){
			data.put("isConfig", 1);
			for(UserNoticeConfig userNoticeConfig:userNoticeConfigs){
				for(Map<String,Object> noticeTypeMap : pageDataList.getList()){
					if(userNoticeConfig.getNid().equals(noticeTypeMap.get("nid"))){
						if(Integer.parseInt(noticeTypeMap.get("sms").toString()) != 2){
							noticeTypeMap.put("sms", userNoticeConfig.getSms());
						}
						if(Integer.parseInt(noticeTypeMap.get("email").toString()) != 2){
							noticeTypeMap.put("email", userNoticeConfig.getEmail());
						}
						if(Integer.parseInt(noticeTypeMap.get("msg").toString()) != 2){
							noticeTypeMap.put("msg", userNoticeConfig.getMessage());
						}
						noticeTypeMap.put("user", userNoticeConfig.getUser());
						noticeTypeMap.put("id", userNoticeConfig.getId());
						noticeTypeMap.put("isConfig", 1);
					}
				}
			}
		}else{
			data.put("isConfig", 0);
		}
		data.put("data", pageDataList);
		printJson(getStringOfJpaObj(data));
		data = null;
		return;
	}
	/**
	 * 用户通知配置
	 * @throws Exception
	 */
	@Action("/member/message/userNoticeConfig")
	public void userNoticeConfigList() throws Exception {
		data = new HashMap<String, Object>();
		for(UserNoticeConfig userConfig:userNoticeConfigs){
			if(userConfig.getUser() == null && getSessionUser() != null){
				userConfig.setUser(getSessionUser());
			}
		}
		userNoticeConfigService.updateUNConfigs(userNoticeConfigs, getSessionUserId());
		data.put("result", true);
		data.put("msg", "设置成功");
		printJson(getStringOfJpaObj(data));
		data = null;
		return;
	}
	//JSDP-209 gjh 2015-7-4 end
	/**
	 * 读取收件箱
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/member/message/box")
	public void box() throws Exception {
		user = getSessionUser();
		PageDataList<MessageModel> pageDataList = messageService.receiveList(user.getUserId(), model.getPage());
		data = new HashMap<String, Object>();
		data.put("data", pageDataList);
		printJson(getStringOfJpaObj(data));
		//JSDP-86 wcw 2015-05-05 start
		data=null;
		//JSDP-86 wcw 2015-05-05 end
	}

	/**
	 * 已发送邮件页面
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/member/message/sent")
	public String sent() throws Exception {
		return "sent";
	}

	/**
	 * 已发送邮件
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/member/message/sentList")
	public void sentList() throws Exception {
		user = getSessionUser();
		long userId = user.getUserId();
		PageDataList<MessageModel> pageDataList = messageService.sentList(userId, model.getPage());
		data = new HashMap<String, Object>();
		data.put("data", pageDataList);
		printJson(getStringOfJpaObj(data));
		//JSDP-86 wcw 2015-05-05 start
		data=null;
		//JSDP-86 wcw 2015-05-05 end
	}

	/**
	 * 发消息
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/member/message/send")
	public String send() throws Exception {
		user = getSessionUser();
		List<UserNoticeConfig> list = messageService.getAllUNConfigs(user.getUserId());
		request.setAttribute("user", user);
		request.setAttribute("unConfigList", list);
		return "send";
	}

	/**
	 * 发送消息
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/member/message/doSend")
	public void doSend() throws Exception {
		user = getSessionUser();
		
		// BUG JSDP-107
		// JSDP-10 2015年5月4日    孙晓勇   start  对用户为null做处理
		if (null != user) {

			User receiveUser = userService.getUserByUserName(model.getReceiveUserName());
			model.validSendMessage(receiveUser);
			Message m = model.prototype(user, receiveUser);
			messageService.add(m);
			printSuccess();
			
		} else {
			
			data.put("result", false);
			data.put("msg", "用户未登录");
			printJson(getStringOfJpaObj(data));
			   
		}
		//JSDP-86 wcw 2015-05-05 start
		data=null;
		//JSDP-86 wcw 2015-05-05 end
		// JSDP-10 2015年5月4日    孙晓勇   end
		// BUG JSDP-107
		
	}

	/**
	 * 判断发送消息验证码是否正确
	 * 
	 * @throws Exception
	 */
	@Action("/member/message/checkValidCode")
	public void checkValidCode() throws Exception {
		data = new HashMap<String, Object>();
		data.put("result", ValidateUtil.checkValidCode(model.getValidCode()));
		printJson(getStringOfJpaObj(data));
		//JSDP-86 wcw 2015-05-05 start
		data=null;
		//JSDP-86 wcw 2015-05-05 end
	}

	/**
	 * 判断用户名是否已存在
	 * 
	 * @throws Exception
	 */
	@Action("/member/message/checkUsername")
	public void checkUsername() throws Exception {
		data = new HashMap<String, Object>();
		int count = userService.countByUserName(model.getReceiveUserName());
		data.put("result", count > 0 ? true : false);
		printJson(getStringOfJpaObj(data));
		//JSDP-86 wcw 2015-05-05 start
		data=null;
		//JSDP-86 wcw 2015-05-05 end
	}

	/**
	 * 信息回复
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/member/message/reply")
	public void reply() throws Exception {
		user = getSessionUser();
		// BUG JSDP-107
		// JSDP-10 2015年5月4日    孙晓勇   start  对用户为null做处理
		if (null != user) {
			
			long userId = user.getUserId();
			long id = paramLong("id");
			MessageModel msg = messageService.find(id, userId);
			Message m = model.prototype(msg, paramString("content"));
			m.setSentUser(msg.getReceiveUser());
			m.setReceiveUser(msg.getSentUser());
			m.setId(0);
			messageService.reply(m);
			redirect("/member/message/sent.html");
			
		} else {
			
			data.put("result", false);
			data.put("msg", "用户未登录");
			printJson(getStringOfJpaObj(data));
			   
		}
		//JSDP-86 wcw 2015-05-05 start
		data=null;
		//JSDP-86 wcw 2015-05-05 end
		// JSDP-10 2015年5月4日    孙晓勇   end
		// BUG JSDP-107
		
	}

	/**
	 * 删除信息，已标记已读，已标记未读
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/member/message/set")
	public void set() throws Exception {
		user = getSessionUser();
		// BUG JSDP-107
		// JSDP-10 2015年5月4日    孙晓勇   start  对用户为null做处理
		if (null != user) {
						
			long userId = user.getUserId();
			String[] ids = request.getParameterValues("id");
			messageService.set(paramInt("type"), ids, userId);
			printSuccess();
			
		} else {
			
			data.put("result", false);
			data.put("msg", "用户未登录");
			printJson(getStringOfJpaObj(data));
			   
		}
		//JSDP-86 wcw 2015-05-05 start
		data=null;
		//JSDP-86 wcw 2015-05-05 end
		// JSDP-10 2015年5月4日    孙晓勇   end
		// BUG JSDP-107
		
	}

	/**
	 * 消息发送或消息收件的详情
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/member/message/view")
	public String view() throws Exception {
		user = getSessionUser();
		
		// BUG JSDP-107
		// JSDP-10 2015年5月4日    孙晓勇   start  对用户为null做处理
		if (null != user) {
								
			long userId = user.getUserId();
			long id = paramLong("id");
			MessageModel msg = messageService.find(id, userId);
			request.setAttribute("type", paramString("type"));
			request.setAttribute("msg", msg);
			return "view";
			
		} else {
			
			data.put("result", false);
			data.put("msg", "用户未登录");
			printJson(getStringOfJpaObj(data));
			//JSDP-86 wcw 2015-05-05 start
			data=null;
			//JSDP-86 wcw 2015-05-05 end
			return null;
			
		}
		// JSDP-10 2015年5月4日    孙晓勇   end
		// BUG JSDP-107
		
		
	}

	
	/**
	 * 用户通知设置
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/member/message/noticeUserSet")
	public void noticeUserSet() throws Exception {
		user = getSessionUser();
		
		// BUG JSDP-107
		// JSDP-10 2015年5月4日    孙晓勇   start  对用户为null做处理
		if (null != user) {
			
			messageService.noticeUserSet(model.getList(), user);
			printSuccess();
			
		} else {
			
			data.put("result", false);
			data.put("msg", "用户未登录");
			printJson(getStringOfJpaObj(data));
			
		}
		//JSDP-86 wcw 2015-05-05 start
		data=null;
		//JSDP-86 wcw 2015-05-05 end
		// JSDP-10 2015年5月4日    孙晓勇   end
		// BUG JSDP-107
		
	}
	
	/**
	 * 用户通知设置
	 * 
	 * @return
	 * @throws Exception
	 */
	@Action("/member_borrow/message/interaction")
	public String interaction() throws Exception {
		return "interaction";
	}

	public List<UserNoticeConfig> getUserNoticeConfigs() {
		return userNoticeConfigs;
	}

	public void setUserNoticeConfigs(List<UserNoticeConfig> userNoticeConfigs) {
		this.userNoticeConfigs = userNoticeConfigs;
	}
	
}
